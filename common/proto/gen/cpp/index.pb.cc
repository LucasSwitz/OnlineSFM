// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index.proto

#include "index.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_index_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexWord_index_2eproto;
class IndexWordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexWord> _instance;
} _IndexWord_default_instance_;
class IndexImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexImageRequest> _instance;
} _IndexImageRequest_default_instance_;
class IndexImageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexImageResponse> _instance;
} _IndexImageResponse_default_instance_;
class GetBagOfWordsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBagOfWordsRequest> _instance;
} _GetBagOfWordsRequest_default_instance_;
class GetBagOfWordsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBagOfWordsResponse> _instance;
} _GetBagOfWordsResponse_default_instance_;
class ClosestNRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClosestNRequest> _instance;
} _ClosestNRequest_default_instance_;
class ClosestNResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClosestNResponse> _instance;
} _ClosestNResponse_default_instance_;
static void InitDefaultsscc_info_ClosestNRequest_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClosestNRequest_default_instance_;
    new (ptr) ::ClosestNRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClosestNRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClosestNRequest_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClosestNRequest_index_2eproto}, {}};

static void InitDefaultsscc_info_ClosestNResponse_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClosestNResponse_default_instance_;
    new (ptr) ::ClosestNResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClosestNResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClosestNResponse_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClosestNResponse_index_2eproto}, {}};

static void InitDefaultsscc_info_GetBagOfWordsRequest_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetBagOfWordsRequest_default_instance_;
    new (ptr) ::GetBagOfWordsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetBagOfWordsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBagOfWordsRequest_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBagOfWordsRequest_index_2eproto}, {}};

static void InitDefaultsscc_info_GetBagOfWordsResponse_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetBagOfWordsResponse_default_instance_;
    new (ptr) ::GetBagOfWordsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetBagOfWordsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBagOfWordsResponse_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBagOfWordsResponse_index_2eproto}, {
      &scc_info_IndexWord_index_2eproto.base,}};

static void InitDefaultsscc_info_IndexImageRequest_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_IndexImageRequest_default_instance_;
    new (ptr) ::IndexImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndexImageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexImageRequest_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IndexImageRequest_index_2eproto}, {}};

static void InitDefaultsscc_info_IndexImageResponse_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_IndexImageResponse_default_instance_;
    new (ptr) ::IndexImageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndexImageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexImageResponse_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IndexImageResponse_index_2eproto}, {}};

static void InitDefaultsscc_info_IndexWord_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_IndexWord_default_instance_;
    new (ptr) ::IndexWord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndexWord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexWord_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IndexWord_index_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_index_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_index_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_index_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_index_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndexWord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndexWord, word_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndexImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndexImageRequest, reconstruction_id_),
  PROTOBUF_FIELD_OFFSET(::IndexImageRequest, image_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndexImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetBagOfWordsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetBagOfWordsRequest, image_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetBagOfWordsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetBagOfWordsResponse, words_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClosestNRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClosestNRequest, image_id_),
  PROTOBUF_FIELD_OFFSET(::ClosestNRequest, n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClosestNResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClosestNResponse, image_ids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IndexWord)},
  { 6, -1, sizeof(::IndexImageRequest)},
  { 13, -1, sizeof(::IndexImageResponse)},
  { 18, -1, sizeof(::GetBagOfWordsRequest)},
  { 24, -1, sizeof(::GetBagOfWordsResponse)},
  { 30, -1, sizeof(::ClosestNRequest)},
  { 37, -1, sizeof(::ClosestNResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IndexWord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IndexImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IndexImageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetBagOfWordsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetBagOfWordsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClosestNRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClosestNResponse_default_instance_),
};

const char descriptor_table_protodef_index_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013index.proto\"\031\n\tIndexWord\022\014\n\004word\030\001 \001(\014"
  "\"@\n\021IndexImageRequest\022\031\n\021reconstruction_"
  "id\030\001 \001(\t\022\020\n\010image_id\030\002 \001(\t\"\024\n\022IndexImage"
  "Response\"(\n\024GetBagOfWordsRequest\022\020\n\010imag"
  "e_id\030\001 \001(\t\"2\n\025GetBagOfWordsResponse\022\031\n\005w"
  "ords\030\001 \003(\0132\n.IndexWord\".\n\017ClosestNReques"
  "t\022\020\n\010image_id\030\001 \001(\t\022\t\n\001N\030\002 \001(\r\"%\n\020Closes"
  "tNResponse\022\021\n\timage_ids\030\001 \003(\t2\277\001\n\025Visual"
  "IndexingService\0225\n\nIndexImage\022\022.IndexIma"
  "geRequest\032\023.IndexImageResponse\022>\n\rGetBag"
  "OfWords\022\025.GetBagOfWordsRequest\032\026.GetBagO"
  "fWordsResponse\022/\n\010ClosestN\022\020.ClosestNReq"
  "uest\032\021.ClosestNResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_index_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_index_2eproto_sccs[7] = {
  &scc_info_ClosestNRequest_index_2eproto.base,
  &scc_info_ClosestNResponse_index_2eproto.base,
  &scc_info_GetBagOfWordsRequest_index_2eproto.base,
  &scc_info_GetBagOfWordsResponse_index_2eproto.base,
  &scc_info_IndexImageRequest_index_2eproto.base,
  &scc_info_IndexImageResponse_index_2eproto.base,
  &scc_info_IndexWord_index_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_index_2eproto_once;
static bool descriptor_table_index_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_index_2eproto = {
  &descriptor_table_index_2eproto_initialized, descriptor_table_protodef_index_2eproto, "index.proto", 511,
  &descriptor_table_index_2eproto_once, descriptor_table_index_2eproto_sccs, descriptor_table_index_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_index_2eproto::offsets,
  file_level_metadata_index_2eproto, 7, file_level_enum_descriptors_index_2eproto, file_level_service_descriptors_index_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_index_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_index_2eproto), true);

// ===================================================================

void IndexWord::InitAsDefaultInstance() {
}
class IndexWord::_Internal {
 public:
};

IndexWord::IndexWord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexWord)
}
IndexWord::IndexWord(const IndexWord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_word().empty()) {
    word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  // @@protoc_insertion_point(copy_constructor:IndexWord)
}

void IndexWord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexWord_index_2eproto.base);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IndexWord::~IndexWord() {
  // @@protoc_insertion_point(destructor:IndexWord)
  SharedDtor();
}

void IndexWord::SharedDtor() {
  word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IndexWord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexWord& IndexWord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexWord_index_2eproto.base);
  return *internal_default_instance();
}


void IndexWord::Clear() {
// @@protoc_insertion_point(message_clear_start:IndexWord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* IndexWord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_word();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexWord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexWord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes word = 1;
  if (this->word().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_word(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexWord)
  return target;
}

size_t IndexWord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndexWord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes word = 1;
  if (this->word().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_word());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexWord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndexWord)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexWord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexWord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndexWord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndexWord)
    MergeFrom(*source);
  }
}

void IndexWord::MergeFrom(const IndexWord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndexWord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.word().size() > 0) {

    word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
}

void IndexWord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndexWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexWord::CopyFrom(const IndexWord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndexWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexWord::IsInitialized() const {
  return true;
}

void IndexWord::InternalSwap(IndexWord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  word_.Swap(&other->word_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexWord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IndexImageRequest::InitAsDefaultInstance() {
}
class IndexImageRequest::_Internal {
 public:
};

IndexImageRequest::IndexImageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexImageRequest)
}
IndexImageRequest::IndexImageRequest(const IndexImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reconstruction_id().empty()) {
    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_id().empty()) {
    image_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_id_);
  }
  // @@protoc_insertion_point(copy_constructor:IndexImageRequest)
}

void IndexImageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexImageRequest_index_2eproto.base);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IndexImageRequest::~IndexImageRequest() {
  // @@protoc_insertion_point(destructor:IndexImageRequest)
  SharedDtor();
}

void IndexImageRequest::SharedDtor() {
  reconstruction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IndexImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexImageRequest& IndexImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexImageRequest_index_2eproto.base);
  return *internal_default_instance();
}


void IndexImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IndexImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* IndexImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reconstruction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reconstruction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IndexImageRequest.reconstruction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_image_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IndexImageRequest.image_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reconstruction_id().data(), static_cast<int>(this->_internal_reconstruction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndexImageRequest.reconstruction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reconstruction_id(), target);
  }

  // string image_id = 2;
  if (this->image_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_id().data(), static_cast<int>(this->_internal_image_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndexImageRequest.image_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexImageRequest)
  return target;
}

size_t IndexImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndexImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reconstruction_id());
  }

  // string image_id = 2;
  if (this->image_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndexImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndexImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndexImageRequest)
    MergeFrom(*source);
  }
}

void IndexImageRequest::MergeFrom(const IndexImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndexImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reconstruction_id().size() > 0) {

    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
  if (from.image_id().size() > 0) {

    image_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_id_);
  }
}

void IndexImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndexImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexImageRequest::CopyFrom(const IndexImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndexImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexImageRequest::IsInitialized() const {
  return true;
}

void IndexImageRequest::InternalSwap(IndexImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reconstruction_id_.Swap(&other->reconstruction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_id_.Swap(&other->image_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IndexImageResponse::InitAsDefaultInstance() {
}
class IndexImageResponse::_Internal {
 public:
};

IndexImageResponse::IndexImageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexImageResponse)
}
IndexImageResponse::IndexImageResponse(const IndexImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndexImageResponse)
}

void IndexImageResponse::SharedCtor() {
}

IndexImageResponse::~IndexImageResponse() {
  // @@protoc_insertion_point(destructor:IndexImageResponse)
  SharedDtor();
}

void IndexImageResponse::SharedDtor() {
}

void IndexImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexImageResponse& IndexImageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexImageResponse_index_2eproto.base);
  return *internal_default_instance();
}


void IndexImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:IndexImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* IndexImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexImageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexImageResponse)
  return target;
}

size_t IndexImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndexImageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexImageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndexImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexImageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndexImageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndexImageResponse)
    MergeFrom(*source);
  }
}

void IndexImageResponse::MergeFrom(const IndexImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndexImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IndexImageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndexImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexImageResponse::CopyFrom(const IndexImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndexImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexImageResponse::IsInitialized() const {
  return true;
}

void IndexImageResponse::InternalSwap(IndexImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexImageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBagOfWordsRequest::InitAsDefaultInstance() {
}
class GetBagOfWordsRequest::_Internal {
 public:
};

GetBagOfWordsRequest::GetBagOfWordsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetBagOfWordsRequest)
}
GetBagOfWordsRequest::GetBagOfWordsRequest(const GetBagOfWordsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_id().empty()) {
    image_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_id_);
  }
  // @@protoc_insertion_point(copy_constructor:GetBagOfWordsRequest)
}

void GetBagOfWordsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBagOfWordsRequest_index_2eproto.base);
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBagOfWordsRequest::~GetBagOfWordsRequest() {
  // @@protoc_insertion_point(destructor:GetBagOfWordsRequest)
  SharedDtor();
}

void GetBagOfWordsRequest::SharedDtor() {
  image_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBagOfWordsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBagOfWordsRequest& GetBagOfWordsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBagOfWordsRequest_index_2eproto.base);
  return *internal_default_instance();
}


void GetBagOfWordsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetBagOfWordsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetBagOfWordsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string image_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetBagOfWordsRequest.image_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBagOfWordsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetBagOfWordsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_id = 1;
  if (this->image_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_id().data(), static_cast<int>(this->_internal_image_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetBagOfWordsRequest.image_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_image_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetBagOfWordsRequest)
  return target;
}

size_t GetBagOfWordsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetBagOfWordsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_id = 1;
  if (this->image_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBagOfWordsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetBagOfWordsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBagOfWordsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBagOfWordsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetBagOfWordsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetBagOfWordsRequest)
    MergeFrom(*source);
  }
}

void GetBagOfWordsRequest::MergeFrom(const GetBagOfWordsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetBagOfWordsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_id().size() > 0) {

    image_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_id_);
  }
}

void GetBagOfWordsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetBagOfWordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBagOfWordsRequest::CopyFrom(const GetBagOfWordsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetBagOfWordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBagOfWordsRequest::IsInitialized() const {
  return true;
}

void GetBagOfWordsRequest::InternalSwap(GetBagOfWordsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_id_.Swap(&other->image_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBagOfWordsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBagOfWordsResponse::InitAsDefaultInstance() {
}
class GetBagOfWordsResponse::_Internal {
 public:
};

GetBagOfWordsResponse::GetBagOfWordsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetBagOfWordsResponse)
}
GetBagOfWordsResponse::GetBagOfWordsResponse(const GetBagOfWordsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      words_(from.words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetBagOfWordsResponse)
}

void GetBagOfWordsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBagOfWordsResponse_index_2eproto.base);
}

GetBagOfWordsResponse::~GetBagOfWordsResponse() {
  // @@protoc_insertion_point(destructor:GetBagOfWordsResponse)
  SharedDtor();
}

void GetBagOfWordsResponse::SharedDtor() {
}

void GetBagOfWordsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBagOfWordsResponse& GetBagOfWordsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBagOfWordsResponse_index_2eproto.base);
  return *internal_default_instance();
}


void GetBagOfWordsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetBagOfWordsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  _internal_metadata_.Clear();
}

const char* GetBagOfWordsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndexWord words = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_words(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBagOfWordsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetBagOfWordsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndexWord words = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_words_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_words(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetBagOfWordsResponse)
  return target;
}

size_t GetBagOfWordsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetBagOfWordsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndexWord words = 1;
  total_size += 1UL * this->_internal_words_size();
  for (const auto& msg : this->words_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBagOfWordsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetBagOfWordsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBagOfWordsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBagOfWordsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetBagOfWordsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetBagOfWordsResponse)
    MergeFrom(*source);
  }
}

void GetBagOfWordsResponse::MergeFrom(const GetBagOfWordsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetBagOfWordsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
}

void GetBagOfWordsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetBagOfWordsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBagOfWordsResponse::CopyFrom(const GetBagOfWordsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetBagOfWordsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBagOfWordsResponse::IsInitialized() const {
  return true;
}

void GetBagOfWordsResponse::InternalSwap(GetBagOfWordsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  words_.InternalSwap(&other->words_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBagOfWordsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClosestNRequest::InitAsDefaultInstance() {
}
class ClosestNRequest::_Internal {
 public:
};

ClosestNRequest::ClosestNRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClosestNRequest)
}
ClosestNRequest::ClosestNRequest(const ClosestNRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_id().empty()) {
    image_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_id_);
  }
  n_ = from.n_;
  // @@protoc_insertion_point(copy_constructor:ClosestNRequest)
}

void ClosestNRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClosestNRequest_index_2eproto.base);
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  n_ = 0u;
}

ClosestNRequest::~ClosestNRequest() {
  // @@protoc_insertion_point(destructor:ClosestNRequest)
  SharedDtor();
}

void ClosestNRequest::SharedDtor() {
  image_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClosestNRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClosestNRequest& ClosestNRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClosestNRequest_index_2eproto.base);
  return *internal_default_instance();
}


void ClosestNRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClosestNRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  n_ = 0u;
  _internal_metadata_.Clear();
}

const char* ClosestNRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string image_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClosestNRequest.image_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 N = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClosestNRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClosestNRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_id = 1;
  if (this->image_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_id().data(), static_cast<int>(this->_internal_image_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClosestNRequest.image_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_image_id(), target);
  }

  // uint32 N = 2;
  if (this->n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClosestNRequest)
  return target;
}

size_t ClosestNRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClosestNRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_id = 1;
  if (this->image_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_id());
  }

  // uint32 N = 2;
  if (this->n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClosestNRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClosestNRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClosestNRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClosestNRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClosestNRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClosestNRequest)
    MergeFrom(*source);
  }
}

void ClosestNRequest::MergeFrom(const ClosestNRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClosestNRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_id().size() > 0) {

    image_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_id_);
  }
  if (from.n() != 0) {
    _internal_set_n(from._internal_n());
  }
}

void ClosestNRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClosestNRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClosestNRequest::CopyFrom(const ClosestNRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClosestNRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosestNRequest::IsInitialized() const {
  return true;
}

void ClosestNRequest::InternalSwap(ClosestNRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_id_.Swap(&other->image_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(n_, other->n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClosestNRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClosestNResponse::InitAsDefaultInstance() {
}
class ClosestNResponse::_Internal {
 public:
};

ClosestNResponse::ClosestNResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClosestNResponse)
}
ClosestNResponse::ClosestNResponse(const ClosestNResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      image_ids_(from.image_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClosestNResponse)
}

void ClosestNResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClosestNResponse_index_2eproto.base);
}

ClosestNResponse::~ClosestNResponse() {
  // @@protoc_insertion_point(destructor:ClosestNResponse)
  SharedDtor();
}

void ClosestNResponse::SharedDtor() {
}

void ClosestNResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClosestNResponse& ClosestNResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClosestNResponse_index_2eproto.base);
  return *internal_default_instance();
}


void ClosestNResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClosestNResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* ClosestNResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string image_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_image_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClosestNResponse.image_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClosestNResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClosestNResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string image_ids = 1;
  for (int i = 0, n = this->_internal_image_ids_size(); i < n; i++) {
    const auto& s = this->_internal_image_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClosestNResponse.image_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClosestNResponse)
  return target;
}

size_t ClosestNResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClosestNResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string image_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(image_ids_.size());
  for (int i = 0, n = image_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      image_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClosestNResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClosestNResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClosestNResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClosestNResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClosestNResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClosestNResponse)
    MergeFrom(*source);
  }
}

void ClosestNResponse::MergeFrom(const ClosestNResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClosestNResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_ids_.MergeFrom(from.image_ids_);
}

void ClosestNResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClosestNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClosestNResponse::CopyFrom(const ClosestNResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClosestNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosestNResponse::IsInitialized() const {
  return true;
}

void ClosestNResponse::InternalSwap(ClosestNResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_ids_.InternalSwap(&other->image_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClosestNResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IndexWord* Arena::CreateMaybeMessage< ::IndexWord >(Arena* arena) {
  return Arena::CreateInternal< ::IndexWord >(arena);
}
template<> PROTOBUF_NOINLINE ::IndexImageRequest* Arena::CreateMaybeMessage< ::IndexImageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::IndexImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IndexImageResponse* Arena::CreateMaybeMessage< ::IndexImageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::IndexImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GetBagOfWordsRequest* Arena::CreateMaybeMessage< ::GetBagOfWordsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GetBagOfWordsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetBagOfWordsResponse* Arena::CreateMaybeMessage< ::GetBagOfWordsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GetBagOfWordsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClosestNRequest* Arena::CreateMaybeMessage< ::ClosestNRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClosestNRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClosestNResponse* Arena::CreateMaybeMessage< ::ClosestNResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ClosestNResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
