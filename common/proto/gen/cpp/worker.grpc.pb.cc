// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: worker.proto

#include "worker.pb.h"
#include "worker.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* WorkerPoolManager_method_names[] = {
  "/WorkerPoolManager/ComputeFeatures",
  "/WorkerPoolManager/ComputeMatches",
  "/WorkerPoolManager/Register",
};

std::unique_ptr< WorkerPoolManager::Stub> WorkerPoolManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WorkerPoolManager::Stub> stub(new WorkerPoolManager::Stub(channel));
  return stub;
}

WorkerPoolManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ComputeFeatures_(WorkerPoolManager_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ComputeMatches_(WorkerPoolManager_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Register_(WorkerPoolManager_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WorkerPoolManager::Stub::ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::WorkerComputeFeaturesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ComputeFeatures_, context, request, response);
}

void WorkerPoolManager::Stub::experimental_async::ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ComputeFeatures_, context, request, response, std::move(f));
}

void WorkerPoolManager::Stub::experimental_async::ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ComputeFeatures_, context, request, response, std::move(f));
}

void WorkerPoolManager::Stub::experimental_async::ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ComputeFeatures_, context, request, response, reactor);
}

void WorkerPoolManager::Stub::experimental_async::ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ComputeFeatures_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>* WorkerPoolManager::Stub::AsyncComputeFeaturesRaw(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::WorkerComputeFeaturesResponse>::Create(channel_.get(), cq, rpcmethod_ComputeFeatures_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>* WorkerPoolManager::Stub::PrepareAsyncComputeFeaturesRaw(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::WorkerComputeFeaturesResponse>::Create(channel_.get(), cq, rpcmethod_ComputeFeatures_, context, request, false);
}

::grpc::Status WorkerPoolManager::Stub::ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::WorkerComputeMatchesReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ComputeMatches_, context, request, response);
}

void WorkerPoolManager::Stub::experimental_async::ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ComputeMatches_, context, request, response, std::move(f));
}

void WorkerPoolManager::Stub::experimental_async::ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ComputeMatches_, context, request, response, std::move(f));
}

void WorkerPoolManager::Stub::experimental_async::ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ComputeMatches_, context, request, response, reactor);
}

void WorkerPoolManager::Stub::experimental_async::ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ComputeMatches_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>* WorkerPoolManager::Stub::AsyncComputeMatchesRaw(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::WorkerComputeMatchesReponse>::Create(channel_.get(), cq, rpcmethod_ComputeMatches_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>* WorkerPoolManager::Stub::PrepareAsyncComputeMatchesRaw(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::WorkerComputeMatchesReponse>::Create(channel_.get(), cq, rpcmethod_ComputeMatches_, context, request, false);
}

::grpc::Status WorkerPoolManager::Stub::Register(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::RegisterWorkerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

void WorkerPoolManager::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::RegisterWorkerRequest* request, ::RegisterWorkerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void WorkerPoolManager::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterWorkerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void WorkerPoolManager::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::RegisterWorkerRequest* request, ::RegisterWorkerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

void WorkerPoolManager::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterWorkerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RegisterWorkerResponse>* WorkerPoolManager::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterWorkerResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RegisterWorkerResponse>* WorkerPoolManager::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterWorkerResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

WorkerPoolManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerPoolManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerPoolManager::Service, ::WorkerComputeFeaturesRequest, ::WorkerComputeFeaturesResponse>(
          std::mem_fn(&WorkerPoolManager::Service::ComputeFeatures), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerPoolManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerPoolManager::Service, ::WorkerComputeMatchesRequest, ::WorkerComputeMatchesReponse>(
          std::mem_fn(&WorkerPoolManager::Service::ComputeMatches), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerPoolManager_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerPoolManager::Service, ::RegisterWorkerRequest, ::RegisterWorkerResponse>(
          std::mem_fn(&WorkerPoolManager::Service::Register), this)));
}

WorkerPoolManager::Service::~Service() {
}

::grpc::Status WorkerPoolManager::Service::ComputeFeatures(::grpc::ServerContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerPoolManager::Service::ComputeMatches(::grpc::ServerContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerPoolManager::Service::Register(::grpc::ServerContext* context, const ::RegisterWorkerRequest* request, ::RegisterWorkerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Worker_method_names[] = {
  "/Worker/ComputeFeatures",
  "/Worker/ComputeMatches",
};

std::unique_ptr< Worker::Stub> Worker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Worker::Stub> stub(new Worker::Stub(channel));
  return stub;
}

Worker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ComputeFeatures_(Worker_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ComputeMatches_(Worker_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Worker::Stub::ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::WorkerComputeFeaturesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ComputeFeatures_, context, request, response);
}

void Worker::Stub::experimental_async::ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ComputeFeatures_, context, request, response, std::move(f));
}

void Worker::Stub::experimental_async::ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ComputeFeatures_, context, request, response, std::move(f));
}

void Worker::Stub::experimental_async::ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ComputeFeatures_, context, request, response, reactor);
}

void Worker::Stub::experimental_async::ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ComputeFeatures_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>* Worker::Stub::AsyncComputeFeaturesRaw(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::WorkerComputeFeaturesResponse>::Create(channel_.get(), cq, rpcmethod_ComputeFeatures_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>* Worker::Stub::PrepareAsyncComputeFeaturesRaw(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::WorkerComputeFeaturesResponse>::Create(channel_.get(), cq, rpcmethod_ComputeFeatures_, context, request, false);
}

::grpc::Status Worker::Stub::ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::WorkerComputeMatchesReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ComputeMatches_, context, request, response);
}

void Worker::Stub::experimental_async::ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ComputeMatches_, context, request, response, std::move(f));
}

void Worker::Stub::experimental_async::ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ComputeMatches_, context, request, response, std::move(f));
}

void Worker::Stub::experimental_async::ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ComputeMatches_, context, request, response, reactor);
}

void Worker::Stub::experimental_async::ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ComputeMatches_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>* Worker::Stub::AsyncComputeMatchesRaw(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::WorkerComputeMatchesReponse>::Create(channel_.get(), cq, rpcmethod_ComputeMatches_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>* Worker::Stub::PrepareAsyncComputeMatchesRaw(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::WorkerComputeMatchesReponse>::Create(channel_.get(), cq, rpcmethod_ComputeMatches_, context, request, false);
}

Worker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::WorkerComputeFeaturesRequest, ::WorkerComputeFeaturesResponse>(
          std::mem_fn(&Worker::Service::ComputeFeatures), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::WorkerComputeMatchesRequest, ::WorkerComputeMatchesReponse>(
          std::mem_fn(&Worker::Service::ComputeMatches), this)));
}

Worker::Service::~Service() {
}

::grpc::Status Worker::Service::ComputeFeatures(::grpc::ServerContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::ComputeMatches(::grpc::ServerContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


