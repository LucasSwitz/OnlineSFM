// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto

#include "server.pb.h"
#include "server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* ReconstructionService_method_names[] = {
  "/ReconstructionService/Handshake",
  "/ReconstructionService/StoreImage",
  "/ReconstructionService/SparseReconstruct",
  "/ReconstructionService/GetOBJ",
  "/ReconstructionService/GetSparse",
  "/ReconstructionService/NewReconstruction",
  "/ReconstructionService/DeleteReconstruction",
  "/ReconstructionService/StartSession",
  "/ReconstructionService/StopSession",
  "/ReconstructionService/SessionAddImage",
  "/ReconstructionService/SetReconstructionConfig",
  "/ReconstructionService/GetReconstructionConfig",
  "/ReconstructionService/ReconstructionUploadImageBatch",
  "/ReconstructionService/MVS",
};

std::unique_ptr< ReconstructionService::Stub> ReconstructionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ReconstructionService::Stub> stub(new ReconstructionService::Stub(channel));
  return stub;
}

ReconstructionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Handshake_(ReconstructionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreImage_(ReconstructionService_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SparseReconstruct_(ReconstructionService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOBJ_(ReconstructionService_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetSparse_(ReconstructionService_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_NewReconstruction_(ReconstructionService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteReconstruction_(ReconstructionService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartSession_(ReconstructionService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopSession_(ReconstructionService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SessionAddImage_(ReconstructionService_method_names[9], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SetReconstructionConfig_(ReconstructionService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReconstructionConfig_(ReconstructionService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReconstructionUploadImageBatch_(ReconstructionService_method_names[12], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_MVS_(ReconstructionService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ReconstructionService::Stub::Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::HandshakeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Handshake_, context, request, response);
}

void ReconstructionService::Stub::experimental_async::Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Handshake_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Handshake_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Handshake_, context, request, response, reactor);
}

void ReconstructionService::Stub::experimental_async::Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Handshake_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::HandshakeResponse>* ReconstructionService::Stub::AsyncHandshakeRaw(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::HandshakeResponse>::Create(channel_.get(), cq, rpcmethod_Handshake_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HandshakeResponse>* ReconstructionService::Stub::PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::HandshakeResponse>::Create(channel_.get(), cq, rpcmethod_Handshake_, context, request, false);
}

::grpc::ClientWriter< ::StoreImageRequest>* ReconstructionService::Stub::StoreImageRaw(::grpc::ClientContext* context, ::StoreImageResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::StoreImageRequest>::Create(channel_.get(), rpcmethod_StoreImage_, context, response);
}

void ReconstructionService::Stub::experimental_async::StoreImage(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::experimental::ClientWriteReactor< ::StoreImageRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::StoreImageRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_StoreImage_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::StoreImageRequest>* ReconstructionService::Stub::AsyncStoreImageRaw(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::StoreImageRequest>::Create(channel_.get(), cq, rpcmethod_StoreImage_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::StoreImageRequest>* ReconstructionService::Stub::PrepareAsyncStoreImageRaw(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::StoreImageRequest>::Create(channel_.get(), cq, rpcmethod_StoreImage_, context, response, false, nullptr);
}

::grpc::Status ReconstructionService::Stub::SparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::SparseReconstructResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SparseReconstruct_, context, request, response);
}

void ReconstructionService::Stub::experimental_async::SparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest* request, ::SparseReconstructResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SparseReconstruct_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::SparseReconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SparseReconstructResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SparseReconstruct_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::SparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest* request, ::SparseReconstructResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SparseReconstruct_, context, request, response, reactor);
}

void ReconstructionService::Stub::experimental_async::SparseReconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SparseReconstructResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SparseReconstruct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SparseReconstructResponse>* ReconstructionService::Stub::AsyncSparseReconstructRaw(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SparseReconstructResponse>::Create(channel_.get(), cq, rpcmethod_SparseReconstruct_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SparseReconstructResponse>* ReconstructionService::Stub::PrepareAsyncSparseReconstructRaw(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SparseReconstructResponse>::Create(channel_.get(), cq, rpcmethod_SparseReconstruct_, context, request, false);
}

::grpc::ClientReader< ::GetOBJResponse>* ReconstructionService::Stub::GetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::GetOBJResponse>::Create(channel_.get(), rpcmethod_GetOBJ_, context, request);
}

void ReconstructionService::Stub::experimental_async::GetOBJ(::grpc::ClientContext* context, ::GetOBJRequest* request, ::grpc::experimental::ClientReadReactor< ::GetOBJResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::GetOBJResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetOBJ_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::GetOBJResponse>* ReconstructionService::Stub::AsyncGetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::GetOBJResponse>::Create(channel_.get(), cq, rpcmethod_GetOBJ_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::GetOBJResponse>* ReconstructionService::Stub::PrepareAsyncGetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::GetOBJResponse>::Create(channel_.get(), cq, rpcmethod_GetOBJ_, context, request, false, nullptr);
}

::grpc::ClientReader< ::GetSparseResponse>* ReconstructionService::Stub::GetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::GetSparseResponse>::Create(channel_.get(), rpcmethod_GetSparse_, context, request);
}

void ReconstructionService::Stub::experimental_async::GetSparse(::grpc::ClientContext* context, ::GetSparseRequest* request, ::grpc::experimental::ClientReadReactor< ::GetSparseResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::GetSparseResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetSparse_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::GetSparseResponse>* ReconstructionService::Stub::AsyncGetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::GetSparseResponse>::Create(channel_.get(), cq, rpcmethod_GetSparse_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::GetSparseResponse>* ReconstructionService::Stub::PrepareAsyncGetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::GetSparseResponse>::Create(channel_.get(), cq, rpcmethod_GetSparse_, context, request, false, nullptr);
}

::grpc::Status ReconstructionService::Stub::NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::NewReconstructionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NewReconstruction_, context, request, response);
}

void ReconstructionService::Stub::experimental_async::NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NewReconstruction_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NewReconstruction_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NewReconstruction_, context, request, response, reactor);
}

void ReconstructionService::Stub::experimental_async::NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NewReconstruction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>* ReconstructionService::Stub::AsyncNewReconstructionRaw(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::NewReconstructionResponse>::Create(channel_.get(), cq, rpcmethod_NewReconstruction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>* ReconstructionService::Stub::PrepareAsyncNewReconstructionRaw(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::NewReconstructionResponse>::Create(channel_.get(), cq, rpcmethod_NewReconstruction_, context, request, false);
}

::grpc::Status ReconstructionService::Stub::DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::DeleteReconstructionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteReconstruction_, context, request, response);
}

void ReconstructionService::Stub::experimental_async::DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteReconstruction_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteReconstruction_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteReconstruction_, context, request, response, reactor);
}

void ReconstructionService::Stub::experimental_async::DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteReconstruction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>* ReconstructionService::Stub::AsyncDeleteReconstructionRaw(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::DeleteReconstructionResponse>::Create(channel_.get(), cq, rpcmethod_DeleteReconstruction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>* ReconstructionService::Stub::PrepareAsyncDeleteReconstructionRaw(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::DeleteReconstructionResponse>::Create(channel_.get(), cq, rpcmethod_DeleteReconstruction_, context, request, false);
}

::grpc::Status ReconstructionService::Stub::StartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::StartSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartSession_, context, request, response);
}

void ReconstructionService::Stub::experimental_async::StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartSession_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartSession_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartSession_, context, request, response, reactor);
}

void ReconstructionService::Stub::experimental_async::StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StartSessionResponse>* ReconstructionService::Stub::AsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::StartSessionResponse>::Create(channel_.get(), cq, rpcmethod_StartSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::StartSessionResponse>* ReconstructionService::Stub::PrepareAsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::StartSessionResponse>::Create(channel_.get(), cq, rpcmethod_StartSession_, context, request, false);
}

::grpc::Status ReconstructionService::Stub::StopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::StopSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopSession_, context, request, response);
}

void ReconstructionService::Stub::experimental_async::StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopSession_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopSession_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopSession_, context, request, response, reactor);
}

void ReconstructionService::Stub::experimental_async::StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StopSessionResponse>* ReconstructionService::Stub::AsyncStopSessionRaw(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::StopSessionResponse>::Create(channel_.get(), cq, rpcmethod_StopSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::StopSessionResponse>* ReconstructionService::Stub::PrepareAsyncStopSessionRaw(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::StopSessionResponse>::Create(channel_.get(), cq, rpcmethod_StopSession_, context, request, false);
}

::grpc::ClientWriter< ::SessionAddImageRequest>* ReconstructionService::Stub::SessionAddImageRaw(::grpc::ClientContext* context, ::SessionAddImageResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::SessionAddImageRequest>::Create(channel_.get(), rpcmethod_SessionAddImage_, context, response);
}

void ReconstructionService::Stub::experimental_async::SessionAddImage(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::experimental::ClientWriteReactor< ::SessionAddImageRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::SessionAddImageRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_SessionAddImage_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::SessionAddImageRequest>* ReconstructionService::Stub::AsyncSessionAddImageRaw(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::SessionAddImageRequest>::Create(channel_.get(), cq, rpcmethod_SessionAddImage_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::SessionAddImageRequest>* ReconstructionService::Stub::PrepareAsyncSessionAddImageRaw(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::SessionAddImageRequest>::Create(channel_.get(), cq, rpcmethod_SessionAddImage_, context, response, false, nullptr);
}

::grpc::Status ReconstructionService::Stub::SetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::SetReconstructionConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetReconstructionConfig_, context, request, response);
}

void ReconstructionService::Stub::experimental_async::SetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest* request, ::SetReconstructionConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetReconstructionConfig_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::SetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetReconstructionConfig_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::SetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest* request, ::SetReconstructionConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetReconstructionConfig_, context, request, response, reactor);
}

void ReconstructionService::Stub::experimental_async::SetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetReconstructionConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigResponse>* ReconstructionService::Stub::AsyncSetReconstructionConfigRaw(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SetReconstructionConfigResponse>::Create(channel_.get(), cq, rpcmethod_SetReconstructionConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigResponse>* ReconstructionService::Stub::PrepareAsyncSetReconstructionConfigRaw(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SetReconstructionConfigResponse>::Create(channel_.get(), cq, rpcmethod_SetReconstructionConfig_, context, request, false);
}

::grpc::Status ReconstructionService::Stub::GetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::GetReconstructionConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetReconstructionConfig_, context, request, response);
}

void ReconstructionService::Stub::experimental_async::GetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest* request, ::GetReconstructionConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetReconstructionConfig_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::GetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetReconstructionConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetReconstructionConfig_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::GetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest* request, ::GetReconstructionConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetReconstructionConfig_, context, request, response, reactor);
}

void ReconstructionService::Stub::experimental_async::GetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetReconstructionConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetReconstructionConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetReconstructionConfigResponse>* ReconstructionService::Stub::AsyncGetReconstructionConfigRaw(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GetReconstructionConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetReconstructionConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GetReconstructionConfigResponse>* ReconstructionService::Stub::PrepareAsyncGetReconstructionConfigRaw(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GetReconstructionConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetReconstructionConfig_, context, request, false);
}

::grpc::ClientWriter< ::ReconstructionUploadImageBatchRequest>* ReconstructionService::Stub::ReconstructionUploadImageBatchRaw(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::ReconstructionUploadImageBatchRequest>::Create(channel_.get(), rpcmethod_ReconstructionUploadImageBatch_, context, response);
}

void ReconstructionService::Stub::experimental_async::ReconstructionUploadImageBatch(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::experimental::ClientWriteReactor< ::ReconstructionUploadImageBatchRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::ReconstructionUploadImageBatchRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_ReconstructionUploadImageBatch_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::ReconstructionUploadImageBatchRequest>* ReconstructionService::Stub::AsyncReconstructionUploadImageBatchRaw(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::ReconstructionUploadImageBatchRequest>::Create(channel_.get(), cq, rpcmethod_ReconstructionUploadImageBatch_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::ReconstructionUploadImageBatchRequest>* ReconstructionService::Stub::PrepareAsyncReconstructionUploadImageBatchRaw(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::ReconstructionUploadImageBatchRequest>::Create(channel_.get(), cq, rpcmethod_ReconstructionUploadImageBatch_, context, response, false, nullptr);
}

::grpc::Status ReconstructionService::Stub::MVS(::grpc::ClientContext* context, const ::MVSRequest& request, ::MVSResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MVS_, context, request, response);
}

void ReconstructionService::Stub::experimental_async::MVS(::grpc::ClientContext* context, const ::MVSRequest* request, ::MVSResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MVS_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::MVS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MVSResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MVS_, context, request, response, std::move(f));
}

void ReconstructionService::Stub::experimental_async::MVS(::grpc::ClientContext* context, const ::MVSRequest* request, ::MVSResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MVS_, context, request, response, reactor);
}

void ReconstructionService::Stub::experimental_async::MVS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MVSResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MVS_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MVSResponse>* ReconstructionService::Stub::AsyncMVSRaw(::grpc::ClientContext* context, const ::MVSRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::MVSResponse>::Create(channel_.get(), cq, rpcmethod_MVS_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MVSResponse>* ReconstructionService::Stub::PrepareAsyncMVSRaw(::grpc::ClientContext* context, const ::MVSRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::MVSResponse>::Create(channel_.get(), cq, rpcmethod_MVS_, context, request, false);
}

ReconstructionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReconstructionService::Service, ::HandhsakeRequest, ::HandshakeResponse>(
          std::mem_fn(&ReconstructionService::Service::Handshake), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< ReconstructionService::Service, ::StoreImageRequest, ::StoreImageResponse>(
          std::mem_fn(&ReconstructionService::Service::StoreImage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReconstructionService::Service, ::SparseReconstructRequest, ::SparseReconstructResponse>(
          std::mem_fn(&ReconstructionService::Service::SparseReconstruct), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ReconstructionService::Service, ::GetOBJRequest, ::GetOBJResponse>(
          std::mem_fn(&ReconstructionService::Service::GetOBJ), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ReconstructionService::Service, ::GetSparseRequest, ::GetSparseResponse>(
          std::mem_fn(&ReconstructionService::Service::GetSparse), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReconstructionService::Service, ::NewReconstructionRequest, ::NewReconstructionResponse>(
          std::mem_fn(&ReconstructionService::Service::NewReconstruction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReconstructionService::Service, ::DeleteReconstructionRequest, ::DeleteReconstructionResponse>(
          std::mem_fn(&ReconstructionService::Service::DeleteReconstruction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReconstructionService::Service, ::StartSessionRequest, ::StartSessionResponse>(
          std::mem_fn(&ReconstructionService::Service::StartSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReconstructionService::Service, ::StopSessionRequest, ::StopSessionResponse>(
          std::mem_fn(&ReconstructionService::Service::StopSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[9],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< ReconstructionService::Service, ::SessionAddImageRequest, ::SessionAddImageResponse>(
          std::mem_fn(&ReconstructionService::Service::SessionAddImage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReconstructionService::Service, ::SetReconstructionConfigRequest, ::SetReconstructionConfigResponse>(
          std::mem_fn(&ReconstructionService::Service::SetReconstructionConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReconstructionService::Service, ::GetReconstructionConfigRequest, ::GetReconstructionConfigResponse>(
          std::mem_fn(&ReconstructionService::Service::GetReconstructionConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[12],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< ReconstructionService::Service, ::ReconstructionUploadImageBatchRequest, ::ReconstructionUploadImageBatchResponse>(
          std::mem_fn(&ReconstructionService::Service::ReconstructionUploadImageBatch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReconstructionService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReconstructionService::Service, ::MVSRequest, ::MVSResponse>(
          std::mem_fn(&ReconstructionService::Service::MVS), this)));
}

ReconstructionService::Service::~Service() {
}

::grpc::Status ReconstructionService::Service::Handshake(::grpc::ServerContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::StoreImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::StoreImageRequest>* reader, ::StoreImageResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::SparseReconstruct(::grpc::ServerContext* context, const ::SparseReconstructRequest* request, ::SparseReconstructResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::GetOBJ(::grpc::ServerContext* context, const ::GetOBJRequest* request, ::grpc::ServerWriter< ::GetOBJResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::GetSparse(::grpc::ServerContext* context, const ::GetSparseRequest* request, ::grpc::ServerWriter< ::GetSparseResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::NewReconstruction(::grpc::ServerContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::DeleteReconstruction(::grpc::ServerContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::StartSession(::grpc::ServerContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::StopSession(::grpc::ServerContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::SessionAddImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::SessionAddImageRequest>* reader, ::SessionAddImageResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::SetReconstructionConfig(::grpc::ServerContext* context, const ::SetReconstructionConfigRequest* request, ::SetReconstructionConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::GetReconstructionConfig(::grpc::ServerContext* context, const ::GetReconstructionConfigRequest* request, ::GetReconstructionConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::ReconstructionUploadImageBatch(::grpc::ServerContext* context, ::grpc::ServerReader< ::ReconstructionUploadImageBatchRequest>* reader, ::ReconstructionUploadImageBatchResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReconstructionService::Service::MVS(::grpc::ServerContext* context, const ::MVSRequest* request, ::MVSResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


