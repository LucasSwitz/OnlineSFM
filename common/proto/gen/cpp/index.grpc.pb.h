// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: index.proto
#ifndef GRPC_index_2eproto__INCLUDED
#define GRPC_index_2eproto__INCLUDED

#include "index.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class VisualIndexingService final {
 public:
  static constexpr char const* service_full_name() {
    return "VisualIndexingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status IndexImage(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::IndexImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndexImageResponse>> AsyncIndexImage(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndexImageResponse>>(AsyncIndexImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndexImageResponse>> PrepareAsyncIndexImage(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndexImageResponse>>(PrepareAsyncIndexImageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::GetBagOfWordsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetBagOfWordsResponse>> AsyncGetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetBagOfWordsResponse>>(AsyncGetBagOfWordsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetBagOfWordsResponse>> PrepareAsyncGetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetBagOfWordsResponse>>(PrepareAsyncGetBagOfWordsRaw(context, request, cq));
    }
    virtual ::grpc::Status ClosestN(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::ClosestNResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ClosestNResponse>> AsyncClosestN(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ClosestNResponse>>(AsyncClosestNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ClosestNResponse>> PrepareAsyncClosestN(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ClosestNResponse>>(PrepareAsyncClosestNRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void IndexImage(::grpc::ClientContext* context, const ::IndexImageRequest* request, ::IndexImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IndexImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndexImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IndexImage(::grpc::ClientContext* context, const ::IndexImageRequest* request, ::IndexImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IndexImage(::grpc::ClientContext* context, const ::IndexImageRequest* request, ::IndexImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IndexImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndexImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IndexImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndexImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest* request, ::GetBagOfWordsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBagOfWords(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetBagOfWordsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest* request, ::GetBagOfWordsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest* request, ::GetBagOfWordsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBagOfWords(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetBagOfWordsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBagOfWords(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetBagOfWordsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ClosestN(::grpc::ClientContext* context, const ::ClosestNRequest* request, ::ClosestNResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClosestN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ClosestNResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ClosestN(::grpc::ClientContext* context, const ::ClosestNRequest* request, ::ClosestNResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ClosestN(::grpc::ClientContext* context, const ::ClosestNRequest* request, ::ClosestNResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ClosestN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ClosestNResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ClosestN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ClosestNResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndexImageResponse>* AsyncIndexImageRaw(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndexImageResponse>* PrepareAsyncIndexImageRaw(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetBagOfWordsResponse>* AsyncGetBagOfWordsRaw(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetBagOfWordsResponse>* PrepareAsyncGetBagOfWordsRaw(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ClosestNResponse>* AsyncClosestNRaw(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ClosestNResponse>* PrepareAsyncClosestNRaw(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status IndexImage(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::IndexImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndexImageResponse>> AsyncIndexImage(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndexImageResponse>>(AsyncIndexImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndexImageResponse>> PrepareAsyncIndexImage(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndexImageResponse>>(PrepareAsyncIndexImageRaw(context, request, cq));
    }
    ::grpc::Status GetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::GetBagOfWordsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetBagOfWordsResponse>> AsyncGetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetBagOfWordsResponse>>(AsyncGetBagOfWordsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetBagOfWordsResponse>> PrepareAsyncGetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetBagOfWordsResponse>>(PrepareAsyncGetBagOfWordsRaw(context, request, cq));
    }
    ::grpc::Status ClosestN(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::ClosestNResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ClosestNResponse>> AsyncClosestN(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ClosestNResponse>>(AsyncClosestNRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ClosestNResponse>> PrepareAsyncClosestN(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ClosestNResponse>>(PrepareAsyncClosestNRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void IndexImage(::grpc::ClientContext* context, const ::IndexImageRequest* request, ::IndexImageResponse* response, std::function<void(::grpc::Status)>) override;
      void IndexImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndexImageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IndexImage(::grpc::ClientContext* context, const ::IndexImageRequest* request, ::IndexImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IndexImage(::grpc::ClientContext* context, const ::IndexImageRequest* request, ::IndexImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IndexImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndexImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IndexImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndexImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest* request, ::GetBagOfWordsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBagOfWords(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetBagOfWordsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest* request, ::GetBagOfWordsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest* request, ::GetBagOfWordsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBagOfWords(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetBagOfWordsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBagOfWords(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetBagOfWordsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ClosestN(::grpc::ClientContext* context, const ::ClosestNRequest* request, ::ClosestNResponse* response, std::function<void(::grpc::Status)>) override;
      void ClosestN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ClosestNResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ClosestN(::grpc::ClientContext* context, const ::ClosestNRequest* request, ::ClosestNResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ClosestN(::grpc::ClientContext* context, const ::ClosestNRequest* request, ::ClosestNResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ClosestN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ClosestNResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ClosestN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ClosestNResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::IndexImageResponse>* AsyncIndexImageRaw(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndexImageResponse>* PrepareAsyncIndexImageRaw(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetBagOfWordsResponse>* AsyncGetBagOfWordsRaw(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetBagOfWordsResponse>* PrepareAsyncGetBagOfWordsRaw(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ClosestNResponse>* AsyncClosestNRaw(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ClosestNResponse>* PrepareAsyncClosestNRaw(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_IndexImage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBagOfWords_;
    const ::grpc::internal::RpcMethod rpcmethod_ClosestN_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status IndexImage(::grpc::ServerContext* context, const ::IndexImageRequest* request, ::IndexImageResponse* response);
    virtual ::grpc::Status GetBagOfWords(::grpc::ServerContext* context, const ::GetBagOfWordsRequest* request, ::GetBagOfWordsResponse* response);
    virtual ::grpc::Status ClosestN(::grpc::ServerContext* context, const ::ClosestNRequest* request, ::ClosestNResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_IndexImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IndexImage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_IndexImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IndexImage(::grpc::ServerContext* /*context*/, const ::IndexImageRequest* /*request*/, ::IndexImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIndexImage(::grpc::ServerContext* context, ::IndexImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::IndexImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBagOfWords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBagOfWords() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetBagOfWords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBagOfWords(::grpc::ServerContext* /*context*/, const ::GetBagOfWordsRequest* /*request*/, ::GetBagOfWordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBagOfWords(::grpc::ServerContext* context, ::GetBagOfWordsRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetBagOfWordsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClosestN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClosestN() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ClosestN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClosestN(::grpc::ServerContext* /*context*/, const ::ClosestNRequest* /*request*/, ::ClosestNResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClosestN(::grpc::ServerContext* context, ::ClosestNRequest* request, ::grpc::ServerAsyncResponseWriter< ::ClosestNResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_IndexImage<WithAsyncMethod_GetBagOfWords<WithAsyncMethod_ClosestN<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IndexImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IndexImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::IndexImageRequest, ::IndexImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IndexImageRequest* request, ::IndexImageResponse* response) { return this->IndexImage(context, request, response); }));}
    void SetMessageAllocatorFor_IndexImage(
        ::grpc::experimental::MessageAllocator< ::IndexImageRequest, ::IndexImageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::IndexImageRequest, ::IndexImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IndexImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IndexImage(::grpc::ServerContext* /*context*/, const ::IndexImageRequest* /*request*/, ::IndexImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IndexImage(
      ::grpc::CallbackServerContext* /*context*/, const ::IndexImageRequest* /*request*/, ::IndexImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IndexImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IndexImageRequest* /*request*/, ::IndexImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBagOfWords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBagOfWords() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::GetBagOfWordsRequest, ::GetBagOfWordsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GetBagOfWordsRequest* request, ::GetBagOfWordsResponse* response) { return this->GetBagOfWords(context, request, response); }));}
    void SetMessageAllocatorFor_GetBagOfWords(
        ::grpc::experimental::MessageAllocator< ::GetBagOfWordsRequest, ::GetBagOfWordsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GetBagOfWordsRequest, ::GetBagOfWordsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBagOfWords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBagOfWords(::grpc::ServerContext* /*context*/, const ::GetBagOfWordsRequest* /*request*/, ::GetBagOfWordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBagOfWords(
      ::grpc::CallbackServerContext* /*context*/, const ::GetBagOfWordsRequest* /*request*/, ::GetBagOfWordsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBagOfWords(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GetBagOfWordsRequest* /*request*/, ::GetBagOfWordsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ClosestN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ClosestN() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ClosestNRequest, ::ClosestNResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ClosestNRequest* request, ::ClosestNResponse* response) { return this->ClosestN(context, request, response); }));}
    void SetMessageAllocatorFor_ClosestN(
        ::grpc::experimental::MessageAllocator< ::ClosestNRequest, ::ClosestNResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ClosestNRequest, ::ClosestNResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ClosestN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClosestN(::grpc::ServerContext* /*context*/, const ::ClosestNRequest* /*request*/, ::ClosestNResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClosestN(
      ::grpc::CallbackServerContext* /*context*/, const ::ClosestNRequest* /*request*/, ::ClosestNResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClosestN(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ClosestNRequest* /*request*/, ::ClosestNResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_IndexImage<ExperimentalWithCallbackMethod_GetBagOfWords<ExperimentalWithCallbackMethod_ClosestN<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_IndexImage<ExperimentalWithCallbackMethod_GetBagOfWords<ExperimentalWithCallbackMethod_ClosestN<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_IndexImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IndexImage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_IndexImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IndexImage(::grpc::ServerContext* /*context*/, const ::IndexImageRequest* /*request*/, ::IndexImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBagOfWords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBagOfWords() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetBagOfWords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBagOfWords(::grpc::ServerContext* /*context*/, const ::GetBagOfWordsRequest* /*request*/, ::GetBagOfWordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClosestN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClosestN() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ClosestN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClosestN(::grpc::ServerContext* /*context*/, const ::ClosestNRequest* /*request*/, ::ClosestNResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_IndexImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IndexImage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_IndexImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IndexImage(::grpc::ServerContext* /*context*/, const ::IndexImageRequest* /*request*/, ::IndexImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIndexImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBagOfWords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBagOfWords() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetBagOfWords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBagOfWords(::grpc::ServerContext* /*context*/, const ::GetBagOfWordsRequest* /*request*/, ::GetBagOfWordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBagOfWords(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClosestN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClosestN() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ClosestN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClosestN(::grpc::ServerContext* /*context*/, const ::ClosestNRequest* /*request*/, ::ClosestNResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClosestN(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IndexImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IndexImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IndexImage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_IndexImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IndexImage(::grpc::ServerContext* /*context*/, const ::IndexImageRequest* /*request*/, ::IndexImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IndexImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IndexImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBagOfWords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBagOfWords() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBagOfWords(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBagOfWords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBagOfWords(::grpc::ServerContext* /*context*/, const ::GetBagOfWordsRequest* /*request*/, ::GetBagOfWordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBagOfWords(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBagOfWords(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ClosestN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ClosestN() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClosestN(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ClosestN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClosestN(::grpc::ServerContext* /*context*/, const ::ClosestNRequest* /*request*/, ::ClosestNResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClosestN(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClosestN(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IndexImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IndexImage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::IndexImageRequest, ::IndexImageResponse>(std::bind(&WithStreamedUnaryMethod_IndexImage<BaseClass>::StreamedIndexImage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IndexImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IndexImage(::grpc::ServerContext* /*context*/, const ::IndexImageRequest* /*request*/, ::IndexImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIndexImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndexImageRequest,::IndexImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBagOfWords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBagOfWords() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::GetBagOfWordsRequest, ::GetBagOfWordsResponse>(std::bind(&WithStreamedUnaryMethod_GetBagOfWords<BaseClass>::StreamedGetBagOfWords, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBagOfWords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBagOfWords(::grpc::ServerContext* /*context*/, const ::GetBagOfWordsRequest* /*request*/, ::GetBagOfWordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBagOfWords(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetBagOfWordsRequest,::GetBagOfWordsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClosestN : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClosestN() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ClosestNRequest, ::ClosestNResponse>(std::bind(&WithStreamedUnaryMethod_ClosestN<BaseClass>::StreamedClosestN, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ClosestN() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClosestN(::grpc::ServerContext* /*context*/, const ::ClosestNRequest* /*request*/, ::ClosestNResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClosestN(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ClosestNRequest,::ClosestNResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_IndexImage<WithStreamedUnaryMethod_GetBagOfWords<WithStreamedUnaryMethod_ClosestN<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_IndexImage<WithStreamedUnaryMethod_GetBagOfWords<WithStreamedUnaryMethod_ClosestN<Service > > > StreamedService;
};


#endif  // GRPC_index_2eproto__INCLUDED
