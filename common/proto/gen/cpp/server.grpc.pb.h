// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto
#ifndef GRPC_server_2eproto__INCLUDED
#define GRPC_server_2eproto__INCLUDED

#include "server.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class ReconstructionService final {
 public:
  static constexpr char const* service_full_name() {
    return "ReconstructionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::HandshakeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandshakeResponse>> AsyncHandshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandshakeResponse>>(AsyncHandshakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandshakeResponse>> PrepareAsyncHandshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandshakeResponse>>(PrepareAsyncHandshakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::UploadImageRequest>> UploadImage(::grpc::ClientContext* context, ::ImageUploadResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::UploadImageRequest>>(UploadImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::UploadImageRequest>> AsyncUploadImage(::grpc::ClientContext* context, ::ImageUploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::UploadImageRequest>>(AsyncUploadImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::UploadImageRequest>> PrepareAsyncUploadImage(::grpc::ClientContext* context, ::ImageUploadResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::UploadImageRequest>>(PrepareAsyncUploadImageRaw(context, response, cq));
    }
    virtual ::grpc::Status Reconstruct(::grpc::ClientContext* context, const ::ReconstructRequest& request, ::ReconstructResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ReconstructResponse>> AsyncReconstruct(::grpc::ClientContext* context, const ::ReconstructRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ReconstructResponse>>(AsyncReconstructRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ReconstructResponse>> PrepareAsyncReconstruct(::grpc::ClientContext* context, const ::ReconstructRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ReconstructResponse>>(PrepareAsyncReconstructRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::GetOBJResponse>> GetOBJ(::grpc::ClientContext* context, const ::GetOBJRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::GetOBJResponse>>(GetOBJRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetOBJResponse>> AsyncGetOBJ(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetOBJResponse>>(AsyncGetOBJRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetOBJResponse>> PrepareAsyncGetOBJ(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetOBJResponse>>(PrepareAsyncGetOBJRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::GetSparseResponse>> GetSparse(::grpc::ClientContext* context, const ::GetSparseRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::GetSparseResponse>>(GetSparseRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetSparseResponse>> AsyncGetSparse(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetSparseResponse>>(AsyncGetSparseRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetSparseResponse>> PrepareAsyncGetSparse(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetSparseResponse>>(PrepareAsyncGetSparseRaw(context, request, cq));
    }
    virtual ::grpc::Status NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::NewReconstructionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewReconstructionResponse>> AsyncNewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewReconstructionResponse>>(AsyncNewReconstructionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewReconstructionResponse>> PrepareAsyncNewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewReconstructionResponse>>(PrepareAsyncNewReconstructionRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::DeleteReconstructionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReconstructionResponse>> AsyncDeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReconstructionResponse>>(AsyncDeleteReconstructionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReconstructionResponse>> PrepareAsyncDeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReconstructionResponse>>(PrepareAsyncDeleteReconstructionRaw(context, request, cq));
    }
    virtual ::grpc::Status StartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::StartSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResponse>> AsyncStartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResponse>>(AsyncStartSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResponse>> PrepareAsyncStartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResponse>>(PrepareAsyncStartSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status StopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::StopSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StopSessionResponse>> AsyncStopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StopSessionResponse>>(AsyncStopSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StopSessionResponse>> PrepareAsyncStopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StopSessionResponse>>(PrepareAsyncStopSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::SessionUploadImageRequest>> SessionUploadImage(::grpc::ClientContext* context, ::SessionUploadImageResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::SessionUploadImageRequest>>(SessionUploadImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::SessionUploadImageRequest>> AsyncSessionUploadImage(::grpc::ClientContext* context, ::SessionUploadImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::SessionUploadImageRequest>>(AsyncSessionUploadImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::SessionUploadImageRequest>> PrepareAsyncSessionUploadImage(::grpc::ClientContext* context, ::SessionUploadImageResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::SessionUploadImageRequest>>(PrepareAsyncSessionUploadImageRaw(context, response, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UploadImage(::grpc::ClientContext* context, ::ImageUploadResponse* response, ::grpc::ClientWriteReactor< ::UploadImageRequest>* reactor) = 0;
      #else
      virtual void UploadImage(::grpc::ClientContext* context, ::ImageUploadResponse* response, ::grpc::experimental::ClientWriteReactor< ::UploadImageRequest>* reactor) = 0;
      #endif
      virtual void Reconstruct(::grpc::ClientContext* context, const ::ReconstructRequest* request, ::ReconstructResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ReconstructResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Reconstruct(::grpc::ClientContext* context, const ::ReconstructRequest* request, ::ReconstructResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Reconstruct(::grpc::ClientContext* context, const ::ReconstructRequest* request, ::ReconstructResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Reconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ReconstructResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Reconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ReconstructResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOBJ(::grpc::ClientContext* context, ::GetOBJRequest* request, ::grpc::ClientReadReactor< ::GetOBJResponse>* reactor) = 0;
      #else
      virtual void GetOBJ(::grpc::ClientContext* context, ::GetOBJRequest* request, ::grpc::experimental::ClientReadReactor< ::GetOBJResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSparse(::grpc::ClientContext* context, ::GetSparseRequest* request, ::grpc::ClientReadReactor< ::GetSparseResponse>* reactor) = 0;
      #else
      virtual void GetSparse(::grpc::ClientContext* context, ::GetSparseRequest* request, ::grpc::experimental::ClientReadReactor< ::GetSparseResponse>* reactor) = 0;
      #endif
      virtual void NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SessionUploadImage(::grpc::ClientContext* context, ::SessionUploadImageResponse* response, ::grpc::ClientWriteReactor< ::SessionUploadImageRequest>* reactor) = 0;
      #else
      virtual void SessionUploadImage(::grpc::ClientContext* context, ::SessionUploadImageResponse* response, ::grpc::experimental::ClientWriteReactor< ::SessionUploadImageRequest>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HandshakeResponse>* AsyncHandshakeRaw(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HandshakeResponse>* PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::UploadImageRequest>* UploadImageRaw(::grpc::ClientContext* context, ::ImageUploadResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::UploadImageRequest>* AsyncUploadImageRaw(::grpc::ClientContext* context, ::ImageUploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::UploadImageRequest>* PrepareAsyncUploadImageRaw(::grpc::ClientContext* context, ::ImageUploadResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ReconstructResponse>* AsyncReconstructRaw(::grpc::ClientContext* context, const ::ReconstructRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ReconstructResponse>* PrepareAsyncReconstructRaw(::grpc::ClientContext* context, const ::ReconstructRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::GetOBJResponse>* GetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GetOBJResponse>* AsyncGetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GetOBJResponse>* PrepareAsyncGetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::GetSparseResponse>* GetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GetSparseResponse>* AsyncGetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GetSparseResponse>* PrepareAsyncGetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NewReconstructionResponse>* AsyncNewReconstructionRaw(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NewReconstructionResponse>* PrepareAsyncNewReconstructionRaw(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReconstructionResponse>* AsyncDeleteReconstructionRaw(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReconstructionResponse>* PrepareAsyncDeleteReconstructionRaw(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResponse>* AsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResponse>* PrepareAsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StopSessionResponse>* AsyncStopSessionRaw(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StopSessionResponse>* PrepareAsyncStopSessionRaw(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::SessionUploadImageRequest>* SessionUploadImageRaw(::grpc::ClientContext* context, ::SessionUploadImageResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::SessionUploadImageRequest>* AsyncSessionUploadImageRaw(::grpc::ClientContext* context, ::SessionUploadImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::SessionUploadImageRequest>* PrepareAsyncSessionUploadImageRaw(::grpc::ClientContext* context, ::SessionUploadImageResponse* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::HandshakeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandshakeResponse>> AsyncHandshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandshakeResponse>>(AsyncHandshakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandshakeResponse>> PrepareAsyncHandshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandshakeResponse>>(PrepareAsyncHandshakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::UploadImageRequest>> UploadImage(::grpc::ClientContext* context, ::ImageUploadResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::UploadImageRequest>>(UploadImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::UploadImageRequest>> AsyncUploadImage(::grpc::ClientContext* context, ::ImageUploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::UploadImageRequest>>(AsyncUploadImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::UploadImageRequest>> PrepareAsyncUploadImage(::grpc::ClientContext* context, ::ImageUploadResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::UploadImageRequest>>(PrepareAsyncUploadImageRaw(context, response, cq));
    }
    ::grpc::Status Reconstruct(::grpc::ClientContext* context, const ::ReconstructRequest& request, ::ReconstructResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ReconstructResponse>> AsyncReconstruct(::grpc::ClientContext* context, const ::ReconstructRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ReconstructResponse>>(AsyncReconstructRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ReconstructResponse>> PrepareAsyncReconstruct(::grpc::ClientContext* context, const ::ReconstructRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ReconstructResponse>>(PrepareAsyncReconstructRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::GetOBJResponse>> GetOBJ(::grpc::ClientContext* context, const ::GetOBJRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::GetOBJResponse>>(GetOBJRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GetOBJResponse>> AsyncGetOBJ(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GetOBJResponse>>(AsyncGetOBJRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GetOBJResponse>> PrepareAsyncGetOBJ(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GetOBJResponse>>(PrepareAsyncGetOBJRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::GetSparseResponse>> GetSparse(::grpc::ClientContext* context, const ::GetSparseRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::GetSparseResponse>>(GetSparseRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GetSparseResponse>> AsyncGetSparse(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GetSparseResponse>>(AsyncGetSparseRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GetSparseResponse>> PrepareAsyncGetSparse(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GetSparseResponse>>(PrepareAsyncGetSparseRaw(context, request, cq));
    }
    ::grpc::Status NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::NewReconstructionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>> AsyncNewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>>(AsyncNewReconstructionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>> PrepareAsyncNewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>>(PrepareAsyncNewReconstructionRaw(context, request, cq));
    }
    ::grpc::Status DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::DeleteReconstructionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>> AsyncDeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>>(AsyncDeleteReconstructionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>> PrepareAsyncDeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>>(PrepareAsyncDeleteReconstructionRaw(context, request, cq));
    }
    ::grpc::Status StartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::StartSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartSessionResponse>> AsyncStartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartSessionResponse>>(AsyncStartSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartSessionResponse>> PrepareAsyncStartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartSessionResponse>>(PrepareAsyncStartSessionRaw(context, request, cq));
    }
    ::grpc::Status StopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::StopSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StopSessionResponse>> AsyncStopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StopSessionResponse>>(AsyncStopSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StopSessionResponse>> PrepareAsyncStopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StopSessionResponse>>(PrepareAsyncStopSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::SessionUploadImageRequest>> SessionUploadImage(::grpc::ClientContext* context, ::SessionUploadImageResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::SessionUploadImageRequest>>(SessionUploadImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::SessionUploadImageRequest>> AsyncSessionUploadImage(::grpc::ClientContext* context, ::SessionUploadImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::SessionUploadImageRequest>>(AsyncSessionUploadImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::SessionUploadImageRequest>> PrepareAsyncSessionUploadImage(::grpc::ClientContext* context, ::SessionUploadImageResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::SessionUploadImageRequest>>(PrepareAsyncSessionUploadImageRaw(context, response, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, std::function<void(::grpc::Status)>) override;
      void Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UploadImage(::grpc::ClientContext* context, ::ImageUploadResponse* response, ::grpc::ClientWriteReactor< ::UploadImageRequest>* reactor) override;
      #else
      void UploadImage(::grpc::ClientContext* context, ::ImageUploadResponse* response, ::grpc::experimental::ClientWriteReactor< ::UploadImageRequest>* reactor) override;
      #endif
      void Reconstruct(::grpc::ClientContext* context, const ::ReconstructRequest* request, ::ReconstructResponse* response, std::function<void(::grpc::Status)>) override;
      void Reconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ReconstructResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Reconstruct(::grpc::ClientContext* context, const ::ReconstructRequest* request, ::ReconstructResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Reconstruct(::grpc::ClientContext* context, const ::ReconstructRequest* request, ::ReconstructResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Reconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ReconstructResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Reconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ReconstructResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOBJ(::grpc::ClientContext* context, ::GetOBJRequest* request, ::grpc::ClientReadReactor< ::GetOBJResponse>* reactor) override;
      #else
      void GetOBJ(::grpc::ClientContext* context, ::GetOBJRequest* request, ::grpc::experimental::ClientReadReactor< ::GetOBJResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSparse(::grpc::ClientContext* context, ::GetSparseRequest* request, ::grpc::ClientReadReactor< ::GetSparseResponse>* reactor) override;
      #else
      void GetSparse(::grpc::ClientContext* context, ::GetSparseRequest* request, ::grpc::experimental::ClientReadReactor< ::GetSparseResponse>* reactor) override;
      #endif
      void NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, std::function<void(::grpc::Status)>) override;
      void NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SessionUploadImage(::grpc::ClientContext* context, ::SessionUploadImageResponse* response, ::grpc::ClientWriteReactor< ::SessionUploadImageRequest>* reactor) override;
      #else
      void SessionUploadImage(::grpc::ClientContext* context, ::SessionUploadImageResponse* response, ::grpc::experimental::ClientWriteReactor< ::SessionUploadImageRequest>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::HandshakeResponse>* AsyncHandshakeRaw(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HandshakeResponse>* PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::UploadImageRequest>* UploadImageRaw(::grpc::ClientContext* context, ::ImageUploadResponse* response) override;
    ::grpc::ClientAsyncWriter< ::UploadImageRequest>* AsyncUploadImageRaw(::grpc::ClientContext* context, ::ImageUploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::UploadImageRequest>* PrepareAsyncUploadImageRaw(::grpc::ClientContext* context, ::ImageUploadResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ReconstructResponse>* AsyncReconstructRaw(::grpc::ClientContext* context, const ::ReconstructRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ReconstructResponse>* PrepareAsyncReconstructRaw(::grpc::ClientContext* context, const ::ReconstructRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::GetOBJResponse>* GetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request) override;
    ::grpc::ClientAsyncReader< ::GetOBJResponse>* AsyncGetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::GetOBJResponse>* PrepareAsyncGetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::GetSparseResponse>* GetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request) override;
    ::grpc::ClientAsyncReader< ::GetSparseResponse>* AsyncGetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::GetSparseResponse>* PrepareAsyncGetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>* AsyncNewReconstructionRaw(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>* PrepareAsyncNewReconstructionRaw(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>* AsyncDeleteReconstructionRaw(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>* PrepareAsyncDeleteReconstructionRaw(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StartSessionResponse>* AsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StartSessionResponse>* PrepareAsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StopSessionResponse>* AsyncStopSessionRaw(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StopSessionResponse>* PrepareAsyncStopSessionRaw(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::SessionUploadImageRequest>* SessionUploadImageRaw(::grpc::ClientContext* context, ::SessionUploadImageResponse* response) override;
    ::grpc::ClientAsyncWriter< ::SessionUploadImageRequest>* AsyncSessionUploadImageRaw(::grpc::ClientContext* context, ::SessionUploadImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::SessionUploadImageRequest>* PrepareAsyncSessionUploadImageRaw(::grpc::ClientContext* context, ::SessionUploadImageResponse* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Handshake_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadImage_;
    const ::grpc::internal::RpcMethod rpcmethod_Reconstruct_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOBJ_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSparse_;
    const ::grpc::internal::RpcMethod rpcmethod_NewReconstruction_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteReconstruction_;
    const ::grpc::internal::RpcMethod rpcmethod_StartSession_;
    const ::grpc::internal::RpcMethod rpcmethod_StopSession_;
    const ::grpc::internal::RpcMethod rpcmethod_SessionUploadImage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Handshake(::grpc::ServerContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response);
    virtual ::grpc::Status UploadImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::UploadImageRequest>* reader, ::ImageUploadResponse* response);
    virtual ::grpc::Status Reconstruct(::grpc::ServerContext* context, const ::ReconstructRequest* request, ::ReconstructResponse* response);
    virtual ::grpc::Status GetOBJ(::grpc::ServerContext* context, const ::GetOBJRequest* request, ::grpc::ServerWriter< ::GetOBJResponse>* writer);
    virtual ::grpc::Status GetSparse(::grpc::ServerContext* context, const ::GetSparseRequest* request, ::grpc::ServerWriter< ::GetSparseResponse>* writer);
    virtual ::grpc::Status NewReconstruction(::grpc::ServerContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response);
    virtual ::grpc::Status DeleteReconstruction(::grpc::ServerContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response);
    virtual ::grpc::Status StartSession(::grpc::ServerContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response);
    virtual ::grpc::Status StopSession(::grpc::ServerContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response);
    virtual ::grpc::Status SessionUploadImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::SessionUploadImageRequest>* reader, ::SessionUploadImageResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Handshake() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandshake(::grpc::ServerContext* context, ::HandhsakeRequest* request, ::grpc::ServerAsyncResponseWriter< ::HandshakeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadImage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::UploadImageRequest>* /*reader*/, ::ImageUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::ImageUploadResponse, ::UploadImageRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reconstruct() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Reconstruct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reconstruct(::grpc::ServerContext* /*context*/, const ::ReconstructRequest* /*request*/, ::ReconstructResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconstruct(::grpc::ServerContext* context, ::ReconstructRequest* request, ::grpc::ServerAsyncResponseWriter< ::ReconstructResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOBJ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOBJ() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetOBJ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOBJ(::grpc::ServerContext* /*context*/, const ::GetOBJRequest* /*request*/, ::grpc::ServerWriter< ::GetOBJResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOBJ(::grpc::ServerContext* context, ::GetOBJRequest* request, ::grpc::ServerAsyncWriter< ::GetOBJResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSparse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSparse() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetSparse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSparse(::grpc::ServerContext* /*context*/, const ::GetSparseRequest* /*request*/, ::grpc::ServerWriter< ::GetSparseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSparse(::grpc::ServerContext* context, ::GetSparseRequest* request, ::grpc::ServerAsyncWriter< ::GetSparseResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewReconstruction() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_NewReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReconstruction(::grpc::ServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewReconstruction(::grpc::ServerContext* context, ::NewReconstructionRequest* request, ::grpc::ServerAsyncResponseWriter< ::NewReconstructionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteReconstruction() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReconstruction(::grpc::ServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteReconstruction(::grpc::ServerContext* context, ::DeleteReconstructionRequest* request, ::grpc::ServerAsyncResponseWriter< ::DeleteReconstructionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartSession() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartSession(::grpc::ServerContext* context, ::StartSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::StartSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopSession() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_StopSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopSession(::grpc::ServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopSession(::grpc::ServerContext* context, ::StopSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::StopSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SessionUploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SessionUploadImage() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SessionUploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionUploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SessionUploadImageRequest>* /*reader*/, ::SessionUploadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionUploadImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::SessionUploadImageResponse, ::SessionUploadImageRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(9, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Handshake<WithAsyncMethod_UploadImage<WithAsyncMethod_Reconstruct<WithAsyncMethod_GetOBJ<WithAsyncMethod_GetSparse<WithAsyncMethod_NewReconstruction<WithAsyncMethod_DeleteReconstruction<WithAsyncMethod_StartSession<WithAsyncMethod_StopSession<WithAsyncMethod_SessionUploadImage<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Handshake() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::HandhsakeRequest, ::HandshakeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::HandhsakeRequest* request, ::HandshakeResponse* response) { return this->Handshake(context, request, response); }));}
    void SetMessageAllocatorFor_Handshake(
        ::grpc::experimental::MessageAllocator< ::HandhsakeRequest, ::HandshakeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::HandhsakeRequest, ::HandshakeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Handshake(
      ::grpc::CallbackServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Handshake(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UploadImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::UploadImageRequest, ::ImageUploadResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::ImageUploadResponse* response) { return this->UploadImage(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::UploadImageRequest>* /*reader*/, ::ImageUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::UploadImageRequest>* UploadImage(
      ::grpc::CallbackServerContext* /*context*/, ::ImageUploadResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::UploadImageRequest>* UploadImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::ImageUploadResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Reconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Reconstruct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ReconstructRequest, ::ReconstructResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ReconstructRequest* request, ::ReconstructResponse* response) { return this->Reconstruct(context, request, response); }));}
    void SetMessageAllocatorFor_Reconstruct(
        ::grpc::experimental::MessageAllocator< ::ReconstructRequest, ::ReconstructResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ReconstructRequest, ::ReconstructResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Reconstruct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reconstruct(::grpc::ServerContext* /*context*/, const ::ReconstructRequest* /*request*/, ::ReconstructResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reconstruct(
      ::grpc::CallbackServerContext* /*context*/, const ::ReconstructRequest* /*request*/, ::ReconstructResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reconstruct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ReconstructRequest* /*request*/, ::ReconstructResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOBJ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOBJ() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::GetOBJRequest, ::GetOBJResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GetOBJRequest* request) { return this->GetOBJ(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetOBJ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOBJ(::grpc::ServerContext* /*context*/, const ::GetOBJRequest* /*request*/, ::grpc::ServerWriter< ::GetOBJResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::GetOBJResponse>* GetOBJ(
      ::grpc::CallbackServerContext* /*context*/, const ::GetOBJRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::GetOBJResponse>* GetOBJ(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GetOBJRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSparse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSparse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::GetSparseRequest, ::GetSparseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GetSparseRequest* request) { return this->GetSparse(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetSparse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSparse(::grpc::ServerContext* /*context*/, const ::GetSparseRequest* /*request*/, ::grpc::ServerWriter< ::GetSparseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::GetSparseResponse>* GetSparse(
      ::grpc::CallbackServerContext* /*context*/, const ::GetSparseRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::GetSparseResponse>* GetSparse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GetSparseRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NewReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NewReconstruction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::NewReconstructionRequest, ::NewReconstructionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response) { return this->NewReconstruction(context, request, response); }));}
    void SetMessageAllocatorFor_NewReconstruction(
        ::grpc::experimental::MessageAllocator< ::NewReconstructionRequest, ::NewReconstructionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::NewReconstructionRequest, ::NewReconstructionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NewReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReconstruction(::grpc::ServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NewReconstruction(
      ::grpc::CallbackServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NewReconstruction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteReconstruction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::DeleteReconstructionRequest, ::DeleteReconstructionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response) { return this->DeleteReconstruction(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteReconstruction(
        ::grpc::experimental::MessageAllocator< ::DeleteReconstructionRequest, ::DeleteReconstructionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::DeleteReconstructionRequest, ::DeleteReconstructionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReconstruction(::grpc::ServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteReconstruction(
      ::grpc::CallbackServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteReconstruction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::StartSessionRequest, ::StartSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::StartSessionRequest* request, ::StartSessionResponse* response) { return this->StartSession(context, request, response); }));}
    void SetMessageAllocatorFor_StartSession(
        ::grpc::experimental::MessageAllocator< ::StartSessionRequest, ::StartSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::StartSessionRequest, ::StartSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartSession(
      ::grpc::CallbackServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::StopSessionRequest, ::StopSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::StopSessionRequest* request, ::StopSessionResponse* response) { return this->StopSession(context, request, response); }));}
    void SetMessageAllocatorFor_StopSession(
        ::grpc::experimental::MessageAllocator< ::StopSessionRequest, ::StopSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::StopSessionRequest, ::StopSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopSession(::grpc::ServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopSession(
      ::grpc::CallbackServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SessionUploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SessionUploadImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::SessionUploadImageRequest, ::SessionUploadImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::SessionUploadImageResponse* response) { return this->SessionUploadImage(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_SessionUploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionUploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SessionUploadImageRequest>* /*reader*/, ::SessionUploadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::SessionUploadImageRequest>* SessionUploadImage(
      ::grpc::CallbackServerContext* /*context*/, ::SessionUploadImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::SessionUploadImageRequest>* SessionUploadImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::SessionUploadImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Handshake<ExperimentalWithCallbackMethod_UploadImage<ExperimentalWithCallbackMethod_Reconstruct<ExperimentalWithCallbackMethod_GetOBJ<ExperimentalWithCallbackMethod_GetSparse<ExperimentalWithCallbackMethod_NewReconstruction<ExperimentalWithCallbackMethod_DeleteReconstruction<ExperimentalWithCallbackMethod_StartSession<ExperimentalWithCallbackMethod_StopSession<ExperimentalWithCallbackMethod_SessionUploadImage<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Handshake<ExperimentalWithCallbackMethod_UploadImage<ExperimentalWithCallbackMethod_Reconstruct<ExperimentalWithCallbackMethod_GetOBJ<ExperimentalWithCallbackMethod_GetSparse<ExperimentalWithCallbackMethod_NewReconstruction<ExperimentalWithCallbackMethod_DeleteReconstruction<ExperimentalWithCallbackMethod_StartSession<ExperimentalWithCallbackMethod_StopSession<ExperimentalWithCallbackMethod_SessionUploadImage<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Handshake() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadImage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::UploadImageRequest>* /*reader*/, ::ImageUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reconstruct() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Reconstruct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reconstruct(::grpc::ServerContext* /*context*/, const ::ReconstructRequest* /*request*/, ::ReconstructResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOBJ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOBJ() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetOBJ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOBJ(::grpc::ServerContext* /*context*/, const ::GetOBJRequest* /*request*/, ::grpc::ServerWriter< ::GetOBJResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSparse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSparse() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetSparse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSparse(::grpc::ServerContext* /*context*/, const ::GetSparseRequest* /*request*/, ::grpc::ServerWriter< ::GetSparseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewReconstruction() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_NewReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReconstruction(::grpc::ServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteReconstruction() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReconstruction(::grpc::ServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartSession() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopSession() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_StopSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopSession(::grpc::ServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SessionUploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SessionUploadImage() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SessionUploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionUploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SessionUploadImageRequest>* /*reader*/, ::SessionUploadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Handshake() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandshake(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadImage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::UploadImageRequest>* /*reader*/, ::ImageUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reconstruct() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Reconstruct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reconstruct(::grpc::ServerContext* /*context*/, const ::ReconstructRequest* /*request*/, ::ReconstructResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconstruct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOBJ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOBJ() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetOBJ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOBJ(::grpc::ServerContext* /*context*/, const ::GetOBJRequest* /*request*/, ::grpc::ServerWriter< ::GetOBJResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOBJ(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSparse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSparse() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetSparse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSparse(::grpc::ServerContext* /*context*/, const ::GetSparseRequest* /*request*/, ::grpc::ServerWriter< ::GetSparseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSparse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewReconstruction() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_NewReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReconstruction(::grpc::ServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewReconstruction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteReconstruction() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReconstruction(::grpc::ServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteReconstruction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartSession() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopSession() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_StopSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopSession(::grpc::ServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SessionUploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SessionUploadImage() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SessionUploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionUploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SessionUploadImageRequest>* /*reader*/, ::SessionUploadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionUploadImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(9, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Handshake() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Handshake(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Handshake(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Handshake(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UploadImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->UploadImage(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::UploadImageRequest>* /*reader*/, ::ImageUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* UploadImage(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* UploadImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Reconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Reconstruct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reconstruct(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Reconstruct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reconstruct(::grpc::ServerContext* /*context*/, const ::ReconstructRequest* /*request*/, ::ReconstructResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reconstruct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reconstruct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOBJ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOBJ() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetOBJ(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOBJ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOBJ(::grpc::ServerContext* /*context*/, const ::GetOBJRequest* /*request*/, ::grpc::ServerWriter< ::GetOBJResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetOBJ(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetOBJ(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSparse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSparse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetSparse(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSparse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSparse(::grpc::ServerContext* /*context*/, const ::GetSparseRequest* /*request*/, ::grpc::ServerWriter< ::GetSparseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetSparse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetSparse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NewReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NewReconstruction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewReconstruction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NewReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReconstruction(::grpc::ServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NewReconstruction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NewReconstruction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteReconstruction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteReconstruction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReconstruction(::grpc::ServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteReconstruction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteReconstruction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopSession(::grpc::ServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SessionUploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SessionUploadImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->SessionUploadImage(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SessionUploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionUploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SessionUploadImageRequest>* /*reader*/, ::SessionUploadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SessionUploadImage(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* SessionUploadImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Handshake() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::HandhsakeRequest, ::HandshakeResponse>(std::bind(&WithStreamedUnaryMethod_Handshake<BaseClass>::StreamedHandshake, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandshake(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HandhsakeRequest,::HandshakeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reconstruct() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ReconstructRequest, ::ReconstructResponse>(std::bind(&WithStreamedUnaryMethod_Reconstruct<BaseClass>::StreamedReconstruct, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Reconstruct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reconstruct(::grpc::ServerContext* /*context*/, const ::ReconstructRequest* /*request*/, ::ReconstructResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReconstruct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ReconstructRequest,::ReconstructResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewReconstruction() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::NewReconstructionRequest, ::NewReconstructionResponse>(std::bind(&WithStreamedUnaryMethod_NewReconstruction<BaseClass>::StreamedNewReconstruction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewReconstruction(::grpc::ServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewReconstruction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NewReconstructionRequest,::NewReconstructionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteReconstruction() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::DeleteReconstructionRequest, ::DeleteReconstructionResponse>(std::bind(&WithStreamedUnaryMethod_DeleteReconstruction<BaseClass>::StreamedDeleteReconstruction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteReconstruction(::grpc::ServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteReconstruction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DeleteReconstructionRequest,::DeleteReconstructionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartSession() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::StartSessionRequest, ::StartSessionResponse>(std::bind(&WithStreamedUnaryMethod_StartSession<BaseClass>::StreamedStartSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StartSessionRequest,::StartSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopSession() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::StopSessionRequest, ::StopSessionResponse>(std::bind(&WithStreamedUnaryMethod_StopSession<BaseClass>::StreamedStopSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopSession(::grpc::ServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StopSessionRequest,::StopSessionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Handshake<WithStreamedUnaryMethod_Reconstruct<WithStreamedUnaryMethod_NewReconstruction<WithStreamedUnaryMethod_DeleteReconstruction<WithStreamedUnaryMethod_StartSession<WithStreamedUnaryMethod_StopSession<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetOBJ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetOBJ() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::GetOBJRequest, ::GetOBJResponse>(std::bind(&WithSplitStreamingMethod_GetOBJ<BaseClass>::StreamedGetOBJ, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetOBJ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOBJ(::grpc::ServerContext* /*context*/, const ::GetOBJRequest* /*request*/, ::grpc::ServerWriter< ::GetOBJResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetOBJ(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GetOBJRequest,::GetOBJResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetSparse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetSparse() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::GetSparseRequest, ::GetSparseResponse>(std::bind(&WithSplitStreamingMethod_GetSparse<BaseClass>::StreamedGetSparse, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetSparse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSparse(::grpc::ServerContext* /*context*/, const ::GetSparseRequest* /*request*/, ::grpc::ServerWriter< ::GetSparseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetSparse(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GetSparseRequest,::GetSparseResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetOBJ<WithSplitStreamingMethod_GetSparse<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Handshake<WithStreamedUnaryMethod_Reconstruct<WithSplitStreamingMethod_GetOBJ<WithSplitStreamingMethod_GetSparse<WithStreamedUnaryMethod_NewReconstruction<WithStreamedUnaryMethod_DeleteReconstruction<WithStreamedUnaryMethod_StartSession<WithStreamedUnaryMethod_StopSession<Service > > > > > > > > StreamedService;
};


#endif  // GRPC_server_2eproto__INCLUDED
