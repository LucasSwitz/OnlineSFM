// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto
#ifndef GRPC_server_2eproto__INCLUDED
#define GRPC_server_2eproto__INCLUDED

#include "server.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class ReconstructionService final {
 public:
  static constexpr char const* service_full_name() {
    return "ReconstructionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::HandshakeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandshakeResponse>> AsyncHandshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandshakeResponse>>(AsyncHandshakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandshakeResponse>> PrepareAsyncHandshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandshakeResponse>>(PrepareAsyncHandshakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::StoreImageRequest>> StoreImage(::grpc::ClientContext* context, ::StoreImageResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::StoreImageRequest>>(StoreImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::StoreImageRequest>> AsyncStoreImage(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::StoreImageRequest>>(AsyncStoreImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::StoreImageRequest>> PrepareAsyncStoreImage(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::StoreImageRequest>>(PrepareAsyncStoreImageRaw(context, response, cq));
    }
    virtual ::grpc::Status SparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::SparseReconstructResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SparseReconstructResponse>> AsyncSparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SparseReconstructResponse>>(AsyncSparseReconstructRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SparseReconstructResponse>> PrepareAsyncSparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SparseReconstructResponse>>(PrepareAsyncSparseReconstructRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::GetOBJResponse>> GetOBJ(::grpc::ClientContext* context, const ::GetOBJRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::GetOBJResponse>>(GetOBJRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetOBJResponse>> AsyncGetOBJ(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetOBJResponse>>(AsyncGetOBJRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetOBJResponse>> PrepareAsyncGetOBJ(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetOBJResponse>>(PrepareAsyncGetOBJRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::GetSparseResponse>> GetSparse(::grpc::ClientContext* context, const ::GetSparseRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::GetSparseResponse>>(GetSparseRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetSparseResponse>> AsyncGetSparse(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetSparseResponse>>(AsyncGetSparseRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetSparseResponse>> PrepareAsyncGetSparse(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GetSparseResponse>>(PrepareAsyncGetSparseRaw(context, request, cq));
    }
    virtual ::grpc::Status NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::NewReconstructionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewReconstructionResponse>> AsyncNewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewReconstructionResponse>>(AsyncNewReconstructionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewReconstructionResponse>> PrepareAsyncNewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewReconstructionResponse>>(PrepareAsyncNewReconstructionRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::DeleteReconstructionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReconstructionResponse>> AsyncDeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReconstructionResponse>>(AsyncDeleteReconstructionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReconstructionResponse>> PrepareAsyncDeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReconstructionResponse>>(PrepareAsyncDeleteReconstructionRaw(context, request, cq));
    }
    virtual ::grpc::Status StartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::StartSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResponse>> AsyncStartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResponse>>(AsyncStartSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResponse>> PrepareAsyncStartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResponse>>(PrepareAsyncStartSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status StopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::StopSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StopSessionResponse>> AsyncStopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StopSessionResponse>>(AsyncStopSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StopSessionResponse>> PrepareAsyncStopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StopSessionResponse>>(PrepareAsyncStopSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::SessionAddImageRequest>> SessionAddImage(::grpc::ClientContext* context, ::SessionAddImageResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::SessionAddImageRequest>>(SessionAddImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::SessionAddImageRequest>> AsyncSessionAddImage(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::SessionAddImageRequest>>(AsyncSessionAddImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::SessionAddImageRequest>> PrepareAsyncSessionAddImage(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::SessionAddImageRequest>>(PrepareAsyncSessionAddImageRaw(context, response, cq));
    }
    virtual ::grpc::Status SetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::SetReconstructionConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetReconstructionConfigResponse>> AsyncSetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetReconstructionConfigResponse>>(AsyncSetReconstructionConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetReconstructionConfigResponse>> PrepareAsyncSetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetReconstructionConfigResponse>>(PrepareAsyncSetReconstructionConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status GetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::GetReconstructionConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetReconstructionConfigResponse>> AsyncGetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetReconstructionConfigResponse>>(AsyncGetReconstructionConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetReconstructionConfigResponse>> PrepareAsyncGetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetReconstructionConfigResponse>>(PrepareAsyncGetReconstructionConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::ReconstructionUploadImageBatchRequest>> ReconstructionUploadImageBatch(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::ReconstructionUploadImageBatchRequest>>(ReconstructionUploadImageBatchRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ReconstructionUploadImageBatchRequest>> AsyncReconstructionUploadImageBatch(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ReconstructionUploadImageBatchRequest>>(AsyncReconstructionUploadImageBatchRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ReconstructionUploadImageBatchRequest>> PrepareAsyncReconstructionUploadImageBatch(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ReconstructionUploadImageBatchRequest>>(PrepareAsyncReconstructionUploadImageBatchRaw(context, response, cq));
    }
    virtual ::grpc::Status MVS(::grpc::ClientContext* context, const ::MVSRequest& request, ::MVSResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MVSResponse>> AsyncMVS(::grpc::ClientContext* context, const ::MVSRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MVSResponse>>(AsyncMVSRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MVSResponse>> PrepareAsyncMVS(::grpc::ClientContext* context, const ::MVSRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MVSResponse>>(PrepareAsyncMVSRaw(context, request, cq));
    }
    virtual ::grpc::Status SetAgentConfigFields(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest& request, ::SetAgentConfigFieldsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetAgentConfigFieldsResponse>> AsyncSetAgentConfigFields(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetAgentConfigFieldsResponse>>(AsyncSetAgentConfigFieldsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetAgentConfigFieldsResponse>> PrepareAsyncSetAgentConfigFields(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetAgentConfigFieldsResponse>>(PrepareAsyncSetAgentConfigFieldsRaw(context, request, cq));
    }
    virtual ::grpc::Status SetReconstructionConfigFields(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest& request, ::SetReconstructionConfigFieldsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetReconstructionConfigFieldsResponse>> AsyncSetReconstructionConfigFields(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetReconstructionConfigFieldsResponse>>(AsyncSetReconstructionConfigFieldsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetReconstructionConfigFieldsResponse>> PrepareAsyncSetReconstructionConfigFields(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetReconstructionConfigFieldsResponse>>(PrepareAsyncSetReconstructionConfigFieldsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StoreImage(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::ClientWriteReactor< ::StoreImageRequest>* reactor) = 0;
      #else
      virtual void StoreImage(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::experimental::ClientWriteReactor< ::StoreImageRequest>* reactor) = 0;
      #endif
      virtual void SparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest* request, ::SparseReconstructResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SparseReconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SparseReconstructResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest* request, ::SparseReconstructResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest* request, ::SparseReconstructResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SparseReconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SparseReconstructResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SparseReconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SparseReconstructResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOBJ(::grpc::ClientContext* context, ::GetOBJRequest* request, ::grpc::ClientReadReactor< ::GetOBJResponse>* reactor) = 0;
      #else
      virtual void GetOBJ(::grpc::ClientContext* context, ::GetOBJRequest* request, ::grpc::experimental::ClientReadReactor< ::GetOBJResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSparse(::grpc::ClientContext* context, ::GetSparseRequest* request, ::grpc::ClientReadReactor< ::GetSparseResponse>* reactor) = 0;
      #else
      virtual void GetSparse(::grpc::ClientContext* context, ::GetSparseRequest* request, ::grpc::experimental::ClientReadReactor< ::GetSparseResponse>* reactor) = 0;
      #endif
      virtual void NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SessionAddImage(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::ClientWriteReactor< ::SessionAddImageRequest>* reactor) = 0;
      #else
      virtual void SessionAddImage(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::experimental::ClientWriteReactor< ::SessionAddImageRequest>* reactor) = 0;
      #endif
      virtual void SetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest* request, ::SetReconstructionConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest* request, ::SetReconstructionConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest* request, ::SetReconstructionConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest* request, ::GetReconstructionConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetReconstructionConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest* request, ::GetReconstructionConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest* request, ::GetReconstructionConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetReconstructionConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetReconstructionConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReconstructionUploadImageBatch(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::ClientWriteReactor< ::ReconstructionUploadImageBatchRequest>* reactor) = 0;
      #else
      virtual void ReconstructionUploadImageBatch(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::experimental::ClientWriteReactor< ::ReconstructionUploadImageBatchRequest>* reactor) = 0;
      #endif
      virtual void MVS(::grpc::ClientContext* context, const ::MVSRequest* request, ::MVSResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MVS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MVSResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MVS(::grpc::ClientContext* context, const ::MVSRequest* request, ::MVSResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MVS(::grpc::ClientContext* context, const ::MVSRequest* request, ::MVSResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MVS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MVSResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MVS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MVSResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetAgentConfigFields(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest* request, ::SetAgentConfigFieldsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAgentConfigFields(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetAgentConfigFieldsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetAgentConfigFields(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest* request, ::SetAgentConfigFieldsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetAgentConfigFields(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest* request, ::SetAgentConfigFieldsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetAgentConfigFields(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetAgentConfigFieldsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetAgentConfigFields(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetAgentConfigFieldsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetReconstructionConfigFields(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest* request, ::SetReconstructionConfigFieldsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetReconstructionConfigFields(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigFieldsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetReconstructionConfigFields(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest* request, ::SetReconstructionConfigFieldsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetReconstructionConfigFields(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest* request, ::SetReconstructionConfigFieldsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetReconstructionConfigFields(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigFieldsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetReconstructionConfigFields(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigFieldsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HandshakeResponse>* AsyncHandshakeRaw(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HandshakeResponse>* PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::StoreImageRequest>* StoreImageRaw(::grpc::ClientContext* context, ::StoreImageResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::StoreImageRequest>* AsyncStoreImageRaw(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::StoreImageRequest>* PrepareAsyncStoreImageRaw(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SparseReconstructResponse>* AsyncSparseReconstructRaw(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SparseReconstructResponse>* PrepareAsyncSparseReconstructRaw(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::GetOBJResponse>* GetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GetOBJResponse>* AsyncGetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GetOBJResponse>* PrepareAsyncGetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::GetSparseResponse>* GetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GetSparseResponse>* AsyncGetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GetSparseResponse>* PrepareAsyncGetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NewReconstructionResponse>* AsyncNewReconstructionRaw(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NewReconstructionResponse>* PrepareAsyncNewReconstructionRaw(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReconstructionResponse>* AsyncDeleteReconstructionRaw(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReconstructionResponse>* PrepareAsyncDeleteReconstructionRaw(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResponse>* AsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResponse>* PrepareAsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StopSessionResponse>* AsyncStopSessionRaw(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StopSessionResponse>* PrepareAsyncStopSessionRaw(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::SessionAddImageRequest>* SessionAddImageRaw(::grpc::ClientContext* context, ::SessionAddImageResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::SessionAddImageRequest>* AsyncSessionAddImageRaw(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::SessionAddImageRequest>* PrepareAsyncSessionAddImageRaw(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetReconstructionConfigResponse>* AsyncSetReconstructionConfigRaw(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetReconstructionConfigResponse>* PrepareAsyncSetReconstructionConfigRaw(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetReconstructionConfigResponse>* AsyncGetReconstructionConfigRaw(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetReconstructionConfigResponse>* PrepareAsyncGetReconstructionConfigRaw(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::ReconstructionUploadImageBatchRequest>* ReconstructionUploadImageBatchRaw(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ReconstructionUploadImageBatchRequest>* AsyncReconstructionUploadImageBatchRaw(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ReconstructionUploadImageBatchRequest>* PrepareAsyncReconstructionUploadImageBatchRaw(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MVSResponse>* AsyncMVSRaw(::grpc::ClientContext* context, const ::MVSRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MVSResponse>* PrepareAsyncMVSRaw(::grpc::ClientContext* context, const ::MVSRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetAgentConfigFieldsResponse>* AsyncSetAgentConfigFieldsRaw(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetAgentConfigFieldsResponse>* PrepareAsyncSetAgentConfigFieldsRaw(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetReconstructionConfigFieldsResponse>* AsyncSetReconstructionConfigFieldsRaw(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetReconstructionConfigFieldsResponse>* PrepareAsyncSetReconstructionConfigFieldsRaw(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::HandshakeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandshakeResponse>> AsyncHandshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandshakeResponse>>(AsyncHandshakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandshakeResponse>> PrepareAsyncHandshake(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandshakeResponse>>(PrepareAsyncHandshakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::StoreImageRequest>> StoreImage(::grpc::ClientContext* context, ::StoreImageResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::StoreImageRequest>>(StoreImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::StoreImageRequest>> AsyncStoreImage(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::StoreImageRequest>>(AsyncStoreImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::StoreImageRequest>> PrepareAsyncStoreImage(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::StoreImageRequest>>(PrepareAsyncStoreImageRaw(context, response, cq));
    }
    ::grpc::Status SparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::SparseReconstructResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SparseReconstructResponse>> AsyncSparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SparseReconstructResponse>>(AsyncSparseReconstructRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SparseReconstructResponse>> PrepareAsyncSparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SparseReconstructResponse>>(PrepareAsyncSparseReconstructRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::GetOBJResponse>> GetOBJ(::grpc::ClientContext* context, const ::GetOBJRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::GetOBJResponse>>(GetOBJRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GetOBJResponse>> AsyncGetOBJ(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GetOBJResponse>>(AsyncGetOBJRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GetOBJResponse>> PrepareAsyncGetOBJ(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GetOBJResponse>>(PrepareAsyncGetOBJRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::GetSparseResponse>> GetSparse(::grpc::ClientContext* context, const ::GetSparseRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::GetSparseResponse>>(GetSparseRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GetSparseResponse>> AsyncGetSparse(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GetSparseResponse>>(AsyncGetSparseRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GetSparseResponse>> PrepareAsyncGetSparse(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GetSparseResponse>>(PrepareAsyncGetSparseRaw(context, request, cq));
    }
    ::grpc::Status NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::NewReconstructionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>> AsyncNewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>>(AsyncNewReconstructionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>> PrepareAsyncNewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>>(PrepareAsyncNewReconstructionRaw(context, request, cq));
    }
    ::grpc::Status DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::DeleteReconstructionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>> AsyncDeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>>(AsyncDeleteReconstructionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>> PrepareAsyncDeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>>(PrepareAsyncDeleteReconstructionRaw(context, request, cq));
    }
    ::grpc::Status StartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::StartSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartSessionResponse>> AsyncStartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartSessionResponse>>(AsyncStartSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartSessionResponse>> PrepareAsyncStartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartSessionResponse>>(PrepareAsyncStartSessionRaw(context, request, cq));
    }
    ::grpc::Status StopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::StopSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StopSessionResponse>> AsyncStopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StopSessionResponse>>(AsyncStopSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StopSessionResponse>> PrepareAsyncStopSession(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StopSessionResponse>>(PrepareAsyncStopSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::SessionAddImageRequest>> SessionAddImage(::grpc::ClientContext* context, ::SessionAddImageResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::SessionAddImageRequest>>(SessionAddImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::SessionAddImageRequest>> AsyncSessionAddImage(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::SessionAddImageRequest>>(AsyncSessionAddImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::SessionAddImageRequest>> PrepareAsyncSessionAddImage(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::SessionAddImageRequest>>(PrepareAsyncSessionAddImageRaw(context, response, cq));
    }
    ::grpc::Status SetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::SetReconstructionConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigResponse>> AsyncSetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigResponse>>(AsyncSetReconstructionConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigResponse>> PrepareAsyncSetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigResponse>>(PrepareAsyncSetReconstructionConfigRaw(context, request, cq));
    }
    ::grpc::Status GetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::GetReconstructionConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetReconstructionConfigResponse>> AsyncGetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetReconstructionConfigResponse>>(AsyncGetReconstructionConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetReconstructionConfigResponse>> PrepareAsyncGetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetReconstructionConfigResponse>>(PrepareAsyncGetReconstructionConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::ReconstructionUploadImageBatchRequest>> ReconstructionUploadImageBatch(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::ReconstructionUploadImageBatchRequest>>(ReconstructionUploadImageBatchRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ReconstructionUploadImageBatchRequest>> AsyncReconstructionUploadImageBatch(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ReconstructionUploadImageBatchRequest>>(AsyncReconstructionUploadImageBatchRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ReconstructionUploadImageBatchRequest>> PrepareAsyncReconstructionUploadImageBatch(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ReconstructionUploadImageBatchRequest>>(PrepareAsyncReconstructionUploadImageBatchRaw(context, response, cq));
    }
    ::grpc::Status MVS(::grpc::ClientContext* context, const ::MVSRequest& request, ::MVSResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MVSResponse>> AsyncMVS(::grpc::ClientContext* context, const ::MVSRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MVSResponse>>(AsyncMVSRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MVSResponse>> PrepareAsyncMVS(::grpc::ClientContext* context, const ::MVSRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MVSResponse>>(PrepareAsyncMVSRaw(context, request, cq));
    }
    ::grpc::Status SetAgentConfigFields(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest& request, ::SetAgentConfigFieldsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetAgentConfigFieldsResponse>> AsyncSetAgentConfigFields(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetAgentConfigFieldsResponse>>(AsyncSetAgentConfigFieldsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetAgentConfigFieldsResponse>> PrepareAsyncSetAgentConfigFields(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetAgentConfigFieldsResponse>>(PrepareAsyncSetAgentConfigFieldsRaw(context, request, cq));
    }
    ::grpc::Status SetReconstructionConfigFields(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest& request, ::SetReconstructionConfigFieldsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigFieldsResponse>> AsyncSetReconstructionConfigFields(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigFieldsResponse>>(AsyncSetReconstructionConfigFieldsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigFieldsResponse>> PrepareAsyncSetReconstructionConfigFields(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigFieldsResponse>>(PrepareAsyncSetReconstructionConfigFieldsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, std::function<void(::grpc::Status)>) override;
      void Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Handshake(::grpc::ClientContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Handshake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HandshakeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StoreImage(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::ClientWriteReactor< ::StoreImageRequest>* reactor) override;
      #else
      void StoreImage(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::experimental::ClientWriteReactor< ::StoreImageRequest>* reactor) override;
      #endif
      void SparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest* request, ::SparseReconstructResponse* response, std::function<void(::grpc::Status)>) override;
      void SparseReconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SparseReconstructResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest* request, ::SparseReconstructResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SparseReconstruct(::grpc::ClientContext* context, const ::SparseReconstructRequest* request, ::SparseReconstructResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SparseReconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SparseReconstructResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SparseReconstruct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SparseReconstructResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOBJ(::grpc::ClientContext* context, ::GetOBJRequest* request, ::grpc::ClientReadReactor< ::GetOBJResponse>* reactor) override;
      #else
      void GetOBJ(::grpc::ClientContext* context, ::GetOBJRequest* request, ::grpc::experimental::ClientReadReactor< ::GetOBJResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSparse(::grpc::ClientContext* context, ::GetSparseRequest* request, ::grpc::ClientReadReactor< ::GetSparseResponse>* reactor) override;
      #else
      void GetSparse(::grpc::ClientContext* context, ::GetSparseRequest* request, ::grpc::experimental::ClientReadReactor< ::GetSparseResponse>* reactor) override;
      #endif
      void NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, std::function<void(::grpc::Status)>) override;
      void NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NewReconstruction(::grpc::ClientContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NewReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NewReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteReconstruction(::grpc::ClientContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteReconstruction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteReconstructionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopSession(::grpc::ClientContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SessionAddImage(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::ClientWriteReactor< ::SessionAddImageRequest>* reactor) override;
      #else
      void SessionAddImage(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::experimental::ClientWriteReactor< ::SessionAddImageRequest>* reactor) override;
      #endif
      void SetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest* request, ::SetReconstructionConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void SetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest* request, ::SetReconstructionConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetReconstructionConfig(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest* request, ::SetReconstructionConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest* request, ::GetReconstructionConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void GetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetReconstructionConfigResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest* request, ::GetReconstructionConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetReconstructionConfig(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest* request, ::GetReconstructionConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetReconstructionConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetReconstructionConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetReconstructionConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReconstructionUploadImageBatch(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::ClientWriteReactor< ::ReconstructionUploadImageBatchRequest>* reactor) override;
      #else
      void ReconstructionUploadImageBatch(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::experimental::ClientWriteReactor< ::ReconstructionUploadImageBatchRequest>* reactor) override;
      #endif
      void MVS(::grpc::ClientContext* context, const ::MVSRequest* request, ::MVSResponse* response, std::function<void(::grpc::Status)>) override;
      void MVS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MVSResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MVS(::grpc::ClientContext* context, const ::MVSRequest* request, ::MVSResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MVS(::grpc::ClientContext* context, const ::MVSRequest* request, ::MVSResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MVS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MVSResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MVS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MVSResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetAgentConfigFields(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest* request, ::SetAgentConfigFieldsResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAgentConfigFields(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetAgentConfigFieldsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetAgentConfigFields(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest* request, ::SetAgentConfigFieldsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetAgentConfigFields(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest* request, ::SetAgentConfigFieldsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetAgentConfigFields(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetAgentConfigFieldsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetAgentConfigFields(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetAgentConfigFieldsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetReconstructionConfigFields(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest* request, ::SetReconstructionConfigFieldsResponse* response, std::function<void(::grpc::Status)>) override;
      void SetReconstructionConfigFields(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigFieldsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetReconstructionConfigFields(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest* request, ::SetReconstructionConfigFieldsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetReconstructionConfigFields(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest* request, ::SetReconstructionConfigFieldsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetReconstructionConfigFields(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigFieldsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetReconstructionConfigFields(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SetReconstructionConfigFieldsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::HandshakeResponse>* AsyncHandshakeRaw(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HandshakeResponse>* PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, const ::HandhsakeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::StoreImageRequest>* StoreImageRaw(::grpc::ClientContext* context, ::StoreImageResponse* response) override;
    ::grpc::ClientAsyncWriter< ::StoreImageRequest>* AsyncStoreImageRaw(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::StoreImageRequest>* PrepareAsyncStoreImageRaw(::grpc::ClientContext* context, ::StoreImageResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SparseReconstructResponse>* AsyncSparseReconstructRaw(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SparseReconstructResponse>* PrepareAsyncSparseReconstructRaw(::grpc::ClientContext* context, const ::SparseReconstructRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::GetOBJResponse>* GetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request) override;
    ::grpc::ClientAsyncReader< ::GetOBJResponse>* AsyncGetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::GetOBJResponse>* PrepareAsyncGetOBJRaw(::grpc::ClientContext* context, const ::GetOBJRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::GetSparseResponse>* GetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request) override;
    ::grpc::ClientAsyncReader< ::GetSparseResponse>* AsyncGetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::GetSparseResponse>* PrepareAsyncGetSparseRaw(::grpc::ClientContext* context, const ::GetSparseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>* AsyncNewReconstructionRaw(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NewReconstructionResponse>* PrepareAsyncNewReconstructionRaw(::grpc::ClientContext* context, const ::NewReconstructionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>* AsyncDeleteReconstructionRaw(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteReconstructionResponse>* PrepareAsyncDeleteReconstructionRaw(::grpc::ClientContext* context, const ::DeleteReconstructionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StartSessionResponse>* AsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StartSessionResponse>* PrepareAsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StopSessionResponse>* AsyncStopSessionRaw(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StopSessionResponse>* PrepareAsyncStopSessionRaw(::grpc::ClientContext* context, const ::StopSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::SessionAddImageRequest>* SessionAddImageRaw(::grpc::ClientContext* context, ::SessionAddImageResponse* response) override;
    ::grpc::ClientAsyncWriter< ::SessionAddImageRequest>* AsyncSessionAddImageRaw(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::SessionAddImageRequest>* PrepareAsyncSessionAddImageRaw(::grpc::ClientContext* context, ::SessionAddImageResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigResponse>* AsyncSetReconstructionConfigRaw(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigResponse>* PrepareAsyncSetReconstructionConfigRaw(::grpc::ClientContext* context, const ::SetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetReconstructionConfigResponse>* AsyncGetReconstructionConfigRaw(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetReconstructionConfigResponse>* PrepareAsyncGetReconstructionConfigRaw(::grpc::ClientContext* context, const ::GetReconstructionConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::ReconstructionUploadImageBatchRequest>* ReconstructionUploadImageBatchRaw(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response) override;
    ::grpc::ClientAsyncWriter< ::ReconstructionUploadImageBatchRequest>* AsyncReconstructionUploadImageBatchRaw(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::ReconstructionUploadImageBatchRequest>* PrepareAsyncReconstructionUploadImageBatchRaw(::grpc::ClientContext* context, ::ReconstructionUploadImageBatchResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MVSResponse>* AsyncMVSRaw(::grpc::ClientContext* context, const ::MVSRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MVSResponse>* PrepareAsyncMVSRaw(::grpc::ClientContext* context, const ::MVSRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetAgentConfigFieldsResponse>* AsyncSetAgentConfigFieldsRaw(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetAgentConfigFieldsResponse>* PrepareAsyncSetAgentConfigFieldsRaw(::grpc::ClientContext* context, const ::SetAgentConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigFieldsResponse>* AsyncSetReconstructionConfigFieldsRaw(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetReconstructionConfigFieldsResponse>* PrepareAsyncSetReconstructionConfigFieldsRaw(::grpc::ClientContext* context, const ::SetReconstructionConfigFieldsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Handshake_;
    const ::grpc::internal::RpcMethod rpcmethod_StoreImage_;
    const ::grpc::internal::RpcMethod rpcmethod_SparseReconstruct_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOBJ_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSparse_;
    const ::grpc::internal::RpcMethod rpcmethod_NewReconstruction_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteReconstruction_;
    const ::grpc::internal::RpcMethod rpcmethod_StartSession_;
    const ::grpc::internal::RpcMethod rpcmethod_StopSession_;
    const ::grpc::internal::RpcMethod rpcmethod_SessionAddImage_;
    const ::grpc::internal::RpcMethod rpcmethod_SetReconstructionConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_GetReconstructionConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_ReconstructionUploadImageBatch_;
    const ::grpc::internal::RpcMethod rpcmethod_MVS_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAgentConfigFields_;
    const ::grpc::internal::RpcMethod rpcmethod_SetReconstructionConfigFields_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Handshake(::grpc::ServerContext* context, const ::HandhsakeRequest* request, ::HandshakeResponse* response);
    virtual ::grpc::Status StoreImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::StoreImageRequest>* reader, ::StoreImageResponse* response);
    virtual ::grpc::Status SparseReconstruct(::grpc::ServerContext* context, const ::SparseReconstructRequest* request, ::SparseReconstructResponse* response);
    virtual ::grpc::Status GetOBJ(::grpc::ServerContext* context, const ::GetOBJRequest* request, ::grpc::ServerWriter< ::GetOBJResponse>* writer);
    virtual ::grpc::Status GetSparse(::grpc::ServerContext* context, const ::GetSparseRequest* request, ::grpc::ServerWriter< ::GetSparseResponse>* writer);
    virtual ::grpc::Status NewReconstruction(::grpc::ServerContext* context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response);
    virtual ::grpc::Status DeleteReconstruction(::grpc::ServerContext* context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response);
    virtual ::grpc::Status StartSession(::grpc::ServerContext* context, const ::StartSessionRequest* request, ::StartSessionResponse* response);
    virtual ::grpc::Status StopSession(::grpc::ServerContext* context, const ::StopSessionRequest* request, ::StopSessionResponse* response);
    virtual ::grpc::Status SessionAddImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::SessionAddImageRequest>* reader, ::SessionAddImageResponse* response);
    virtual ::grpc::Status SetReconstructionConfig(::grpc::ServerContext* context, const ::SetReconstructionConfigRequest* request, ::SetReconstructionConfigResponse* response);
    virtual ::grpc::Status GetReconstructionConfig(::grpc::ServerContext* context, const ::GetReconstructionConfigRequest* request, ::GetReconstructionConfigResponse* response);
    virtual ::grpc::Status ReconstructionUploadImageBatch(::grpc::ServerContext* context, ::grpc::ServerReader< ::ReconstructionUploadImageBatchRequest>* reader, ::ReconstructionUploadImageBatchResponse* response);
    virtual ::grpc::Status MVS(::grpc::ServerContext* context, const ::MVSRequest* request, ::MVSResponse* response);
    virtual ::grpc::Status SetAgentConfigFields(::grpc::ServerContext* context, const ::SetAgentConfigFieldsRequest* request, ::SetAgentConfigFieldsResponse* response);
    virtual ::grpc::Status SetReconstructionConfigFields(::grpc::ServerContext* context, const ::SetReconstructionConfigFieldsRequest* request, ::SetReconstructionConfigFieldsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Handshake() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandshake(::grpc::ServerContext* context, ::HandhsakeRequest* request, ::grpc::ServerAsyncResponseWriter< ::HandshakeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StoreImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StoreImage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StoreImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StoreImageRequest>* /*reader*/, ::StoreImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::StoreImageResponse, ::StoreImageRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SparseReconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SparseReconstruct() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SparseReconstruct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SparseReconstruct(::grpc::ServerContext* /*context*/, const ::SparseReconstructRequest* /*request*/, ::SparseReconstructResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSparseReconstruct(::grpc::ServerContext* context, ::SparseReconstructRequest* request, ::grpc::ServerAsyncResponseWriter< ::SparseReconstructResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOBJ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOBJ() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetOBJ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOBJ(::grpc::ServerContext* /*context*/, const ::GetOBJRequest* /*request*/, ::grpc::ServerWriter< ::GetOBJResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOBJ(::grpc::ServerContext* context, ::GetOBJRequest* request, ::grpc::ServerAsyncWriter< ::GetOBJResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSparse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSparse() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetSparse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSparse(::grpc::ServerContext* /*context*/, const ::GetSparseRequest* /*request*/, ::grpc::ServerWriter< ::GetSparseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSparse(::grpc::ServerContext* context, ::GetSparseRequest* request, ::grpc::ServerAsyncWriter< ::GetSparseResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewReconstruction() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_NewReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReconstruction(::grpc::ServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewReconstruction(::grpc::ServerContext* context, ::NewReconstructionRequest* request, ::grpc::ServerAsyncResponseWriter< ::NewReconstructionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteReconstruction() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReconstruction(::grpc::ServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteReconstruction(::grpc::ServerContext* context, ::DeleteReconstructionRequest* request, ::grpc::ServerAsyncResponseWriter< ::DeleteReconstructionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartSession() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartSession(::grpc::ServerContext* context, ::StartSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::StartSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopSession() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_StopSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopSession(::grpc::ServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopSession(::grpc::ServerContext* context, ::StopSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::StopSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SessionAddImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SessionAddImage() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SessionAddImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionAddImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SessionAddImageRequest>* /*reader*/, ::SessionAddImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionAddImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::SessionAddImageResponse, ::SessionAddImageRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(9, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetReconstructionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetReconstructionConfig() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SetReconstructionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetReconstructionConfig(::grpc::ServerContext* /*context*/, const ::SetReconstructionConfigRequest* /*request*/, ::SetReconstructionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetReconstructionConfig(::grpc::ServerContext* context, ::SetReconstructionConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::SetReconstructionConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReconstructionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetReconstructionConfig() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetReconstructionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReconstructionConfig(::grpc::ServerContext* /*context*/, const ::GetReconstructionConfigRequest* /*request*/, ::GetReconstructionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReconstructionConfig(::grpc::ServerContext* context, ::GetReconstructionConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetReconstructionConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReconstructionUploadImageBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReconstructionUploadImageBatch() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ReconstructionUploadImageBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconstructionUploadImageBatch(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ReconstructionUploadImageBatchRequest>* /*reader*/, ::ReconstructionUploadImageBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconstructionUploadImageBatch(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::ReconstructionUploadImageBatchResponse, ::ReconstructionUploadImageBatchRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(12, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MVS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MVS() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_MVS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MVS(::grpc::ServerContext* /*context*/, const ::MVSRequest* /*request*/, ::MVSResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMVS(::grpc::ServerContext* context, ::MVSRequest* request, ::grpc::ServerAsyncResponseWriter< ::MVSResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAgentConfigFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAgentConfigFields() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_SetAgentConfigFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfigFields(::grpc::ServerContext* /*context*/, const ::SetAgentConfigFieldsRequest* /*request*/, ::SetAgentConfigFieldsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgentConfigFields(::grpc::ServerContext* context, ::SetAgentConfigFieldsRequest* request, ::grpc::ServerAsyncResponseWriter< ::SetAgentConfigFieldsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetReconstructionConfigFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetReconstructionConfigFields() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_SetReconstructionConfigFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetReconstructionConfigFields(::grpc::ServerContext* /*context*/, const ::SetReconstructionConfigFieldsRequest* /*request*/, ::SetReconstructionConfigFieldsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetReconstructionConfigFields(::grpc::ServerContext* context, ::SetReconstructionConfigFieldsRequest* request, ::grpc::ServerAsyncResponseWriter< ::SetReconstructionConfigFieldsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Handshake<WithAsyncMethod_StoreImage<WithAsyncMethod_SparseReconstruct<WithAsyncMethod_GetOBJ<WithAsyncMethod_GetSparse<WithAsyncMethod_NewReconstruction<WithAsyncMethod_DeleteReconstruction<WithAsyncMethod_StartSession<WithAsyncMethod_StopSession<WithAsyncMethod_SessionAddImage<WithAsyncMethod_SetReconstructionConfig<WithAsyncMethod_GetReconstructionConfig<WithAsyncMethod_ReconstructionUploadImageBatch<WithAsyncMethod_MVS<WithAsyncMethod_SetAgentConfigFields<WithAsyncMethod_SetReconstructionConfigFields<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Handshake() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::HandhsakeRequest, ::HandshakeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::HandhsakeRequest* request, ::HandshakeResponse* response) { return this->Handshake(context, request, response); }));}
    void SetMessageAllocatorFor_Handshake(
        ::grpc::experimental::MessageAllocator< ::HandhsakeRequest, ::HandshakeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::HandhsakeRequest, ::HandshakeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Handshake(
      ::grpc::CallbackServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Handshake(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StoreImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StoreImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::StoreImageRequest, ::StoreImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::StoreImageResponse* response) { return this->StoreImage(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_StoreImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StoreImageRequest>* /*reader*/, ::StoreImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::StoreImageRequest>* StoreImage(
      ::grpc::CallbackServerContext* /*context*/, ::StoreImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::StoreImageRequest>* StoreImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::StoreImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SparseReconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SparseReconstruct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SparseReconstructRequest, ::SparseReconstructResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SparseReconstructRequest* request, ::SparseReconstructResponse* response) { return this->SparseReconstruct(context, request, response); }));}
    void SetMessageAllocatorFor_SparseReconstruct(
        ::grpc::experimental::MessageAllocator< ::SparseReconstructRequest, ::SparseReconstructResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SparseReconstructRequest, ::SparseReconstructResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SparseReconstruct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SparseReconstruct(::grpc::ServerContext* /*context*/, const ::SparseReconstructRequest* /*request*/, ::SparseReconstructResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SparseReconstruct(
      ::grpc::CallbackServerContext* /*context*/, const ::SparseReconstructRequest* /*request*/, ::SparseReconstructResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SparseReconstruct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SparseReconstructRequest* /*request*/, ::SparseReconstructResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOBJ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOBJ() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::GetOBJRequest, ::GetOBJResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GetOBJRequest* request) { return this->GetOBJ(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetOBJ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOBJ(::grpc::ServerContext* /*context*/, const ::GetOBJRequest* /*request*/, ::grpc::ServerWriter< ::GetOBJResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::GetOBJResponse>* GetOBJ(
      ::grpc::CallbackServerContext* /*context*/, const ::GetOBJRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::GetOBJResponse>* GetOBJ(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GetOBJRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSparse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSparse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::GetSparseRequest, ::GetSparseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GetSparseRequest* request) { return this->GetSparse(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetSparse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSparse(::grpc::ServerContext* /*context*/, const ::GetSparseRequest* /*request*/, ::grpc::ServerWriter< ::GetSparseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::GetSparseResponse>* GetSparse(
      ::grpc::CallbackServerContext* /*context*/, const ::GetSparseRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::GetSparseResponse>* GetSparse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GetSparseRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NewReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NewReconstruction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::NewReconstructionRequest, ::NewReconstructionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::NewReconstructionRequest* request, ::NewReconstructionResponse* response) { return this->NewReconstruction(context, request, response); }));}
    void SetMessageAllocatorFor_NewReconstruction(
        ::grpc::experimental::MessageAllocator< ::NewReconstructionRequest, ::NewReconstructionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::NewReconstructionRequest, ::NewReconstructionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NewReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReconstruction(::grpc::ServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NewReconstruction(
      ::grpc::CallbackServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NewReconstruction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteReconstruction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::DeleteReconstructionRequest, ::DeleteReconstructionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::DeleteReconstructionRequest* request, ::DeleteReconstructionResponse* response) { return this->DeleteReconstruction(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteReconstruction(
        ::grpc::experimental::MessageAllocator< ::DeleteReconstructionRequest, ::DeleteReconstructionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::DeleteReconstructionRequest, ::DeleteReconstructionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReconstruction(::grpc::ServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteReconstruction(
      ::grpc::CallbackServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteReconstruction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::StartSessionRequest, ::StartSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::StartSessionRequest* request, ::StartSessionResponse* response) { return this->StartSession(context, request, response); }));}
    void SetMessageAllocatorFor_StartSession(
        ::grpc::experimental::MessageAllocator< ::StartSessionRequest, ::StartSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::StartSessionRequest, ::StartSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartSession(
      ::grpc::CallbackServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::StopSessionRequest, ::StopSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::StopSessionRequest* request, ::StopSessionResponse* response) { return this->StopSession(context, request, response); }));}
    void SetMessageAllocatorFor_StopSession(
        ::grpc::experimental::MessageAllocator< ::StopSessionRequest, ::StopSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::StopSessionRequest, ::StopSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopSession(::grpc::ServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopSession(
      ::grpc::CallbackServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SessionAddImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SessionAddImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::SessionAddImageRequest, ::SessionAddImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::SessionAddImageResponse* response) { return this->SessionAddImage(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_SessionAddImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionAddImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SessionAddImageRequest>* /*reader*/, ::SessionAddImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::SessionAddImageRequest>* SessionAddImage(
      ::grpc::CallbackServerContext* /*context*/, ::SessionAddImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::SessionAddImageRequest>* SessionAddImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::SessionAddImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetReconstructionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetReconstructionConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SetReconstructionConfigRequest, ::SetReconstructionConfigResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SetReconstructionConfigRequest* request, ::SetReconstructionConfigResponse* response) { return this->SetReconstructionConfig(context, request, response); }));}
    void SetMessageAllocatorFor_SetReconstructionConfig(
        ::grpc::experimental::MessageAllocator< ::SetReconstructionConfigRequest, ::SetReconstructionConfigResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SetReconstructionConfigRequest, ::SetReconstructionConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetReconstructionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetReconstructionConfig(::grpc::ServerContext* /*context*/, const ::SetReconstructionConfigRequest* /*request*/, ::SetReconstructionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetReconstructionConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::SetReconstructionConfigRequest* /*request*/, ::SetReconstructionConfigResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetReconstructionConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SetReconstructionConfigRequest* /*request*/, ::SetReconstructionConfigResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetReconstructionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetReconstructionConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::GetReconstructionConfigRequest, ::GetReconstructionConfigResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GetReconstructionConfigRequest* request, ::GetReconstructionConfigResponse* response) { return this->GetReconstructionConfig(context, request, response); }));}
    void SetMessageAllocatorFor_GetReconstructionConfig(
        ::grpc::experimental::MessageAllocator< ::GetReconstructionConfigRequest, ::GetReconstructionConfigResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GetReconstructionConfigRequest, ::GetReconstructionConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetReconstructionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReconstructionConfig(::grpc::ServerContext* /*context*/, const ::GetReconstructionConfigRequest* /*request*/, ::GetReconstructionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetReconstructionConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::GetReconstructionConfigRequest* /*request*/, ::GetReconstructionConfigResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetReconstructionConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GetReconstructionConfigRequest* /*request*/, ::GetReconstructionConfigResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReconstructionUploadImageBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReconstructionUploadImageBatch() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::ReconstructionUploadImageBatchRequest, ::ReconstructionUploadImageBatchResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::ReconstructionUploadImageBatchResponse* response) { return this->ReconstructionUploadImageBatch(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_ReconstructionUploadImageBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconstructionUploadImageBatch(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ReconstructionUploadImageBatchRequest>* /*reader*/, ::ReconstructionUploadImageBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::ReconstructionUploadImageBatchRequest>* ReconstructionUploadImageBatch(
      ::grpc::CallbackServerContext* /*context*/, ::ReconstructionUploadImageBatchResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::ReconstructionUploadImageBatchRequest>* ReconstructionUploadImageBatch(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::ReconstructionUploadImageBatchResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MVS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MVS() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::MVSRequest, ::MVSResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MVSRequest* request, ::MVSResponse* response) { return this->MVS(context, request, response); }));}
    void SetMessageAllocatorFor_MVS(
        ::grpc::experimental::MessageAllocator< ::MVSRequest, ::MVSResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::MVSRequest, ::MVSResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MVS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MVS(::grpc::ServerContext* /*context*/, const ::MVSRequest* /*request*/, ::MVSResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MVS(
      ::grpc::CallbackServerContext* /*context*/, const ::MVSRequest* /*request*/, ::MVSResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MVS(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MVSRequest* /*request*/, ::MVSResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetAgentConfigFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetAgentConfigFields() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SetAgentConfigFieldsRequest, ::SetAgentConfigFieldsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SetAgentConfigFieldsRequest* request, ::SetAgentConfigFieldsResponse* response) { return this->SetAgentConfigFields(context, request, response); }));}
    void SetMessageAllocatorFor_SetAgentConfigFields(
        ::grpc::experimental::MessageAllocator< ::SetAgentConfigFieldsRequest, ::SetAgentConfigFieldsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SetAgentConfigFieldsRequest, ::SetAgentConfigFieldsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetAgentConfigFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfigFields(::grpc::ServerContext* /*context*/, const ::SetAgentConfigFieldsRequest* /*request*/, ::SetAgentConfigFieldsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetAgentConfigFields(
      ::grpc::CallbackServerContext* /*context*/, const ::SetAgentConfigFieldsRequest* /*request*/, ::SetAgentConfigFieldsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetAgentConfigFields(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SetAgentConfigFieldsRequest* /*request*/, ::SetAgentConfigFieldsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetReconstructionConfigFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetReconstructionConfigFields() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SetReconstructionConfigFieldsRequest, ::SetReconstructionConfigFieldsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SetReconstructionConfigFieldsRequest* request, ::SetReconstructionConfigFieldsResponse* response) { return this->SetReconstructionConfigFields(context, request, response); }));}
    void SetMessageAllocatorFor_SetReconstructionConfigFields(
        ::grpc::experimental::MessageAllocator< ::SetReconstructionConfigFieldsRequest, ::SetReconstructionConfigFieldsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SetReconstructionConfigFieldsRequest, ::SetReconstructionConfigFieldsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetReconstructionConfigFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetReconstructionConfigFields(::grpc::ServerContext* /*context*/, const ::SetReconstructionConfigFieldsRequest* /*request*/, ::SetReconstructionConfigFieldsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetReconstructionConfigFields(
      ::grpc::CallbackServerContext* /*context*/, const ::SetReconstructionConfigFieldsRequest* /*request*/, ::SetReconstructionConfigFieldsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetReconstructionConfigFields(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SetReconstructionConfigFieldsRequest* /*request*/, ::SetReconstructionConfigFieldsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Handshake<ExperimentalWithCallbackMethod_StoreImage<ExperimentalWithCallbackMethod_SparseReconstruct<ExperimentalWithCallbackMethod_GetOBJ<ExperimentalWithCallbackMethod_GetSparse<ExperimentalWithCallbackMethod_NewReconstruction<ExperimentalWithCallbackMethod_DeleteReconstruction<ExperimentalWithCallbackMethod_StartSession<ExperimentalWithCallbackMethod_StopSession<ExperimentalWithCallbackMethod_SessionAddImage<ExperimentalWithCallbackMethod_SetReconstructionConfig<ExperimentalWithCallbackMethod_GetReconstructionConfig<ExperimentalWithCallbackMethod_ReconstructionUploadImageBatch<ExperimentalWithCallbackMethod_MVS<ExperimentalWithCallbackMethod_SetAgentConfigFields<ExperimentalWithCallbackMethod_SetReconstructionConfigFields<Service > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Handshake<ExperimentalWithCallbackMethod_StoreImage<ExperimentalWithCallbackMethod_SparseReconstruct<ExperimentalWithCallbackMethod_GetOBJ<ExperimentalWithCallbackMethod_GetSparse<ExperimentalWithCallbackMethod_NewReconstruction<ExperimentalWithCallbackMethod_DeleteReconstruction<ExperimentalWithCallbackMethod_StartSession<ExperimentalWithCallbackMethod_StopSession<ExperimentalWithCallbackMethod_SessionAddImage<ExperimentalWithCallbackMethod_SetReconstructionConfig<ExperimentalWithCallbackMethod_GetReconstructionConfig<ExperimentalWithCallbackMethod_ReconstructionUploadImageBatch<ExperimentalWithCallbackMethod_MVS<ExperimentalWithCallbackMethod_SetAgentConfigFields<ExperimentalWithCallbackMethod_SetReconstructionConfigFields<Service > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Handshake() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StoreImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StoreImage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StoreImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StoreImageRequest>* /*reader*/, ::StoreImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SparseReconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SparseReconstruct() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SparseReconstruct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SparseReconstruct(::grpc::ServerContext* /*context*/, const ::SparseReconstructRequest* /*request*/, ::SparseReconstructResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOBJ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOBJ() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetOBJ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOBJ(::grpc::ServerContext* /*context*/, const ::GetOBJRequest* /*request*/, ::grpc::ServerWriter< ::GetOBJResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSparse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSparse() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetSparse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSparse(::grpc::ServerContext* /*context*/, const ::GetSparseRequest* /*request*/, ::grpc::ServerWriter< ::GetSparseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewReconstruction() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_NewReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReconstruction(::grpc::ServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteReconstruction() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReconstruction(::grpc::ServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartSession() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopSession() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_StopSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopSession(::grpc::ServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SessionAddImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SessionAddImage() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SessionAddImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionAddImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SessionAddImageRequest>* /*reader*/, ::SessionAddImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetReconstructionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetReconstructionConfig() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SetReconstructionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetReconstructionConfig(::grpc::ServerContext* /*context*/, const ::SetReconstructionConfigRequest* /*request*/, ::SetReconstructionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReconstructionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetReconstructionConfig() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetReconstructionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReconstructionConfig(::grpc::ServerContext* /*context*/, const ::GetReconstructionConfigRequest* /*request*/, ::GetReconstructionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReconstructionUploadImageBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReconstructionUploadImageBatch() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ReconstructionUploadImageBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconstructionUploadImageBatch(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ReconstructionUploadImageBatchRequest>* /*reader*/, ::ReconstructionUploadImageBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MVS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MVS() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_MVS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MVS(::grpc::ServerContext* /*context*/, const ::MVSRequest* /*request*/, ::MVSResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAgentConfigFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAgentConfigFields() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_SetAgentConfigFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfigFields(::grpc::ServerContext* /*context*/, const ::SetAgentConfigFieldsRequest* /*request*/, ::SetAgentConfigFieldsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetReconstructionConfigFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetReconstructionConfigFields() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_SetReconstructionConfigFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetReconstructionConfigFields(::grpc::ServerContext* /*context*/, const ::SetReconstructionConfigFieldsRequest* /*request*/, ::SetReconstructionConfigFieldsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Handshake() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandshake(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StoreImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StoreImage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StoreImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StoreImageRequest>* /*reader*/, ::StoreImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SparseReconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SparseReconstruct() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SparseReconstruct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SparseReconstruct(::grpc::ServerContext* /*context*/, const ::SparseReconstructRequest* /*request*/, ::SparseReconstructResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSparseReconstruct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOBJ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOBJ() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetOBJ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOBJ(::grpc::ServerContext* /*context*/, const ::GetOBJRequest* /*request*/, ::grpc::ServerWriter< ::GetOBJResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOBJ(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSparse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSparse() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetSparse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSparse(::grpc::ServerContext* /*context*/, const ::GetSparseRequest* /*request*/, ::grpc::ServerWriter< ::GetSparseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSparse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewReconstruction() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_NewReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReconstruction(::grpc::ServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewReconstruction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteReconstruction() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReconstruction(::grpc::ServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteReconstruction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartSession() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopSession() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_StopSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopSession(::grpc::ServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SessionAddImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SessionAddImage() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SessionAddImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionAddImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SessionAddImageRequest>* /*reader*/, ::SessionAddImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionAddImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(9, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetReconstructionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetReconstructionConfig() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SetReconstructionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetReconstructionConfig(::grpc::ServerContext* /*context*/, const ::SetReconstructionConfigRequest* /*request*/, ::SetReconstructionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetReconstructionConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetReconstructionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetReconstructionConfig() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetReconstructionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReconstructionConfig(::grpc::ServerContext* /*context*/, const ::GetReconstructionConfigRequest* /*request*/, ::GetReconstructionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReconstructionConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReconstructionUploadImageBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReconstructionUploadImageBatch() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ReconstructionUploadImageBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconstructionUploadImageBatch(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ReconstructionUploadImageBatchRequest>* /*reader*/, ::ReconstructionUploadImageBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconstructionUploadImageBatch(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(12, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MVS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MVS() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_MVS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MVS(::grpc::ServerContext* /*context*/, const ::MVSRequest* /*request*/, ::MVSResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMVS(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAgentConfigFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAgentConfigFields() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_SetAgentConfigFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfigFields(::grpc::ServerContext* /*context*/, const ::SetAgentConfigFieldsRequest* /*request*/, ::SetAgentConfigFieldsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgentConfigFields(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetReconstructionConfigFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetReconstructionConfigFields() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_SetReconstructionConfigFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetReconstructionConfigFields(::grpc::ServerContext* /*context*/, const ::SetReconstructionConfigFieldsRequest* /*request*/, ::SetReconstructionConfigFieldsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetReconstructionConfigFields(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Handshake() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Handshake(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Handshake(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Handshake(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StoreImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StoreImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->StoreImage(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StoreImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StoreImageRequest>* /*reader*/, ::StoreImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* StoreImage(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* StoreImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SparseReconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SparseReconstruct() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SparseReconstruct(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SparseReconstruct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SparseReconstruct(::grpc::ServerContext* /*context*/, const ::SparseReconstructRequest* /*request*/, ::SparseReconstructResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SparseReconstruct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SparseReconstruct(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOBJ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOBJ() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetOBJ(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOBJ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOBJ(::grpc::ServerContext* /*context*/, const ::GetOBJRequest* /*request*/, ::grpc::ServerWriter< ::GetOBJResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetOBJ(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetOBJ(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSparse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSparse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetSparse(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSparse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSparse(::grpc::ServerContext* /*context*/, const ::GetSparseRequest* /*request*/, ::grpc::ServerWriter< ::GetSparseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetSparse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetSparse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NewReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NewReconstruction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewReconstruction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NewReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewReconstruction(::grpc::ServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NewReconstruction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NewReconstruction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteReconstruction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteReconstruction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReconstruction(::grpc::ServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteReconstruction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteReconstruction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopSession(::grpc::ServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SessionAddImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SessionAddImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->SessionAddImage(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SessionAddImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionAddImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::SessionAddImageRequest>* /*reader*/, ::SessionAddImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SessionAddImage(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* SessionAddImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetReconstructionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetReconstructionConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetReconstructionConfig(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetReconstructionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetReconstructionConfig(::grpc::ServerContext* /*context*/, const ::SetReconstructionConfigRequest* /*request*/, ::SetReconstructionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetReconstructionConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetReconstructionConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetReconstructionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetReconstructionConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetReconstructionConfig(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetReconstructionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReconstructionConfig(::grpc::ServerContext* /*context*/, const ::GetReconstructionConfigRequest* /*request*/, ::GetReconstructionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetReconstructionConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetReconstructionConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReconstructionUploadImageBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReconstructionUploadImageBatch() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->ReconstructionUploadImageBatch(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReconstructionUploadImageBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconstructionUploadImageBatch(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ReconstructionUploadImageBatchRequest>* /*reader*/, ::ReconstructionUploadImageBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* ReconstructionUploadImageBatch(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* ReconstructionUploadImageBatch(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MVS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MVS() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MVS(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MVS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MVS(::grpc::ServerContext* /*context*/, const ::MVSRequest* /*request*/, ::MVSResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MVS(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MVS(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetAgentConfigFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetAgentConfigFields() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAgentConfigFields(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetAgentConfigFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgentConfigFields(::grpc::ServerContext* /*context*/, const ::SetAgentConfigFieldsRequest* /*request*/, ::SetAgentConfigFieldsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetAgentConfigFields(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetAgentConfigFields(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetReconstructionConfigFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetReconstructionConfigFields() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetReconstructionConfigFields(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetReconstructionConfigFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetReconstructionConfigFields(::grpc::ServerContext* /*context*/, const ::SetReconstructionConfigFieldsRequest* /*request*/, ::SetReconstructionConfigFieldsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetReconstructionConfigFields(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetReconstructionConfigFields(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Handshake() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::HandhsakeRequest, ::HandshakeResponse>(std::bind(&WithStreamedUnaryMethod_Handshake<BaseClass>::StreamedHandshake, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::HandhsakeRequest* /*request*/, ::HandshakeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandshake(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HandhsakeRequest,::HandshakeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SparseReconstruct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SparseReconstruct() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::SparseReconstructRequest, ::SparseReconstructResponse>(std::bind(&WithStreamedUnaryMethod_SparseReconstruct<BaseClass>::StreamedSparseReconstruct, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SparseReconstruct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SparseReconstruct(::grpc::ServerContext* /*context*/, const ::SparseReconstructRequest* /*request*/, ::SparseReconstructResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSparseReconstruct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SparseReconstructRequest,::SparseReconstructResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewReconstruction() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::NewReconstructionRequest, ::NewReconstructionResponse>(std::bind(&WithStreamedUnaryMethod_NewReconstruction<BaseClass>::StreamedNewReconstruction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewReconstruction(::grpc::ServerContext* /*context*/, const ::NewReconstructionRequest* /*request*/, ::NewReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewReconstruction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NewReconstructionRequest,::NewReconstructionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteReconstruction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteReconstruction() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::DeleteReconstructionRequest, ::DeleteReconstructionResponse>(std::bind(&WithStreamedUnaryMethod_DeleteReconstruction<BaseClass>::StreamedDeleteReconstruction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteReconstruction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteReconstruction(::grpc::ServerContext* /*context*/, const ::DeleteReconstructionRequest* /*request*/, ::DeleteReconstructionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteReconstruction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DeleteReconstructionRequest,::DeleteReconstructionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartSession() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::StartSessionRequest, ::StartSessionResponse>(std::bind(&WithStreamedUnaryMethod_StartSession<BaseClass>::StreamedStartSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StartSessionRequest,::StartSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopSession() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::StopSessionRequest, ::StopSessionResponse>(std::bind(&WithStreamedUnaryMethod_StopSession<BaseClass>::StreamedStopSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopSession(::grpc::ServerContext* /*context*/, const ::StopSessionRequest* /*request*/, ::StopSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StopSessionRequest,::StopSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetReconstructionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetReconstructionConfig() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::SetReconstructionConfigRequest, ::SetReconstructionConfigResponse>(std::bind(&WithStreamedUnaryMethod_SetReconstructionConfig<BaseClass>::StreamedSetReconstructionConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetReconstructionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetReconstructionConfig(::grpc::ServerContext* /*context*/, const ::SetReconstructionConfigRequest* /*request*/, ::SetReconstructionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetReconstructionConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SetReconstructionConfigRequest,::SetReconstructionConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetReconstructionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetReconstructionConfig() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::GetReconstructionConfigRequest, ::GetReconstructionConfigResponse>(std::bind(&WithStreamedUnaryMethod_GetReconstructionConfig<BaseClass>::StreamedGetReconstructionConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetReconstructionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetReconstructionConfig(::grpc::ServerContext* /*context*/, const ::GetReconstructionConfigRequest* /*request*/, ::GetReconstructionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetReconstructionConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetReconstructionConfigRequest,::GetReconstructionConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MVS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MVS() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::MVSRequest, ::MVSResponse>(std::bind(&WithStreamedUnaryMethod_MVS<BaseClass>::StreamedMVS, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MVS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MVS(::grpc::ServerContext* /*context*/, const ::MVSRequest* /*request*/, ::MVSResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMVS(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MVSRequest,::MVSResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAgentConfigFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAgentConfigFields() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::SetAgentConfigFieldsRequest, ::SetAgentConfigFieldsResponse>(std::bind(&WithStreamedUnaryMethod_SetAgentConfigFields<BaseClass>::StreamedSetAgentConfigFields, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetAgentConfigFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAgentConfigFields(::grpc::ServerContext* /*context*/, const ::SetAgentConfigFieldsRequest* /*request*/, ::SetAgentConfigFieldsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAgentConfigFields(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SetAgentConfigFieldsRequest,::SetAgentConfigFieldsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetReconstructionConfigFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetReconstructionConfigFields() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::SetReconstructionConfigFieldsRequest, ::SetReconstructionConfigFieldsResponse>(std::bind(&WithStreamedUnaryMethod_SetReconstructionConfigFields<BaseClass>::StreamedSetReconstructionConfigFields, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetReconstructionConfigFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetReconstructionConfigFields(::grpc::ServerContext* /*context*/, const ::SetReconstructionConfigFieldsRequest* /*request*/, ::SetReconstructionConfigFieldsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetReconstructionConfigFields(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SetReconstructionConfigFieldsRequest,::SetReconstructionConfigFieldsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Handshake<WithStreamedUnaryMethod_SparseReconstruct<WithStreamedUnaryMethod_NewReconstruction<WithStreamedUnaryMethod_DeleteReconstruction<WithStreamedUnaryMethod_StartSession<WithStreamedUnaryMethod_StopSession<WithStreamedUnaryMethod_SetReconstructionConfig<WithStreamedUnaryMethod_GetReconstructionConfig<WithStreamedUnaryMethod_MVS<WithStreamedUnaryMethod_SetAgentConfigFields<WithStreamedUnaryMethod_SetReconstructionConfigFields<Service > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetOBJ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetOBJ() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::GetOBJRequest, ::GetOBJResponse>(std::bind(&WithSplitStreamingMethod_GetOBJ<BaseClass>::StreamedGetOBJ, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetOBJ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOBJ(::grpc::ServerContext* /*context*/, const ::GetOBJRequest* /*request*/, ::grpc::ServerWriter< ::GetOBJResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetOBJ(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GetOBJRequest,::GetOBJResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetSparse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetSparse() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::GetSparseRequest, ::GetSparseResponse>(std::bind(&WithSplitStreamingMethod_GetSparse<BaseClass>::StreamedGetSparse, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetSparse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSparse(::grpc::ServerContext* /*context*/, const ::GetSparseRequest* /*request*/, ::grpc::ServerWriter< ::GetSparseResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetSparse(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GetSparseRequest,::GetSparseResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetOBJ<WithSplitStreamingMethod_GetSparse<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Handshake<WithStreamedUnaryMethod_SparseReconstruct<WithSplitStreamingMethod_GetOBJ<WithSplitStreamingMethod_GetSparse<WithStreamedUnaryMethod_NewReconstruction<WithStreamedUnaryMethod_DeleteReconstruction<WithStreamedUnaryMethod_StartSession<WithStreamedUnaryMethod_StopSession<WithStreamedUnaryMethod_SetReconstructionConfig<WithStreamedUnaryMethod_GetReconstructionConfig<WithStreamedUnaryMethod_MVS<WithStreamedUnaryMethod_SetAgentConfigFields<WithStreamedUnaryMethod_SetReconstructionConfigFields<Service > > > > > > > > > > > > > StreamedService;
};


#endif  // GRPC_server_2eproto__INCLUDED
