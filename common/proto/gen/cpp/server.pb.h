// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[35]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2eproto;
class CameraIntrinsics;
class CameraIntrinsicsDefaultTypeInternal;
extern CameraIntrinsicsDefaultTypeInternal _CameraIntrinsics_default_instance_;
class DeleteReconstructionRequest;
class DeleteReconstructionRequestDefaultTypeInternal;
extern DeleteReconstructionRequestDefaultTypeInternal _DeleteReconstructionRequest_default_instance_;
class DeleteReconstructionResponse;
class DeleteReconstructionResponseDefaultTypeInternal;
extern DeleteReconstructionResponseDefaultTypeInternal _DeleteReconstructionResponse_default_instance_;
class GetOBJRequest;
class GetOBJRequestDefaultTypeInternal;
extern GetOBJRequestDefaultTypeInternal _GetOBJRequest_default_instance_;
class GetOBJResponse;
class GetOBJResponseDefaultTypeInternal;
extern GetOBJResponseDefaultTypeInternal _GetOBJResponse_default_instance_;
class GetReconstructionConfigRequest;
class GetReconstructionConfigRequestDefaultTypeInternal;
extern GetReconstructionConfigRequestDefaultTypeInternal _GetReconstructionConfigRequest_default_instance_;
class GetReconstructionConfigResponse;
class GetReconstructionConfigResponseDefaultTypeInternal;
extern GetReconstructionConfigResponseDefaultTypeInternal _GetReconstructionConfigResponse_default_instance_;
class GetSparseRequest;
class GetSparseRequestDefaultTypeInternal;
extern GetSparseRequestDefaultTypeInternal _GetSparseRequest_default_instance_;
class GetSparseResponse;
class GetSparseResponseDefaultTypeInternal;
extern GetSparseResponseDefaultTypeInternal _GetSparseResponse_default_instance_;
class HandhsakeRequest;
class HandhsakeRequestDefaultTypeInternal;
extern HandhsakeRequestDefaultTypeInternal _HandhsakeRequest_default_instance_;
class HandshakeResponse;
class HandshakeResponseDefaultTypeInternal;
extern HandshakeResponseDefaultTypeInternal _HandshakeResponse_default_instance_;
class ImageData;
class ImageDataDefaultTypeInternal;
extern ImageDataDefaultTypeInternal _ImageData_default_instance_;
class ImageMetaData;
class ImageMetaDataDefaultTypeInternal;
extern ImageMetaDataDefaultTypeInternal _ImageMetaData_default_instance_;
class NewReconstructionRequest;
class NewReconstructionRequestDefaultTypeInternal;
extern NewReconstructionRequestDefaultTypeInternal _NewReconstructionRequest_default_instance_;
class NewReconstructionResponse;
class NewReconstructionResponseDefaultTypeInternal;
extern NewReconstructionResponseDefaultTypeInternal _NewReconstructionResponse_default_instance_;
class OBJData;
class OBJDataDefaultTypeInternal;
extern OBJDataDefaultTypeInternal _OBJData_default_instance_;
class OBJMetaData;
class OBJMetaDataDefaultTypeInternal;
extern OBJMetaDataDefaultTypeInternal _OBJMetaData_default_instance_;
class ReconstructRequest;
class ReconstructRequestDefaultTypeInternal;
extern ReconstructRequestDefaultTypeInternal _ReconstructRequest_default_instance_;
class ReconstructResponse;
class ReconstructResponseDefaultTypeInternal;
extern ReconstructResponseDefaultTypeInternal _ReconstructResponse_default_instance_;
class ReconstructionData;
class ReconstructionDataDefaultTypeInternal;
extern ReconstructionDataDefaultTypeInternal _ReconstructionData_default_instance_;
class ReconstructionOBJ;
class ReconstructionOBJDefaultTypeInternal;
extern ReconstructionOBJDefaultTypeInternal _ReconstructionOBJ_default_instance_;
class ReconstructionUploadImageBatchRequest;
class ReconstructionUploadImageBatchRequestDefaultTypeInternal;
extern ReconstructionUploadImageBatchRequestDefaultTypeInternal _ReconstructionUploadImageBatchRequest_default_instance_;
class ReconstructionUploadImageBatchResponse;
class ReconstructionUploadImageBatchResponseDefaultTypeInternal;
extern ReconstructionUploadImageBatchResponseDefaultTypeInternal _ReconstructionUploadImageBatchResponse_default_instance_;
class SessionAddImageRequest;
class SessionAddImageRequestDefaultTypeInternal;
extern SessionAddImageRequestDefaultTypeInternal _SessionAddImageRequest_default_instance_;
class SessionAddImageResponse;
class SessionAddImageResponseDefaultTypeInternal;
extern SessionAddImageResponseDefaultTypeInternal _SessionAddImageResponse_default_instance_;
class SetReconstructionConfigRequest;
class SetReconstructionConfigRequestDefaultTypeInternal;
extern SetReconstructionConfigRequestDefaultTypeInternal _SetReconstructionConfigRequest_default_instance_;
class SetReconstructionConfigResponse;
class SetReconstructionConfigResponseDefaultTypeInternal;
extern SetReconstructionConfigResponseDefaultTypeInternal _SetReconstructionConfigResponse_default_instance_;
class SparsePointCloudData;
class SparsePointCloudDataDefaultTypeInternal;
extern SparsePointCloudDataDefaultTypeInternal _SparsePointCloudData_default_instance_;
class SparsePointCloudMetaData;
class SparsePointCloudMetaDataDefaultTypeInternal;
extern SparsePointCloudMetaDataDefaultTypeInternal _SparsePointCloudMetaData_default_instance_;
class StartSessionRequest;
class StartSessionRequestDefaultTypeInternal;
extern StartSessionRequestDefaultTypeInternal _StartSessionRequest_default_instance_;
class StartSessionResponse;
class StartSessionResponseDefaultTypeInternal;
extern StartSessionResponseDefaultTypeInternal _StartSessionResponse_default_instance_;
class StopSessionRequest;
class StopSessionRequestDefaultTypeInternal;
extern StopSessionRequestDefaultTypeInternal _StopSessionRequest_default_instance_;
class StopSessionResponse;
class StopSessionResponseDefaultTypeInternal;
extern StopSessionResponseDefaultTypeInternal _StopSessionResponse_default_instance_;
class StoreImageRequest;
class StoreImageRequestDefaultTypeInternal;
extern StoreImageRequestDefaultTypeInternal _StoreImageRequest_default_instance_;
class StoreImageResponse;
class StoreImageResponseDefaultTypeInternal;
extern StoreImageResponseDefaultTypeInternal _StoreImageResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CameraIntrinsics* Arena::CreateMaybeMessage<::CameraIntrinsics>(Arena*);
template<> ::DeleteReconstructionRequest* Arena::CreateMaybeMessage<::DeleteReconstructionRequest>(Arena*);
template<> ::DeleteReconstructionResponse* Arena::CreateMaybeMessage<::DeleteReconstructionResponse>(Arena*);
template<> ::GetOBJRequest* Arena::CreateMaybeMessage<::GetOBJRequest>(Arena*);
template<> ::GetOBJResponse* Arena::CreateMaybeMessage<::GetOBJResponse>(Arena*);
template<> ::GetReconstructionConfigRequest* Arena::CreateMaybeMessage<::GetReconstructionConfigRequest>(Arena*);
template<> ::GetReconstructionConfigResponse* Arena::CreateMaybeMessage<::GetReconstructionConfigResponse>(Arena*);
template<> ::GetSparseRequest* Arena::CreateMaybeMessage<::GetSparseRequest>(Arena*);
template<> ::GetSparseResponse* Arena::CreateMaybeMessage<::GetSparseResponse>(Arena*);
template<> ::HandhsakeRequest* Arena::CreateMaybeMessage<::HandhsakeRequest>(Arena*);
template<> ::HandshakeResponse* Arena::CreateMaybeMessage<::HandshakeResponse>(Arena*);
template<> ::ImageData* Arena::CreateMaybeMessage<::ImageData>(Arena*);
template<> ::ImageMetaData* Arena::CreateMaybeMessage<::ImageMetaData>(Arena*);
template<> ::NewReconstructionRequest* Arena::CreateMaybeMessage<::NewReconstructionRequest>(Arena*);
template<> ::NewReconstructionResponse* Arena::CreateMaybeMessage<::NewReconstructionResponse>(Arena*);
template<> ::OBJData* Arena::CreateMaybeMessage<::OBJData>(Arena*);
template<> ::OBJMetaData* Arena::CreateMaybeMessage<::OBJMetaData>(Arena*);
template<> ::ReconstructRequest* Arena::CreateMaybeMessage<::ReconstructRequest>(Arena*);
template<> ::ReconstructResponse* Arena::CreateMaybeMessage<::ReconstructResponse>(Arena*);
template<> ::ReconstructionData* Arena::CreateMaybeMessage<::ReconstructionData>(Arena*);
template<> ::ReconstructionOBJ* Arena::CreateMaybeMessage<::ReconstructionOBJ>(Arena*);
template<> ::ReconstructionUploadImageBatchRequest* Arena::CreateMaybeMessage<::ReconstructionUploadImageBatchRequest>(Arena*);
template<> ::ReconstructionUploadImageBatchResponse* Arena::CreateMaybeMessage<::ReconstructionUploadImageBatchResponse>(Arena*);
template<> ::SessionAddImageRequest* Arena::CreateMaybeMessage<::SessionAddImageRequest>(Arena*);
template<> ::SessionAddImageResponse* Arena::CreateMaybeMessage<::SessionAddImageResponse>(Arena*);
template<> ::SetReconstructionConfigRequest* Arena::CreateMaybeMessage<::SetReconstructionConfigRequest>(Arena*);
template<> ::SetReconstructionConfigResponse* Arena::CreateMaybeMessage<::SetReconstructionConfigResponse>(Arena*);
template<> ::SparsePointCloudData* Arena::CreateMaybeMessage<::SparsePointCloudData>(Arena*);
template<> ::SparsePointCloudMetaData* Arena::CreateMaybeMessage<::SparsePointCloudMetaData>(Arena*);
template<> ::StartSessionRequest* Arena::CreateMaybeMessage<::StartSessionRequest>(Arena*);
template<> ::StartSessionResponse* Arena::CreateMaybeMessage<::StartSessionResponse>(Arena*);
template<> ::StopSessionRequest* Arena::CreateMaybeMessage<::StopSessionRequest>(Arena*);
template<> ::StopSessionResponse* Arena::CreateMaybeMessage<::StopSessionResponse>(Arena*);
template<> ::StoreImageRequest* Arena::CreateMaybeMessage<::StoreImageRequest>(Arena*);
template<> ::StoreImageResponse* Arena::CreateMaybeMessage<::StoreImageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ImageMetaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageMetaData) */ {
 public:
  ImageMetaData();
  virtual ~ImageMetaData();

  ImageMetaData(const ImageMetaData& from);
  ImageMetaData(ImageMetaData&& from) noexcept
    : ImageMetaData() {
    *this = ::std::move(from);
  }

  inline ImageMetaData& operator=(const ImageMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMetaData& operator=(ImageMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageMetaData* internal_default_instance() {
    return reinterpret_cast<const ImageMetaData*>(
               &_ImageMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageMetaData& a, ImageMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMetaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageMetaData* New() const final {
    return CreateMaybeMessage<ImageMetaData>(nullptr);
  }

  ImageMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageMetaData& from);
  void MergeFrom(const ImageMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageMetaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kReconstructionFieldNumber = 2,
    kPathFieldNumber = 3,
    kFormatFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string reconstruction = 2;
  void clear_reconstruction();
  const std::string& reconstruction() const;
  void set_reconstruction(const std::string& value);
  void set_reconstruction(std::string&& value);
  void set_reconstruction(const char* value);
  void set_reconstruction(const char* value, size_t size);
  std::string* mutable_reconstruction();
  std::string* release_reconstruction();
  void set_allocated_reconstruction(std::string* reconstruction);
  private:
  const std::string& _internal_reconstruction() const;
  void _internal_set_reconstruction(const std::string& value);
  std::string* _internal_mutable_reconstruction();
  public:

  // string path = 3;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string format = 4;
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // @@protoc_insertion_point(class_scope:ImageMetaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ImageData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageData) */ {
 public:
  ImageData();
  virtual ~ImageData();

  ImageData(const ImageData& from);
  ImageData(ImageData&& from) noexcept
    : ImageData() {
    *this = ::std::move(from);
  }

  inline ImageData& operator=(const ImageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageData& operator=(ImageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageData* internal_default_instance() {
    return reinterpret_cast<const ImageData*>(
               &_ImageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImageData& a, ImageData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageData* New() const final {
    return CreateMaybeMessage<ImageData>(nullptr);
  }

  ImageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageData& from);
  void MergeFrom(const ImageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .ImageMetaData metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::ImageMetaData& metadata() const;
  ::ImageMetaData* release_metadata();
  ::ImageMetaData* mutable_metadata();
  void set_allocated_metadata(::ImageMetaData* metadata);
  private:
  const ::ImageMetaData& _internal_metadata() const;
  ::ImageMetaData* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:ImageData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::ImageMetaData* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class SparsePointCloudData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SparsePointCloudData) */ {
 public:
  SparsePointCloudData();
  virtual ~SparsePointCloudData();

  SparsePointCloudData(const SparsePointCloudData& from);
  SparsePointCloudData(SparsePointCloudData&& from) noexcept
    : SparsePointCloudData() {
    *this = ::std::move(from);
  }

  inline SparsePointCloudData& operator=(const SparsePointCloudData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparsePointCloudData& operator=(SparsePointCloudData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SparsePointCloudData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparsePointCloudData* internal_default_instance() {
    return reinterpret_cast<const SparsePointCloudData*>(
               &_SparsePointCloudData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SparsePointCloudData& a, SparsePointCloudData& b) {
    a.Swap(&b);
  }
  inline void Swap(SparsePointCloudData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparsePointCloudData* New() const final {
    return CreateMaybeMessage<SparsePointCloudData>(nullptr);
  }

  SparsePointCloudData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparsePointCloudData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparsePointCloudData& from);
  void MergeFrom(const SparsePointCloudData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparsePointCloudData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SparsePointCloudData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .SparsePointCloudMetaData metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::SparsePointCloudMetaData& metadata() const;
  ::SparsePointCloudMetaData* release_metadata();
  ::SparsePointCloudMetaData* mutable_metadata();
  void set_allocated_metadata(::SparsePointCloudMetaData* metadata);
  private:
  const ::SparsePointCloudMetaData& _internal_metadata() const;
  ::SparsePointCloudMetaData* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:SparsePointCloudData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::SparsePointCloudMetaData* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class SparsePointCloudMetaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SparsePointCloudMetaData) */ {
 public:
  SparsePointCloudMetaData();
  virtual ~SparsePointCloudMetaData();

  SparsePointCloudMetaData(const SparsePointCloudMetaData& from);
  SparsePointCloudMetaData(SparsePointCloudMetaData&& from) noexcept
    : SparsePointCloudMetaData() {
    *this = ::std::move(from);
  }

  inline SparsePointCloudMetaData& operator=(const SparsePointCloudMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparsePointCloudMetaData& operator=(SparsePointCloudMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SparsePointCloudMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparsePointCloudMetaData* internal_default_instance() {
    return reinterpret_cast<const SparsePointCloudMetaData*>(
               &_SparsePointCloudMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SparsePointCloudMetaData& a, SparsePointCloudMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(SparsePointCloudMetaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparsePointCloudMetaData* New() const final {
    return CreateMaybeMessage<SparsePointCloudMetaData>(nullptr);
  }

  SparsePointCloudMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparsePointCloudMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparsePointCloudMetaData& from);
  void MergeFrom(const SparsePointCloudMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparsePointCloudMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SparsePointCloudMetaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kReconstructionFieldNumber = 2,
    kMvsPathFieldNumber = 3,
    kPlyPathFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string reconstruction = 2;
  void clear_reconstruction();
  const std::string& reconstruction() const;
  void set_reconstruction(const std::string& value);
  void set_reconstruction(std::string&& value);
  void set_reconstruction(const char* value);
  void set_reconstruction(const char* value, size_t size);
  std::string* mutable_reconstruction();
  std::string* release_reconstruction();
  void set_allocated_reconstruction(std::string* reconstruction);
  private:
  const std::string& _internal_reconstruction() const;
  void _internal_set_reconstruction(const std::string& value);
  std::string* _internal_mutable_reconstruction();
  public:

  // string mvs_path = 3;
  void clear_mvs_path();
  const std::string& mvs_path() const;
  void set_mvs_path(const std::string& value);
  void set_mvs_path(std::string&& value);
  void set_mvs_path(const char* value);
  void set_mvs_path(const char* value, size_t size);
  std::string* mutable_mvs_path();
  std::string* release_mvs_path();
  void set_allocated_mvs_path(std::string* mvs_path);
  private:
  const std::string& _internal_mvs_path() const;
  void _internal_set_mvs_path(const std::string& value);
  std::string* _internal_mutable_mvs_path();
  public:

  // string ply_path = 4;
  void clear_ply_path();
  const std::string& ply_path() const;
  void set_ply_path(const std::string& value);
  void set_ply_path(std::string&& value);
  void set_ply_path(const char* value);
  void set_ply_path(const char* value, size_t size);
  std::string* mutable_ply_path();
  std::string* release_ply_path();
  void set_allocated_ply_path(std::string* ply_path);
  private:
  const std::string& _internal_ply_path() const;
  void _internal_set_ply_path(const std::string& value);
  std::string* _internal_mutable_ply_path();
  public:

  // @@protoc_insertion_point(class_scope:SparsePointCloudMetaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mvs_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ply_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class OBJMetaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OBJMetaData) */ {
 public:
  OBJMetaData();
  virtual ~OBJMetaData();

  OBJMetaData(const OBJMetaData& from);
  OBJMetaData(OBJMetaData&& from) noexcept
    : OBJMetaData() {
    *this = ::std::move(from);
  }

  inline OBJMetaData& operator=(const OBJMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBJMetaData& operator=(OBJMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OBJMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBJMetaData* internal_default_instance() {
    return reinterpret_cast<const OBJMetaData*>(
               &_OBJMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OBJMetaData& a, OBJMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(OBJMetaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBJMetaData* New() const final {
    return CreateMaybeMessage<OBJMetaData>(nullptr);
  }

  OBJMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBJMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OBJMetaData& from);
  void MergeFrom(const OBJMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OBJMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OBJMetaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kReconstructionFieldNumber = 2,
    kPathFieldNumber = 3,
    kTexturePathFieldNumber = 4,
    kMtlPathFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string reconstruction = 2;
  void clear_reconstruction();
  const std::string& reconstruction() const;
  void set_reconstruction(const std::string& value);
  void set_reconstruction(std::string&& value);
  void set_reconstruction(const char* value);
  void set_reconstruction(const char* value, size_t size);
  std::string* mutable_reconstruction();
  std::string* release_reconstruction();
  void set_allocated_reconstruction(std::string* reconstruction);
  private:
  const std::string& _internal_reconstruction() const;
  void _internal_set_reconstruction(const std::string& value);
  std::string* _internal_mutable_reconstruction();
  public:

  // string path = 3;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string texture_path = 4;
  void clear_texture_path();
  const std::string& texture_path() const;
  void set_texture_path(const std::string& value);
  void set_texture_path(std::string&& value);
  void set_texture_path(const char* value);
  void set_texture_path(const char* value, size_t size);
  std::string* mutable_texture_path();
  std::string* release_texture_path();
  void set_allocated_texture_path(std::string* texture_path);
  private:
  const std::string& _internal_texture_path() const;
  void _internal_set_texture_path(const std::string& value);
  std::string* _internal_mutable_texture_path();
  public:

  // string mtl_path = 5;
  void clear_mtl_path();
  const std::string& mtl_path() const;
  void set_mtl_path(const std::string& value);
  void set_mtl_path(std::string&& value);
  void set_mtl_path(const char* value);
  void set_mtl_path(const char* value, size_t size);
  std::string* mutable_mtl_path();
  std::string* release_mtl_path();
  void set_allocated_mtl_path(std::string* mtl_path);
  private:
  const std::string& _internal_mtl_path() const;
  void _internal_set_mtl_path(const std::string& value);
  std::string* _internal_mutable_mtl_path();
  public:

  // @@protoc_insertion_point(class_scope:OBJMetaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texture_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mtl_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class OBJData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OBJData) */ {
 public:
  OBJData();
  virtual ~OBJData();

  OBJData(const OBJData& from);
  OBJData(OBJData&& from) noexcept
    : OBJData() {
    *this = ::std::move(from);
  }

  inline OBJData& operator=(const OBJData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBJData& operator=(OBJData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OBJData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBJData* internal_default_instance() {
    return reinterpret_cast<const OBJData*>(
               &_OBJData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OBJData& a, OBJData& b) {
    a.Swap(&b);
  }
  inline void Swap(OBJData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBJData* New() const final {
    return CreateMaybeMessage<OBJData>(nullptr);
  }

  OBJData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBJData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OBJData& from);
  void MergeFrom(const OBJData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OBJData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OBJData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjDataFieldNumber = 1,
    kTextureDataFieldNumber = 2,
    kMtlDataFieldNumber = 3,
    kMetadataFieldNumber = 4,
  };
  // bytes obj_data = 1;
  void clear_obj_data();
  const std::string& obj_data() const;
  void set_obj_data(const std::string& value);
  void set_obj_data(std::string&& value);
  void set_obj_data(const char* value);
  void set_obj_data(const void* value, size_t size);
  std::string* mutable_obj_data();
  std::string* release_obj_data();
  void set_allocated_obj_data(std::string* obj_data);
  private:
  const std::string& _internal_obj_data() const;
  void _internal_set_obj_data(const std::string& value);
  std::string* _internal_mutable_obj_data();
  public:

  // bytes texture_data = 2;
  void clear_texture_data();
  const std::string& texture_data() const;
  void set_texture_data(const std::string& value);
  void set_texture_data(std::string&& value);
  void set_texture_data(const char* value);
  void set_texture_data(const void* value, size_t size);
  std::string* mutable_texture_data();
  std::string* release_texture_data();
  void set_allocated_texture_data(std::string* texture_data);
  private:
  const std::string& _internal_texture_data() const;
  void _internal_set_texture_data(const std::string& value);
  std::string* _internal_mutable_texture_data();
  public:

  // bytes mtl_data = 3;
  void clear_mtl_data();
  const std::string& mtl_data() const;
  void set_mtl_data(const std::string& value);
  void set_mtl_data(std::string&& value);
  void set_mtl_data(const char* value);
  void set_mtl_data(const void* value, size_t size);
  std::string* mutable_mtl_data();
  std::string* release_mtl_data();
  void set_allocated_mtl_data(std::string* mtl_data);
  private:
  const std::string& _internal_mtl_data() const;
  void _internal_set_mtl_data(const std::string& value);
  std::string* _internal_mutable_mtl_data();
  public:

  // .OBJMetaData metadata = 4;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::OBJMetaData& metadata() const;
  ::OBJMetaData* release_metadata();
  ::OBJMetaData* mutable_metadata();
  void set_allocated_metadata(::OBJMetaData* metadata);
  private:
  const ::OBJMetaData& _internal_metadata() const;
  ::OBJMetaData* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:OBJData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texture_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mtl_data_;
  ::OBJMetaData* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ReconstructionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReconstructionData) */ {
 public:
  ReconstructionData();
  virtual ~ReconstructionData();

  ReconstructionData(const ReconstructionData& from);
  ReconstructionData(ReconstructionData&& from) noexcept
    : ReconstructionData() {
    *this = ::std::move(from);
  }

  inline ReconstructionData& operator=(const ReconstructionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconstructionData& operator=(ReconstructionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReconstructionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReconstructionData* internal_default_instance() {
    return reinterpret_cast<const ReconstructionData*>(
               &_ReconstructionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReconstructionData& a, ReconstructionData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconstructionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReconstructionData* New() const final {
    return CreateMaybeMessage<ReconstructionData>(nullptr);
  }

  ReconstructionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReconstructionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReconstructionData& from);
  void MergeFrom(const ReconstructionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconstructionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReconstructionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 3,
    kIdFieldNumber = 1,
    kRootFieldNumber = 2,
    kSparseReconstructionFieldNumber = 4,
    kObjFieldNumber = 5,
    kImagesPathFieldNumber = 6,
    kSfmPathFieldNumber = 7,
    kMvsPathFieldNumber = 8,
    kFeaturesPathFieldNumber = 9,
    kMatchesPathFieldNumber = 10,
  };
  // repeated string images = 3;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  const std::string& images(int index) const;
  std::string* mutable_images(int index);
  void set_images(int index, const std::string& value);
  void set_images(int index, std::string&& value);
  void set_images(int index, const char* value);
  void set_images(int index, const char* value, size_t size);
  std::string* add_images();
  void add_images(const std::string& value);
  void add_images(std::string&& value);
  void add_images(const char* value);
  void add_images(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& images() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_images();
  private:
  const std::string& _internal_images(int index) const;
  std::string* _internal_add_images();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string root = 2;
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);
  private:
  const std::string& _internal_root() const;
  void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // string sparse_reconstruction = 4;
  void clear_sparse_reconstruction();
  const std::string& sparse_reconstruction() const;
  void set_sparse_reconstruction(const std::string& value);
  void set_sparse_reconstruction(std::string&& value);
  void set_sparse_reconstruction(const char* value);
  void set_sparse_reconstruction(const char* value, size_t size);
  std::string* mutable_sparse_reconstruction();
  std::string* release_sparse_reconstruction();
  void set_allocated_sparse_reconstruction(std::string* sparse_reconstruction);
  private:
  const std::string& _internal_sparse_reconstruction() const;
  void _internal_set_sparse_reconstruction(const std::string& value);
  std::string* _internal_mutable_sparse_reconstruction();
  public:

  // string obj = 5;
  void clear_obj();
  const std::string& obj() const;
  void set_obj(const std::string& value);
  void set_obj(std::string&& value);
  void set_obj(const char* value);
  void set_obj(const char* value, size_t size);
  std::string* mutable_obj();
  std::string* release_obj();
  void set_allocated_obj(std::string* obj);
  private:
  const std::string& _internal_obj() const;
  void _internal_set_obj(const std::string& value);
  std::string* _internal_mutable_obj();
  public:

  // string images_path = 6;
  void clear_images_path();
  const std::string& images_path() const;
  void set_images_path(const std::string& value);
  void set_images_path(std::string&& value);
  void set_images_path(const char* value);
  void set_images_path(const char* value, size_t size);
  std::string* mutable_images_path();
  std::string* release_images_path();
  void set_allocated_images_path(std::string* images_path);
  private:
  const std::string& _internal_images_path() const;
  void _internal_set_images_path(const std::string& value);
  std::string* _internal_mutable_images_path();
  public:

  // string sfm_path = 7;
  void clear_sfm_path();
  const std::string& sfm_path() const;
  void set_sfm_path(const std::string& value);
  void set_sfm_path(std::string&& value);
  void set_sfm_path(const char* value);
  void set_sfm_path(const char* value, size_t size);
  std::string* mutable_sfm_path();
  std::string* release_sfm_path();
  void set_allocated_sfm_path(std::string* sfm_path);
  private:
  const std::string& _internal_sfm_path() const;
  void _internal_set_sfm_path(const std::string& value);
  std::string* _internal_mutable_sfm_path();
  public:

  // string mvs_path = 8;
  void clear_mvs_path();
  const std::string& mvs_path() const;
  void set_mvs_path(const std::string& value);
  void set_mvs_path(std::string&& value);
  void set_mvs_path(const char* value);
  void set_mvs_path(const char* value, size_t size);
  std::string* mutable_mvs_path();
  std::string* release_mvs_path();
  void set_allocated_mvs_path(std::string* mvs_path);
  private:
  const std::string& _internal_mvs_path() const;
  void _internal_set_mvs_path(const std::string& value);
  std::string* _internal_mutable_mvs_path();
  public:

  // string features_path = 9;
  void clear_features_path();
  const std::string& features_path() const;
  void set_features_path(const std::string& value);
  void set_features_path(std::string&& value);
  void set_features_path(const char* value);
  void set_features_path(const char* value, size_t size);
  std::string* mutable_features_path();
  std::string* release_features_path();
  void set_allocated_features_path(std::string* features_path);
  private:
  const std::string& _internal_features_path() const;
  void _internal_set_features_path(const std::string& value);
  std::string* _internal_mutable_features_path();
  public:

  // string matches_path = 10;
  void clear_matches_path();
  const std::string& matches_path() const;
  void set_matches_path(const std::string& value);
  void set_matches_path(std::string&& value);
  void set_matches_path(const char* value);
  void set_matches_path(const char* value, size_t size);
  std::string* mutable_matches_path();
  std::string* release_matches_path();
  void set_allocated_matches_path(std::string* matches_path);
  private:
  const std::string& _internal_matches_path() const;
  void _internal_set_matches_path(const std::string& value);
  std::string* _internal_mutable_matches_path();
  public:

  // @@protoc_insertion_point(class_scope:ReconstructionData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sparse_reconstruction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sfm_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mvs_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr features_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class StoreImageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StoreImageResponse) */ {
 public:
  StoreImageResponse();
  virtual ~StoreImageResponse();

  StoreImageResponse(const StoreImageResponse& from);
  StoreImageResponse(StoreImageResponse&& from) noexcept
    : StoreImageResponse() {
    *this = ::std::move(from);
  }

  inline StoreImageResponse& operator=(const StoreImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreImageResponse& operator=(StoreImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreImageResponse* internal_default_instance() {
    return reinterpret_cast<const StoreImageResponse*>(
               &_StoreImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StoreImageResponse& a, StoreImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreImageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreImageResponse* New() const final {
    return CreateMaybeMessage<StoreImageResponse>(nullptr);
  }

  StoreImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreImageResponse& from);
  void MergeFrom(const StoreImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StoreImageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:StoreImageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class StoreImageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StoreImageRequest) */ {
 public:
  StoreImageRequest();
  virtual ~StoreImageRequest();

  StoreImageRequest(const StoreImageRequest& from);
  StoreImageRequest(StoreImageRequest&& from) noexcept
    : StoreImageRequest() {
    *this = ::std::move(from);
  }

  inline StoreImageRequest& operator=(const StoreImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreImageRequest& operator=(StoreImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreImageRequest* internal_default_instance() {
    return reinterpret_cast<const StoreImageRequest*>(
               &_StoreImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StoreImageRequest& a, StoreImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreImageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreImageRequest* New() const final {
    return CreateMaybeMessage<StoreImageRequest>(nullptr);
  }

  StoreImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreImageRequest& from);
  void MergeFrom(const StoreImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StoreImageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
    kImageFieldNumber = 2,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // .ImageData image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::ImageData& image() const;
  ::ImageData* release_image();
  ::ImageData* mutable_image();
  void set_allocated_image(::ImageData* image);
  private:
  const ::ImageData& _internal_image() const;
  ::ImageData* _internal_mutable_image();
  public:

  // @@protoc_insertion_point(class_scope:StoreImageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  ::ImageData* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class NewReconstructionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NewReconstructionRequest) */ {
 public:
  NewReconstructionRequest();
  virtual ~NewReconstructionRequest();

  NewReconstructionRequest(const NewReconstructionRequest& from);
  NewReconstructionRequest(NewReconstructionRequest&& from) noexcept
    : NewReconstructionRequest() {
    *this = ::std::move(from);
  }

  inline NewReconstructionRequest& operator=(const NewReconstructionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewReconstructionRequest& operator=(NewReconstructionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewReconstructionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewReconstructionRequest* internal_default_instance() {
    return reinterpret_cast<const NewReconstructionRequest*>(
               &_NewReconstructionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NewReconstructionRequest& a, NewReconstructionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewReconstructionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewReconstructionRequest* New() const final {
    return CreateMaybeMessage<NewReconstructionRequest>(nullptr);
  }

  NewReconstructionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewReconstructionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewReconstructionRequest& from);
  void MergeFrom(const NewReconstructionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewReconstructionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NewReconstructionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NewReconstructionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class NewReconstructionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NewReconstructionResponse) */ {
 public:
  NewReconstructionResponse();
  virtual ~NewReconstructionResponse();

  NewReconstructionResponse(const NewReconstructionResponse& from);
  NewReconstructionResponse(NewReconstructionResponse&& from) noexcept
    : NewReconstructionResponse() {
    *this = ::std::move(from);
  }

  inline NewReconstructionResponse& operator=(const NewReconstructionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewReconstructionResponse& operator=(NewReconstructionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewReconstructionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewReconstructionResponse* internal_default_instance() {
    return reinterpret_cast<const NewReconstructionResponse*>(
               &_NewReconstructionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NewReconstructionResponse& a, NewReconstructionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NewReconstructionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewReconstructionResponse* New() const final {
    return CreateMaybeMessage<NewReconstructionResponse>(nullptr);
  }

  NewReconstructionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewReconstructionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewReconstructionResponse& from);
  void MergeFrom(const NewReconstructionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewReconstructionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NewReconstructionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // @@protoc_insertion_point(class_scope:NewReconstructionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ReconstructRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReconstructRequest) */ {
 public:
  ReconstructRequest();
  virtual ~ReconstructRequest();

  ReconstructRequest(const ReconstructRequest& from);
  ReconstructRequest(ReconstructRequest&& from) noexcept
    : ReconstructRequest() {
    *this = ::std::move(from);
  }

  inline ReconstructRequest& operator=(const ReconstructRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconstructRequest& operator=(ReconstructRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReconstructRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReconstructRequest* internal_default_instance() {
    return reinterpret_cast<const ReconstructRequest*>(
               &_ReconstructRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReconstructRequest& a, ReconstructRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconstructRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReconstructRequest* New() const final {
    return CreateMaybeMessage<ReconstructRequest>(nullptr);
  }

  ReconstructRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReconstructRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReconstructRequest& from);
  void MergeFrom(const ReconstructRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconstructRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReconstructRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // @@protoc_insertion_point(class_scope:ReconstructRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class GetOBJRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetOBJRequest) */ {
 public:
  GetOBJRequest();
  virtual ~GetOBJRequest();

  GetOBJRequest(const GetOBJRequest& from);
  GetOBJRequest(GetOBJRequest&& from) noexcept
    : GetOBJRequest() {
    *this = ::std::move(from);
  }

  inline GetOBJRequest& operator=(const GetOBJRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOBJRequest& operator=(GetOBJRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOBJRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOBJRequest* internal_default_instance() {
    return reinterpret_cast<const GetOBJRequest*>(
               &_GetOBJRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetOBJRequest& a, GetOBJRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOBJRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOBJRequest* New() const final {
    return CreateMaybeMessage<GetOBJRequest>(nullptr);
  }

  GetOBJRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOBJRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOBJRequest& from);
  void MergeFrom(const GetOBJRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOBJRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetOBJRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // @@protoc_insertion_point(class_scope:GetOBJRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class GetOBJResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetOBJResponse) */ {
 public:
  GetOBJResponse();
  virtual ~GetOBJResponse();

  GetOBJResponse(const GetOBJResponse& from);
  GetOBJResponse(GetOBJResponse&& from) noexcept
    : GetOBJResponse() {
    *this = ::std::move(from);
  }

  inline GetOBJResponse& operator=(const GetOBJResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOBJResponse& operator=(GetOBJResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOBJResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOBJResponse* internal_default_instance() {
    return reinterpret_cast<const GetOBJResponse*>(
               &_GetOBJResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetOBJResponse& a, GetOBJResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOBJResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOBJResponse* New() const final {
    return CreateMaybeMessage<GetOBJResponse>(nullptr);
  }

  GetOBJResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOBJResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOBJResponse& from);
  void MergeFrom(const GetOBJResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOBJResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetOBJResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .OBJData obj = 2;
  bool has_obj() const;
  private:
  bool _internal_has_obj() const;
  public:
  void clear_obj();
  const ::OBJData& obj() const;
  ::OBJData* release_obj();
  ::OBJData* mutable_obj();
  void set_allocated_obj(::OBJData* obj);
  private:
  const ::OBJData& _internal_obj() const;
  ::OBJData* _internal_mutable_obj();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GetOBJResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OBJData* obj_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ReconstructResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReconstructResponse) */ {
 public:
  ReconstructResponse();
  virtual ~ReconstructResponse();

  ReconstructResponse(const ReconstructResponse& from);
  ReconstructResponse(ReconstructResponse&& from) noexcept
    : ReconstructResponse() {
    *this = ::std::move(from);
  }

  inline ReconstructResponse& operator=(const ReconstructResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconstructResponse& operator=(ReconstructResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReconstructResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReconstructResponse* internal_default_instance() {
    return reinterpret_cast<const ReconstructResponse*>(
               &_ReconstructResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReconstructResponse& a, ReconstructResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconstructResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReconstructResponse* New() const final {
    return CreateMaybeMessage<ReconstructResponse>(nullptr);
  }

  ReconstructResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReconstructResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReconstructResponse& from);
  void MergeFrom(const ReconstructResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconstructResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReconstructResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_msg = 2;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ReconstructResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ReconstructionOBJ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReconstructionOBJ) */ {
 public:
  ReconstructionOBJ();
  virtual ~ReconstructionOBJ();

  ReconstructionOBJ(const ReconstructionOBJ& from);
  ReconstructionOBJ(ReconstructionOBJ&& from) noexcept
    : ReconstructionOBJ() {
    *this = ::std::move(from);
  }

  inline ReconstructionOBJ& operator=(const ReconstructionOBJ& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconstructionOBJ& operator=(ReconstructionOBJ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReconstructionOBJ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReconstructionOBJ* internal_default_instance() {
    return reinterpret_cast<const ReconstructionOBJ*>(
               &_ReconstructionOBJ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReconstructionOBJ& a, ReconstructionOBJ& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconstructionOBJ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReconstructionOBJ* New() const final {
    return CreateMaybeMessage<ReconstructionOBJ>(nullptr);
  }

  ReconstructionOBJ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReconstructionOBJ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReconstructionOBJ& from);
  void MergeFrom(const ReconstructionOBJ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconstructionOBJ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReconstructionOBJ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 1,
  };
  // bytes obj = 1;
  void clear_obj();
  const std::string& obj() const;
  void set_obj(const std::string& value);
  void set_obj(std::string&& value);
  void set_obj(const char* value);
  void set_obj(const void* value, size_t size);
  std::string* mutable_obj();
  std::string* release_obj();
  void set_allocated_obj(std::string* obj);
  private:
  const std::string& _internal_obj() const;
  void _internal_set_obj(const std::string& value);
  std::string* _internal_mutable_obj();
  public:

  // @@protoc_insertion_point(class_scope:ReconstructionOBJ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class DeleteReconstructionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteReconstructionRequest) */ {
 public:
  DeleteReconstructionRequest();
  virtual ~DeleteReconstructionRequest();

  DeleteReconstructionRequest(const DeleteReconstructionRequest& from);
  DeleteReconstructionRequest(DeleteReconstructionRequest&& from) noexcept
    : DeleteReconstructionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteReconstructionRequest& operator=(const DeleteReconstructionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteReconstructionRequest& operator=(DeleteReconstructionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteReconstructionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteReconstructionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteReconstructionRequest*>(
               &_DeleteReconstructionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeleteReconstructionRequest& a, DeleteReconstructionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteReconstructionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteReconstructionRequest* New() const final {
    return CreateMaybeMessage<DeleteReconstructionRequest>(nullptr);
  }

  DeleteReconstructionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteReconstructionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteReconstructionRequest& from);
  void MergeFrom(const DeleteReconstructionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteReconstructionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteReconstructionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:DeleteReconstructionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class DeleteReconstructionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteReconstructionResponse) */ {
 public:
  DeleteReconstructionResponse();
  virtual ~DeleteReconstructionResponse();

  DeleteReconstructionResponse(const DeleteReconstructionResponse& from);
  DeleteReconstructionResponse(DeleteReconstructionResponse&& from) noexcept
    : DeleteReconstructionResponse() {
    *this = ::std::move(from);
  }

  inline DeleteReconstructionResponse& operator=(const DeleteReconstructionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteReconstructionResponse& operator=(DeleteReconstructionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteReconstructionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteReconstructionResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteReconstructionResponse*>(
               &_DeleteReconstructionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeleteReconstructionResponse& a, DeleteReconstructionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteReconstructionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteReconstructionResponse* New() const final {
    return CreateMaybeMessage<DeleteReconstructionResponse>(nullptr);
  }

  DeleteReconstructionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteReconstructionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteReconstructionResponse& from);
  void MergeFrom(const DeleteReconstructionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteReconstructionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteReconstructionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DeleteReconstructionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class CameraIntrinsics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CameraIntrinsics) */ {
 public:
  CameraIntrinsics();
  virtual ~CameraIntrinsics();

  CameraIntrinsics(const CameraIntrinsics& from);
  CameraIntrinsics(CameraIntrinsics&& from) noexcept
    : CameraIntrinsics() {
    *this = ::std::move(from);
  }

  inline CameraIntrinsics& operator=(const CameraIntrinsics& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraIntrinsics& operator=(CameraIntrinsics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraIntrinsics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraIntrinsics* internal_default_instance() {
    return reinterpret_cast<const CameraIntrinsics*>(
               &_CameraIntrinsics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CameraIntrinsics& a, CameraIntrinsics& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraIntrinsics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraIntrinsics* New() const final {
    return CreateMaybeMessage<CameraIntrinsics>(nullptr);
  }

  CameraIntrinsics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraIntrinsics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraIntrinsics& from);
  void MergeFrom(const CameraIntrinsics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraIntrinsics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CameraIntrinsics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kMakerFieldNumber = 2,
    kNumericModelFieldNumber = 3,
    kFocusModeFieldNumber = 5,
    kSensorSizeFieldNumber = 4,
    kHorizontalViewAngleFieldNumber = 6,
    kJpegQualityFieldNumber = 7,
  };
  // string model = 1;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string maker = 2;
  void clear_maker();
  const std::string& maker() const;
  void set_maker(const std::string& value);
  void set_maker(std::string&& value);
  void set_maker(const char* value);
  void set_maker(const char* value, size_t size);
  std::string* mutable_maker();
  std::string* release_maker();
  void set_allocated_maker(std::string* maker);
  private:
  const std::string& _internal_maker() const;
  void _internal_set_maker(const std::string& value);
  std::string* _internal_mutable_maker();
  public:

  // string numeric_model = 3;
  void clear_numeric_model();
  const std::string& numeric_model() const;
  void set_numeric_model(const std::string& value);
  void set_numeric_model(std::string&& value);
  void set_numeric_model(const char* value);
  void set_numeric_model(const char* value, size_t size);
  std::string* mutable_numeric_model();
  std::string* release_numeric_model();
  void set_allocated_numeric_model(std::string* numeric_model);
  private:
  const std::string& _internal_numeric_model() const;
  void _internal_set_numeric_model(const std::string& value);
  std::string* _internal_mutable_numeric_model();
  public:

  // string focus_mode = 5;
  void clear_focus_mode();
  const std::string& focus_mode() const;
  void set_focus_mode(const std::string& value);
  void set_focus_mode(std::string&& value);
  void set_focus_mode(const char* value);
  void set_focus_mode(const char* value, size_t size);
  std::string* mutable_focus_mode();
  std::string* release_focus_mode();
  void set_allocated_focus_mode(std::string* focus_mode);
  private:
  const std::string& _internal_focus_mode() const;
  void _internal_set_focus_mode(const std::string& value);
  std::string* _internal_mutable_focus_mode();
  public:

  // float sensor_size = 4;
  void clear_sensor_size();
  float sensor_size() const;
  void set_sensor_size(float value);
  private:
  float _internal_sensor_size() const;
  void _internal_set_sensor_size(float value);
  public:

  // float horizontal_view_angle = 6;
  void clear_horizontal_view_angle();
  float horizontal_view_angle() const;
  void set_horizontal_view_angle(float value);
  private:
  float _internal_horizontal_view_angle() const;
  void _internal_set_horizontal_view_angle(float value);
  public:

  // int32 jpeg_quality = 7;
  void clear_jpeg_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 jpeg_quality() const;
  void set_jpeg_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_jpeg_quality() const;
  void _internal_set_jpeg_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CameraIntrinsics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr numeric_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr focus_mode_;
  float sensor_size_;
  float horizontal_view_angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 jpeg_quality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class HandhsakeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HandhsakeRequest) */ {
 public:
  HandhsakeRequest();
  virtual ~HandhsakeRequest();

  HandhsakeRequest(const HandhsakeRequest& from);
  HandhsakeRequest(HandhsakeRequest&& from) noexcept
    : HandhsakeRequest() {
    *this = ::std::move(from);
  }

  inline HandhsakeRequest& operator=(const HandhsakeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandhsakeRequest& operator=(HandhsakeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandhsakeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandhsakeRequest* internal_default_instance() {
    return reinterpret_cast<const HandhsakeRequest*>(
               &_HandhsakeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(HandhsakeRequest& a, HandhsakeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandhsakeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandhsakeRequest* New() const final {
    return CreateMaybeMessage<HandhsakeRequest>(nullptr);
  }

  HandhsakeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandhsakeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandhsakeRequest& from);
  void MergeFrom(const HandhsakeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandhsakeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HandhsakeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kCameraIntrinsicsFieldNumber = 2,
  };
  // string identifier = 1;
  void clear_identifier();
  const std::string& identifier() const;
  void set_identifier(const std::string& value);
  void set_identifier(std::string&& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // .CameraIntrinsics camera_intrinsics = 2;
  bool has_camera_intrinsics() const;
  private:
  bool _internal_has_camera_intrinsics() const;
  public:
  void clear_camera_intrinsics();
  const ::CameraIntrinsics& camera_intrinsics() const;
  ::CameraIntrinsics* release_camera_intrinsics();
  ::CameraIntrinsics* mutable_camera_intrinsics();
  void set_allocated_camera_intrinsics(::CameraIntrinsics* camera_intrinsics);
  private:
  const ::CameraIntrinsics& _internal_camera_intrinsics() const;
  ::CameraIntrinsics* _internal_mutable_camera_intrinsics();
  public:

  // @@protoc_insertion_point(class_scope:HandhsakeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::CameraIntrinsics* camera_intrinsics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class HandshakeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HandshakeResponse) */ {
 public:
  HandshakeResponse();
  virtual ~HandshakeResponse();

  HandshakeResponse(const HandshakeResponse& from);
  HandshakeResponse(HandshakeResponse&& from) noexcept
    : HandshakeResponse() {
    *this = ::std::move(from);
  }

  inline HandshakeResponse& operator=(const HandshakeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeResponse& operator=(HandshakeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandshakeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandshakeResponse* internal_default_instance() {
    return reinterpret_cast<const HandshakeResponse*>(
               &_HandshakeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(HandshakeResponse& a, HandshakeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandshakeResponse* New() const final {
    return CreateMaybeMessage<HandshakeResponse>(nullptr);
  }

  HandshakeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandshakeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandshakeResponse& from);
  void MergeFrom(const HandshakeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandshakeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HandshakeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HandshakeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class StartSessionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StartSessionRequest) */ {
 public:
  StartSessionRequest();
  virtual ~StartSessionRequest();

  StartSessionRequest(const StartSessionRequest& from);
  StartSessionRequest(StartSessionRequest&& from) noexcept
    : StartSessionRequest() {
    *this = ::std::move(from);
  }

  inline StartSessionRequest& operator=(const StartSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartSessionRequest& operator=(StartSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartSessionRequest* internal_default_instance() {
    return reinterpret_cast<const StartSessionRequest*>(
               &_StartSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StartSessionRequest& a, StartSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartSessionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartSessionRequest* New() const final {
    return CreateMaybeMessage<StartSessionRequest>(nullptr);
  }

  StartSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartSessionRequest& from);
  void MergeFrom(const StartSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StartSessionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // @@protoc_insertion_point(class_scope:StartSessionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class StartSessionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StartSessionResponse) */ {
 public:
  StartSessionResponse();
  virtual ~StartSessionResponse();

  StartSessionResponse(const StartSessionResponse& from);
  StartSessionResponse(StartSessionResponse&& from) noexcept
    : StartSessionResponse() {
    *this = ::std::move(from);
  }

  inline StartSessionResponse& operator=(const StartSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartSessionResponse& operator=(StartSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartSessionResponse* internal_default_instance() {
    return reinterpret_cast<const StartSessionResponse*>(
               &_StartSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StartSessionResponse& a, StartSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartSessionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartSessionResponse* New() const final {
    return CreateMaybeMessage<StartSessionResponse>(nullptr);
  }

  StartSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartSessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartSessionResponse& from);
  void MergeFrom(const StartSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StartSessionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // string session_id = 2;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:StartSessionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class StopSessionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StopSessionRequest) */ {
 public:
  StopSessionRequest();
  virtual ~StopSessionRequest();

  StopSessionRequest(const StopSessionRequest& from);
  StopSessionRequest(StopSessionRequest&& from) noexcept
    : StopSessionRequest() {
    *this = ::std::move(from);
  }

  inline StopSessionRequest& operator=(const StopSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopSessionRequest& operator=(StopSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopSessionRequest* internal_default_instance() {
    return reinterpret_cast<const StopSessionRequest*>(
               &_StopSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StopSessionRequest& a, StopSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopSessionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopSessionRequest* New() const final {
    return CreateMaybeMessage<StopSessionRequest>(nullptr);
  }

  StopSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopSessionRequest& from);
  void MergeFrom(const StopSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StopSessionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:StopSessionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class StopSessionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StopSessionResponse) */ {
 public:
  StopSessionResponse();
  virtual ~StopSessionResponse();

  StopSessionResponse(const StopSessionResponse& from);
  StopSessionResponse(StopSessionResponse&& from) noexcept
    : StopSessionResponse() {
    *this = ::std::move(from);
  }

  inline StopSessionResponse& operator=(const StopSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopSessionResponse& operator=(StopSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopSessionResponse* internal_default_instance() {
    return reinterpret_cast<const StopSessionResponse*>(
               &_StopSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(StopSessionResponse& a, StopSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopSessionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopSessionResponse* New() const final {
    return CreateMaybeMessage<StopSessionResponse>(nullptr);
  }

  StopSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopSessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopSessionResponse& from);
  void MergeFrom(const StopSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StopSessionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:StopSessionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class SessionAddImageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SessionAddImageRequest) */ {
 public:
  SessionAddImageRequest();
  virtual ~SessionAddImageRequest();

  SessionAddImageRequest(const SessionAddImageRequest& from);
  SessionAddImageRequest(SessionAddImageRequest&& from) noexcept
    : SessionAddImageRequest() {
    *this = ::std::move(from);
  }

  inline SessionAddImageRequest& operator=(const SessionAddImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionAddImageRequest& operator=(SessionAddImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionAddImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionAddImageRequest* internal_default_instance() {
    return reinterpret_cast<const SessionAddImageRequest*>(
               &_SessionAddImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SessionAddImageRequest& a, SessionAddImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionAddImageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionAddImageRequest* New() const final {
    return CreateMaybeMessage<SessionAddImageRequest>(nullptr);
  }

  SessionAddImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionAddImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionAddImageRequest& from);
  void MergeFrom(const SessionAddImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionAddImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SessionAddImageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kUploadImageFieldNumber = 2,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .StoreImageRequest upload_image = 2;
  bool has_upload_image() const;
  private:
  bool _internal_has_upload_image() const;
  public:
  void clear_upload_image();
  const ::StoreImageRequest& upload_image() const;
  ::StoreImageRequest* release_upload_image();
  ::StoreImageRequest* mutable_upload_image();
  void set_allocated_upload_image(::StoreImageRequest* upload_image);
  private:
  const ::StoreImageRequest& _internal_upload_image() const;
  ::StoreImageRequest* _internal_mutable_upload_image();
  public:

  // @@protoc_insertion_point(class_scope:SessionAddImageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::StoreImageRequest* upload_image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class SessionAddImageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SessionAddImageResponse) */ {
 public:
  SessionAddImageResponse();
  virtual ~SessionAddImageResponse();

  SessionAddImageResponse(const SessionAddImageResponse& from);
  SessionAddImageResponse(SessionAddImageResponse&& from) noexcept
    : SessionAddImageResponse() {
    *this = ::std::move(from);
  }

  inline SessionAddImageResponse& operator=(const SessionAddImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionAddImageResponse& operator=(SessionAddImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionAddImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionAddImageResponse* internal_default_instance() {
    return reinterpret_cast<const SessionAddImageResponse*>(
               &_SessionAddImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SessionAddImageResponse& a, SessionAddImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionAddImageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionAddImageResponse* New() const final {
    return CreateMaybeMessage<SessionAddImageResponse>(nullptr);
  }

  SessionAddImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionAddImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionAddImageResponse& from);
  void MergeFrom(const SessionAddImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionAddImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SessionAddImageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SessionAddImageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class GetSparseRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSparseRequest) */ {
 public:
  GetSparseRequest();
  virtual ~GetSparseRequest();

  GetSparseRequest(const GetSparseRequest& from);
  GetSparseRequest(GetSparseRequest&& from) noexcept
    : GetSparseRequest() {
    *this = ::std::move(from);
  }

  inline GetSparseRequest& operator=(const GetSparseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSparseRequest& operator=(GetSparseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSparseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSparseRequest* internal_default_instance() {
    return reinterpret_cast<const GetSparseRequest*>(
               &_GetSparseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetSparseRequest& a, GetSparseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSparseRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSparseRequest* New() const final {
    return CreateMaybeMessage<GetSparseRequest>(nullptr);
  }

  GetSparseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSparseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSparseRequest& from);
  void MergeFrom(const GetSparseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSparseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSparseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // @@protoc_insertion_point(class_scope:GetSparseRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class GetSparseResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSparseResponse) */ {
 public:
  GetSparseResponse();
  virtual ~GetSparseResponse();

  GetSparseResponse(const GetSparseResponse& from);
  GetSparseResponse(GetSparseResponse&& from) noexcept
    : GetSparseResponse() {
    *this = ::std::move(from);
  }

  inline GetSparseResponse& operator=(const GetSparseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSparseResponse& operator=(GetSparseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSparseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSparseResponse* internal_default_instance() {
    return reinterpret_cast<const GetSparseResponse*>(
               &_GetSparseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetSparseResponse& a, GetSparseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSparseResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSparseResponse* New() const final {
    return CreateMaybeMessage<GetSparseResponse>(nullptr);
  }

  GetSparseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSparseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSparseResponse& from);
  void MergeFrom(const GetSparseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSparseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSparseResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSparseFieldNumber = 1,
  };
  // .SparsePointCloudData sparse = 1;
  bool has_sparse() const;
  private:
  bool _internal_has_sparse() const;
  public:
  void clear_sparse();
  const ::SparsePointCloudData& sparse() const;
  ::SparsePointCloudData* release_sparse();
  ::SparsePointCloudData* mutable_sparse();
  void set_allocated_sparse(::SparsePointCloudData* sparse);
  private:
  const ::SparsePointCloudData& _internal_sparse() const;
  ::SparsePointCloudData* _internal_mutable_sparse();
  public:

  // @@protoc_insertion_point(class_scope:GetSparseResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::SparsePointCloudData* sparse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class SetReconstructionConfigRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetReconstructionConfigRequest) */ {
 public:
  SetReconstructionConfigRequest();
  virtual ~SetReconstructionConfigRequest();

  SetReconstructionConfigRequest(const SetReconstructionConfigRequest& from);
  SetReconstructionConfigRequest(SetReconstructionConfigRequest&& from) noexcept
    : SetReconstructionConfigRequest() {
    *this = ::std::move(from);
  }

  inline SetReconstructionConfigRequest& operator=(const SetReconstructionConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetReconstructionConfigRequest& operator=(SetReconstructionConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetReconstructionConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetReconstructionConfigRequest* internal_default_instance() {
    return reinterpret_cast<const SetReconstructionConfigRequest*>(
               &_SetReconstructionConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SetReconstructionConfigRequest& a, SetReconstructionConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetReconstructionConfigRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetReconstructionConfigRequest* New() const final {
    return CreateMaybeMessage<SetReconstructionConfigRequest>(nullptr);
  }

  SetReconstructionConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetReconstructionConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetReconstructionConfigRequest& from);
  void MergeFrom(const SetReconstructionConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetReconstructionConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetReconstructionConfigRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
    kConfigJsonFieldNumber = 2,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // string config_json = 2;
  void clear_config_json();
  const std::string& config_json() const;
  void set_config_json(const std::string& value);
  void set_config_json(std::string&& value);
  void set_config_json(const char* value);
  void set_config_json(const char* value, size_t size);
  std::string* mutable_config_json();
  std::string* release_config_json();
  void set_allocated_config_json(std::string* config_json);
  private:
  const std::string& _internal_config_json() const;
  void _internal_set_config_json(const std::string& value);
  std::string* _internal_mutable_config_json();
  public:

  // @@protoc_insertion_point(class_scope:SetReconstructionConfigRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class SetReconstructionConfigResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetReconstructionConfigResponse) */ {
 public:
  SetReconstructionConfigResponse();
  virtual ~SetReconstructionConfigResponse();

  SetReconstructionConfigResponse(const SetReconstructionConfigResponse& from);
  SetReconstructionConfigResponse(SetReconstructionConfigResponse&& from) noexcept
    : SetReconstructionConfigResponse() {
    *this = ::std::move(from);
  }

  inline SetReconstructionConfigResponse& operator=(const SetReconstructionConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetReconstructionConfigResponse& operator=(SetReconstructionConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetReconstructionConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetReconstructionConfigResponse* internal_default_instance() {
    return reinterpret_cast<const SetReconstructionConfigResponse*>(
               &_SetReconstructionConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SetReconstructionConfigResponse& a, SetReconstructionConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetReconstructionConfigResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetReconstructionConfigResponse* New() const final {
    return CreateMaybeMessage<SetReconstructionConfigResponse>(nullptr);
  }

  SetReconstructionConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetReconstructionConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetReconstructionConfigResponse& from);
  void MergeFrom(const SetReconstructionConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetReconstructionConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetReconstructionConfigResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SetReconstructionConfigResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class GetReconstructionConfigRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetReconstructionConfigRequest) */ {
 public:
  GetReconstructionConfigRequest();
  virtual ~GetReconstructionConfigRequest();

  GetReconstructionConfigRequest(const GetReconstructionConfigRequest& from);
  GetReconstructionConfigRequest(GetReconstructionConfigRequest&& from) noexcept
    : GetReconstructionConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetReconstructionConfigRequest& operator=(const GetReconstructionConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReconstructionConfigRequest& operator=(GetReconstructionConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetReconstructionConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReconstructionConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetReconstructionConfigRequest*>(
               &_GetReconstructionConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetReconstructionConfigRequest& a, GetReconstructionConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReconstructionConfigRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReconstructionConfigRequest* New() const final {
    return CreateMaybeMessage<GetReconstructionConfigRequest>(nullptr);
  }

  GetReconstructionConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReconstructionConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetReconstructionConfigRequest& from);
  void MergeFrom(const GetReconstructionConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReconstructionConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetReconstructionConfigRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // @@protoc_insertion_point(class_scope:GetReconstructionConfigRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class GetReconstructionConfigResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetReconstructionConfigResponse) */ {
 public:
  GetReconstructionConfigResponse();
  virtual ~GetReconstructionConfigResponse();

  GetReconstructionConfigResponse(const GetReconstructionConfigResponse& from);
  GetReconstructionConfigResponse(GetReconstructionConfigResponse&& from) noexcept
    : GetReconstructionConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetReconstructionConfigResponse& operator=(const GetReconstructionConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReconstructionConfigResponse& operator=(GetReconstructionConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetReconstructionConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReconstructionConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetReconstructionConfigResponse*>(
               &_GetReconstructionConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetReconstructionConfigResponse& a, GetReconstructionConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReconstructionConfigResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReconstructionConfigResponse* New() const final {
    return CreateMaybeMessage<GetReconstructionConfigResponse>(nullptr);
  }

  GetReconstructionConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReconstructionConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetReconstructionConfigResponse& from);
  void MergeFrom(const GetReconstructionConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReconstructionConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetReconstructionConfigResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigJsonFieldNumber = 1,
  };
  // string config_json = 1;
  void clear_config_json();
  const std::string& config_json() const;
  void set_config_json(const std::string& value);
  void set_config_json(std::string&& value);
  void set_config_json(const char* value);
  void set_config_json(const char* value, size_t size);
  std::string* mutable_config_json();
  std::string* release_config_json();
  void set_allocated_config_json(std::string* config_json);
  private:
  const std::string& _internal_config_json() const;
  void _internal_set_config_json(const std::string& value);
  std::string* _internal_mutable_config_json();
  public:

  // @@protoc_insertion_point(class_scope:GetReconstructionConfigResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ReconstructionUploadImageBatchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReconstructionUploadImageBatchRequest) */ {
 public:
  ReconstructionUploadImageBatchRequest();
  virtual ~ReconstructionUploadImageBatchRequest();

  ReconstructionUploadImageBatchRequest(const ReconstructionUploadImageBatchRequest& from);
  ReconstructionUploadImageBatchRequest(ReconstructionUploadImageBatchRequest&& from) noexcept
    : ReconstructionUploadImageBatchRequest() {
    *this = ::std::move(from);
  }

  inline ReconstructionUploadImageBatchRequest& operator=(const ReconstructionUploadImageBatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconstructionUploadImageBatchRequest& operator=(ReconstructionUploadImageBatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReconstructionUploadImageBatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReconstructionUploadImageBatchRequest* internal_default_instance() {
    return reinterpret_cast<const ReconstructionUploadImageBatchRequest*>(
               &_ReconstructionUploadImageBatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ReconstructionUploadImageBatchRequest& a, ReconstructionUploadImageBatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconstructionUploadImageBatchRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReconstructionUploadImageBatchRequest* New() const final {
    return CreateMaybeMessage<ReconstructionUploadImageBatchRequest>(nullptr);
  }

  ReconstructionUploadImageBatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReconstructionUploadImageBatchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReconstructionUploadImageBatchRequest& from);
  void MergeFrom(const ReconstructionUploadImageBatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconstructionUploadImageBatchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReconstructionUploadImageBatchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdxFieldNumber = 1,
  };
  // .ImageData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::ImageData& data() const;
  ::ImageData* release_data();
  ::ImageData* mutable_data();
  void set_allocated_data(::ImageData* data);
  private:
  const ::ImageData& _internal_data() const;
  ::ImageData* _internal_mutable_data();
  public:

  // int32 idx = 1;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReconstructionUploadImageBatchRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ImageData* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ReconstructionUploadImageBatchResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReconstructionUploadImageBatchResponse) */ {
 public:
  ReconstructionUploadImageBatchResponse();
  virtual ~ReconstructionUploadImageBatchResponse();

  ReconstructionUploadImageBatchResponse(const ReconstructionUploadImageBatchResponse& from);
  ReconstructionUploadImageBatchResponse(ReconstructionUploadImageBatchResponse&& from) noexcept
    : ReconstructionUploadImageBatchResponse() {
    *this = ::std::move(from);
  }

  inline ReconstructionUploadImageBatchResponse& operator=(const ReconstructionUploadImageBatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconstructionUploadImageBatchResponse& operator=(ReconstructionUploadImageBatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReconstructionUploadImageBatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReconstructionUploadImageBatchResponse* internal_default_instance() {
    return reinterpret_cast<const ReconstructionUploadImageBatchResponse*>(
               &_ReconstructionUploadImageBatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ReconstructionUploadImageBatchResponse& a, ReconstructionUploadImageBatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconstructionUploadImageBatchResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReconstructionUploadImageBatchResponse* New() const final {
    return CreateMaybeMessage<ReconstructionUploadImageBatchResponse>(nullptr);
  }

  ReconstructionUploadImageBatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReconstructionUploadImageBatchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReconstructionUploadImageBatchResponse& from);
  void MergeFrom(const ReconstructionUploadImageBatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconstructionUploadImageBatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReconstructionUploadImageBatchResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesUploadedFieldNumber = 1,
  };
  // int32 images_uploaded = 1;
  void clear_images_uploaded();
  ::PROTOBUF_NAMESPACE_ID::int32 images_uploaded() const;
  void set_images_uploaded(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_images_uploaded() const;
  void _internal_set_images_uploaded(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReconstructionUploadImageBatchResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 images_uploaded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageMetaData

// string id = 1;
inline void ImageMetaData::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImageMetaData::id() const {
  // @@protoc_insertion_point(field_get:ImageMetaData.id)
  return _internal_id();
}
inline void ImageMetaData::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ImageMetaData.id)
}
inline std::string* ImageMetaData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ImageMetaData.id)
  return _internal_mutable_id();
}
inline const std::string& ImageMetaData::_internal_id() const {
  return id_.GetNoArena();
}
inline void ImageMetaData::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImageMetaData::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageMetaData.id)
}
inline void ImageMetaData::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageMetaData.id)
}
inline void ImageMetaData::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageMetaData.id)
}
inline std::string* ImageMetaData::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageMetaData::release_id() {
  // @@protoc_insertion_point(field_release:ImageMetaData.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMetaData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ImageMetaData.id)
}

// string reconstruction = 2;
inline void ImageMetaData::clear_reconstruction() {
  reconstruction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImageMetaData::reconstruction() const {
  // @@protoc_insertion_point(field_get:ImageMetaData.reconstruction)
  return _internal_reconstruction();
}
inline void ImageMetaData::set_reconstruction(const std::string& value) {
  _internal_set_reconstruction(value);
  // @@protoc_insertion_point(field_set:ImageMetaData.reconstruction)
}
inline std::string* ImageMetaData::mutable_reconstruction() {
  // @@protoc_insertion_point(field_mutable:ImageMetaData.reconstruction)
  return _internal_mutable_reconstruction();
}
inline const std::string& ImageMetaData::_internal_reconstruction() const {
  return reconstruction_.GetNoArena();
}
inline void ImageMetaData::_internal_set_reconstruction(const std::string& value) {
  
  reconstruction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImageMetaData::set_reconstruction(std::string&& value) {
  
  reconstruction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageMetaData.reconstruction)
}
inline void ImageMetaData::set_reconstruction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageMetaData.reconstruction)
}
inline void ImageMetaData::set_reconstruction(const char* value, size_t size) {
  
  reconstruction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageMetaData.reconstruction)
}
inline std::string* ImageMetaData::_internal_mutable_reconstruction() {
  
  return reconstruction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageMetaData::release_reconstruction() {
  // @@protoc_insertion_point(field_release:ImageMetaData.reconstruction)
  
  return reconstruction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMetaData::set_allocated_reconstruction(std::string* reconstruction) {
  if (reconstruction != nullptr) {
    
  } else {
    
  }
  reconstruction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction);
  // @@protoc_insertion_point(field_set_allocated:ImageMetaData.reconstruction)
}

// string path = 3;
inline void ImageMetaData::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImageMetaData::path() const {
  // @@protoc_insertion_point(field_get:ImageMetaData.path)
  return _internal_path();
}
inline void ImageMetaData::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ImageMetaData.path)
}
inline std::string* ImageMetaData::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ImageMetaData.path)
  return _internal_mutable_path();
}
inline const std::string& ImageMetaData::_internal_path() const {
  return path_.GetNoArena();
}
inline void ImageMetaData::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImageMetaData::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageMetaData.path)
}
inline void ImageMetaData::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageMetaData.path)
}
inline void ImageMetaData::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageMetaData.path)
}
inline std::string* ImageMetaData::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageMetaData::release_path() {
  // @@protoc_insertion_point(field_release:ImageMetaData.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMetaData::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ImageMetaData.path)
}

// string format = 4;
inline void ImageMetaData::clear_format() {
  format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImageMetaData::format() const {
  // @@protoc_insertion_point(field_get:ImageMetaData.format)
  return _internal_format();
}
inline void ImageMetaData::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:ImageMetaData.format)
}
inline std::string* ImageMetaData::mutable_format() {
  // @@protoc_insertion_point(field_mutable:ImageMetaData.format)
  return _internal_mutable_format();
}
inline const std::string& ImageMetaData::_internal_format() const {
  return format_.GetNoArena();
}
inline void ImageMetaData::_internal_set_format(const std::string& value) {
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImageMetaData::set_format(std::string&& value) {
  
  format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageMetaData.format)
}
inline void ImageMetaData::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageMetaData.format)
}
inline void ImageMetaData::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageMetaData.format)
}
inline std::string* ImageMetaData::_internal_mutable_format() {
  
  return format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageMetaData::release_format() {
  // @@protoc_insertion_point(field_release:ImageMetaData.format)
  
  return format_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMetaData::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:ImageMetaData.format)
}

// -------------------------------------------------------------------

// ImageData

// bytes data = 1;
inline void ImageData::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImageData::data() const {
  // @@protoc_insertion_point(field_get:ImageData.data)
  return _internal_data();
}
inline void ImageData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ImageData.data)
}
inline std::string* ImageData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ImageData.data)
  return _internal_mutable_data();
}
inline const std::string& ImageData::_internal_data() const {
  return data_.GetNoArena();
}
inline void ImageData::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImageData::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageData.data)
}
inline void ImageData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageData.data)
}
inline void ImageData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageData.data)
}
inline std::string* ImageData::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageData::release_data() {
  // @@protoc_insertion_point(field_release:ImageData.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ImageData.data)
}

// .ImageMetaData metadata = 2;
inline bool ImageData::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool ImageData::has_metadata() const {
  return _internal_has_metadata();
}
inline void ImageData::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::ImageMetaData& ImageData::_internal_metadata() const {
  const ::ImageMetaData* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ImageMetaData*>(
      &::_ImageMetaData_default_instance_);
}
inline const ::ImageMetaData& ImageData::metadata() const {
  // @@protoc_insertion_point(field_get:ImageData.metadata)
  return _internal_metadata();
}
inline ::ImageMetaData* ImageData::release_metadata() {
  // @@protoc_insertion_point(field_release:ImageData.metadata)
  
  ::ImageMetaData* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::ImageMetaData* ImageData::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::ImageMetaData>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline ::ImageMetaData* ImageData::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:ImageData.metadata)
  return _internal_mutable_metadata();
}
inline void ImageData::set_allocated_metadata(::ImageMetaData* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:ImageData.metadata)
}

// -------------------------------------------------------------------

// SparsePointCloudData

// bytes data = 1;
inline void SparsePointCloudData::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SparsePointCloudData::data() const {
  // @@protoc_insertion_point(field_get:SparsePointCloudData.data)
  return _internal_data();
}
inline void SparsePointCloudData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:SparsePointCloudData.data)
}
inline std::string* SparsePointCloudData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:SparsePointCloudData.data)
  return _internal_mutable_data();
}
inline const std::string& SparsePointCloudData::_internal_data() const {
  return data_.GetNoArena();
}
inline void SparsePointCloudData::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparsePointCloudData::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SparsePointCloudData.data)
}
inline void SparsePointCloudData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SparsePointCloudData.data)
}
inline void SparsePointCloudData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SparsePointCloudData.data)
}
inline std::string* SparsePointCloudData::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparsePointCloudData::release_data() {
  // @@protoc_insertion_point(field_release:SparsePointCloudData.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparsePointCloudData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:SparsePointCloudData.data)
}

// .SparsePointCloudMetaData metadata = 2;
inline bool SparsePointCloudData::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SparsePointCloudData::has_metadata() const {
  return _internal_has_metadata();
}
inline void SparsePointCloudData::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::SparsePointCloudMetaData& SparsePointCloudData::_internal_metadata() const {
  const ::SparsePointCloudMetaData* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SparsePointCloudMetaData*>(
      &::_SparsePointCloudMetaData_default_instance_);
}
inline const ::SparsePointCloudMetaData& SparsePointCloudData::metadata() const {
  // @@protoc_insertion_point(field_get:SparsePointCloudData.metadata)
  return _internal_metadata();
}
inline ::SparsePointCloudMetaData* SparsePointCloudData::release_metadata() {
  // @@protoc_insertion_point(field_release:SparsePointCloudData.metadata)
  
  ::SparsePointCloudMetaData* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::SparsePointCloudMetaData* SparsePointCloudData::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::SparsePointCloudMetaData>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline ::SparsePointCloudMetaData* SparsePointCloudData::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:SparsePointCloudData.metadata)
  return _internal_mutable_metadata();
}
inline void SparsePointCloudData::set_allocated_metadata(::SparsePointCloudMetaData* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:SparsePointCloudData.metadata)
}

// -------------------------------------------------------------------

// SparsePointCloudMetaData

// string id = 1;
inline void SparsePointCloudMetaData::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SparsePointCloudMetaData::id() const {
  // @@protoc_insertion_point(field_get:SparsePointCloudMetaData.id)
  return _internal_id();
}
inline void SparsePointCloudMetaData::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SparsePointCloudMetaData.id)
}
inline std::string* SparsePointCloudMetaData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SparsePointCloudMetaData.id)
  return _internal_mutable_id();
}
inline const std::string& SparsePointCloudMetaData::_internal_id() const {
  return id_.GetNoArena();
}
inline void SparsePointCloudMetaData::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparsePointCloudMetaData::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SparsePointCloudMetaData.id)
}
inline void SparsePointCloudMetaData::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SparsePointCloudMetaData.id)
}
inline void SparsePointCloudMetaData::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SparsePointCloudMetaData.id)
}
inline std::string* SparsePointCloudMetaData::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparsePointCloudMetaData::release_id() {
  // @@protoc_insertion_point(field_release:SparsePointCloudMetaData.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparsePointCloudMetaData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SparsePointCloudMetaData.id)
}

// string reconstruction = 2;
inline void SparsePointCloudMetaData::clear_reconstruction() {
  reconstruction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SparsePointCloudMetaData::reconstruction() const {
  // @@protoc_insertion_point(field_get:SparsePointCloudMetaData.reconstruction)
  return _internal_reconstruction();
}
inline void SparsePointCloudMetaData::set_reconstruction(const std::string& value) {
  _internal_set_reconstruction(value);
  // @@protoc_insertion_point(field_set:SparsePointCloudMetaData.reconstruction)
}
inline std::string* SparsePointCloudMetaData::mutable_reconstruction() {
  // @@protoc_insertion_point(field_mutable:SparsePointCloudMetaData.reconstruction)
  return _internal_mutable_reconstruction();
}
inline const std::string& SparsePointCloudMetaData::_internal_reconstruction() const {
  return reconstruction_.GetNoArena();
}
inline void SparsePointCloudMetaData::_internal_set_reconstruction(const std::string& value) {
  
  reconstruction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparsePointCloudMetaData::set_reconstruction(std::string&& value) {
  
  reconstruction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SparsePointCloudMetaData.reconstruction)
}
inline void SparsePointCloudMetaData::set_reconstruction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SparsePointCloudMetaData.reconstruction)
}
inline void SparsePointCloudMetaData::set_reconstruction(const char* value, size_t size) {
  
  reconstruction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SparsePointCloudMetaData.reconstruction)
}
inline std::string* SparsePointCloudMetaData::_internal_mutable_reconstruction() {
  
  return reconstruction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparsePointCloudMetaData::release_reconstruction() {
  // @@protoc_insertion_point(field_release:SparsePointCloudMetaData.reconstruction)
  
  return reconstruction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparsePointCloudMetaData::set_allocated_reconstruction(std::string* reconstruction) {
  if (reconstruction != nullptr) {
    
  } else {
    
  }
  reconstruction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction);
  // @@protoc_insertion_point(field_set_allocated:SparsePointCloudMetaData.reconstruction)
}

// string mvs_path = 3;
inline void SparsePointCloudMetaData::clear_mvs_path() {
  mvs_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SparsePointCloudMetaData::mvs_path() const {
  // @@protoc_insertion_point(field_get:SparsePointCloudMetaData.mvs_path)
  return _internal_mvs_path();
}
inline void SparsePointCloudMetaData::set_mvs_path(const std::string& value) {
  _internal_set_mvs_path(value);
  // @@protoc_insertion_point(field_set:SparsePointCloudMetaData.mvs_path)
}
inline std::string* SparsePointCloudMetaData::mutable_mvs_path() {
  // @@protoc_insertion_point(field_mutable:SparsePointCloudMetaData.mvs_path)
  return _internal_mutable_mvs_path();
}
inline const std::string& SparsePointCloudMetaData::_internal_mvs_path() const {
  return mvs_path_.GetNoArena();
}
inline void SparsePointCloudMetaData::_internal_set_mvs_path(const std::string& value) {
  
  mvs_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparsePointCloudMetaData::set_mvs_path(std::string&& value) {
  
  mvs_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SparsePointCloudMetaData.mvs_path)
}
inline void SparsePointCloudMetaData::set_mvs_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mvs_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SparsePointCloudMetaData.mvs_path)
}
inline void SparsePointCloudMetaData::set_mvs_path(const char* value, size_t size) {
  
  mvs_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SparsePointCloudMetaData.mvs_path)
}
inline std::string* SparsePointCloudMetaData::_internal_mutable_mvs_path() {
  
  return mvs_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparsePointCloudMetaData::release_mvs_path() {
  // @@protoc_insertion_point(field_release:SparsePointCloudMetaData.mvs_path)
  
  return mvs_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparsePointCloudMetaData::set_allocated_mvs_path(std::string* mvs_path) {
  if (mvs_path != nullptr) {
    
  } else {
    
  }
  mvs_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mvs_path);
  // @@protoc_insertion_point(field_set_allocated:SparsePointCloudMetaData.mvs_path)
}

// string ply_path = 4;
inline void SparsePointCloudMetaData::clear_ply_path() {
  ply_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SparsePointCloudMetaData::ply_path() const {
  // @@protoc_insertion_point(field_get:SparsePointCloudMetaData.ply_path)
  return _internal_ply_path();
}
inline void SparsePointCloudMetaData::set_ply_path(const std::string& value) {
  _internal_set_ply_path(value);
  // @@protoc_insertion_point(field_set:SparsePointCloudMetaData.ply_path)
}
inline std::string* SparsePointCloudMetaData::mutable_ply_path() {
  // @@protoc_insertion_point(field_mutable:SparsePointCloudMetaData.ply_path)
  return _internal_mutable_ply_path();
}
inline const std::string& SparsePointCloudMetaData::_internal_ply_path() const {
  return ply_path_.GetNoArena();
}
inline void SparsePointCloudMetaData::_internal_set_ply_path(const std::string& value) {
  
  ply_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparsePointCloudMetaData::set_ply_path(std::string&& value) {
  
  ply_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SparsePointCloudMetaData.ply_path)
}
inline void SparsePointCloudMetaData::set_ply_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ply_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SparsePointCloudMetaData.ply_path)
}
inline void SparsePointCloudMetaData::set_ply_path(const char* value, size_t size) {
  
  ply_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SparsePointCloudMetaData.ply_path)
}
inline std::string* SparsePointCloudMetaData::_internal_mutable_ply_path() {
  
  return ply_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparsePointCloudMetaData::release_ply_path() {
  // @@protoc_insertion_point(field_release:SparsePointCloudMetaData.ply_path)
  
  return ply_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparsePointCloudMetaData::set_allocated_ply_path(std::string* ply_path) {
  if (ply_path != nullptr) {
    
  } else {
    
  }
  ply_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ply_path);
  // @@protoc_insertion_point(field_set_allocated:SparsePointCloudMetaData.ply_path)
}

// -------------------------------------------------------------------

// OBJMetaData

// string id = 1;
inline void OBJMetaData::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OBJMetaData::id() const {
  // @@protoc_insertion_point(field_get:OBJMetaData.id)
  return _internal_id();
}
inline void OBJMetaData::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:OBJMetaData.id)
}
inline std::string* OBJMetaData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:OBJMetaData.id)
  return _internal_mutable_id();
}
inline const std::string& OBJMetaData::_internal_id() const {
  return id_.GetNoArena();
}
inline void OBJMetaData::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OBJMetaData::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OBJMetaData.id)
}
inline void OBJMetaData::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OBJMetaData.id)
}
inline void OBJMetaData::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OBJMetaData.id)
}
inline std::string* OBJMetaData::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OBJMetaData::release_id() {
  // @@protoc_insertion_point(field_release:OBJMetaData.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OBJMetaData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:OBJMetaData.id)
}

// string reconstruction = 2;
inline void OBJMetaData::clear_reconstruction() {
  reconstruction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OBJMetaData::reconstruction() const {
  // @@protoc_insertion_point(field_get:OBJMetaData.reconstruction)
  return _internal_reconstruction();
}
inline void OBJMetaData::set_reconstruction(const std::string& value) {
  _internal_set_reconstruction(value);
  // @@protoc_insertion_point(field_set:OBJMetaData.reconstruction)
}
inline std::string* OBJMetaData::mutable_reconstruction() {
  // @@protoc_insertion_point(field_mutable:OBJMetaData.reconstruction)
  return _internal_mutable_reconstruction();
}
inline const std::string& OBJMetaData::_internal_reconstruction() const {
  return reconstruction_.GetNoArena();
}
inline void OBJMetaData::_internal_set_reconstruction(const std::string& value) {
  
  reconstruction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OBJMetaData::set_reconstruction(std::string&& value) {
  
  reconstruction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OBJMetaData.reconstruction)
}
inline void OBJMetaData::set_reconstruction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OBJMetaData.reconstruction)
}
inline void OBJMetaData::set_reconstruction(const char* value, size_t size) {
  
  reconstruction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OBJMetaData.reconstruction)
}
inline std::string* OBJMetaData::_internal_mutable_reconstruction() {
  
  return reconstruction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OBJMetaData::release_reconstruction() {
  // @@protoc_insertion_point(field_release:OBJMetaData.reconstruction)
  
  return reconstruction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OBJMetaData::set_allocated_reconstruction(std::string* reconstruction) {
  if (reconstruction != nullptr) {
    
  } else {
    
  }
  reconstruction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction);
  // @@protoc_insertion_point(field_set_allocated:OBJMetaData.reconstruction)
}

// string path = 3;
inline void OBJMetaData::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OBJMetaData::path() const {
  // @@protoc_insertion_point(field_get:OBJMetaData.path)
  return _internal_path();
}
inline void OBJMetaData::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:OBJMetaData.path)
}
inline std::string* OBJMetaData::mutable_path() {
  // @@protoc_insertion_point(field_mutable:OBJMetaData.path)
  return _internal_mutable_path();
}
inline const std::string& OBJMetaData::_internal_path() const {
  return path_.GetNoArena();
}
inline void OBJMetaData::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OBJMetaData::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OBJMetaData.path)
}
inline void OBJMetaData::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OBJMetaData.path)
}
inline void OBJMetaData::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OBJMetaData.path)
}
inline std::string* OBJMetaData::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OBJMetaData::release_path() {
  // @@protoc_insertion_point(field_release:OBJMetaData.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OBJMetaData::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:OBJMetaData.path)
}

// string texture_path = 4;
inline void OBJMetaData::clear_texture_path() {
  texture_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OBJMetaData::texture_path() const {
  // @@protoc_insertion_point(field_get:OBJMetaData.texture_path)
  return _internal_texture_path();
}
inline void OBJMetaData::set_texture_path(const std::string& value) {
  _internal_set_texture_path(value);
  // @@protoc_insertion_point(field_set:OBJMetaData.texture_path)
}
inline std::string* OBJMetaData::mutable_texture_path() {
  // @@protoc_insertion_point(field_mutable:OBJMetaData.texture_path)
  return _internal_mutable_texture_path();
}
inline const std::string& OBJMetaData::_internal_texture_path() const {
  return texture_path_.GetNoArena();
}
inline void OBJMetaData::_internal_set_texture_path(const std::string& value) {
  
  texture_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OBJMetaData::set_texture_path(std::string&& value) {
  
  texture_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OBJMetaData.texture_path)
}
inline void OBJMetaData::set_texture_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  texture_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OBJMetaData.texture_path)
}
inline void OBJMetaData::set_texture_path(const char* value, size_t size) {
  
  texture_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OBJMetaData.texture_path)
}
inline std::string* OBJMetaData::_internal_mutable_texture_path() {
  
  return texture_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OBJMetaData::release_texture_path() {
  // @@protoc_insertion_point(field_release:OBJMetaData.texture_path)
  
  return texture_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OBJMetaData::set_allocated_texture_path(std::string* texture_path) {
  if (texture_path != nullptr) {
    
  } else {
    
  }
  texture_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), texture_path);
  // @@protoc_insertion_point(field_set_allocated:OBJMetaData.texture_path)
}

// string mtl_path = 5;
inline void OBJMetaData::clear_mtl_path() {
  mtl_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OBJMetaData::mtl_path() const {
  // @@protoc_insertion_point(field_get:OBJMetaData.mtl_path)
  return _internal_mtl_path();
}
inline void OBJMetaData::set_mtl_path(const std::string& value) {
  _internal_set_mtl_path(value);
  // @@protoc_insertion_point(field_set:OBJMetaData.mtl_path)
}
inline std::string* OBJMetaData::mutable_mtl_path() {
  // @@protoc_insertion_point(field_mutable:OBJMetaData.mtl_path)
  return _internal_mutable_mtl_path();
}
inline const std::string& OBJMetaData::_internal_mtl_path() const {
  return mtl_path_.GetNoArena();
}
inline void OBJMetaData::_internal_set_mtl_path(const std::string& value) {
  
  mtl_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OBJMetaData::set_mtl_path(std::string&& value) {
  
  mtl_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OBJMetaData.mtl_path)
}
inline void OBJMetaData::set_mtl_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mtl_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OBJMetaData.mtl_path)
}
inline void OBJMetaData::set_mtl_path(const char* value, size_t size) {
  
  mtl_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OBJMetaData.mtl_path)
}
inline std::string* OBJMetaData::_internal_mutable_mtl_path() {
  
  return mtl_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OBJMetaData::release_mtl_path() {
  // @@protoc_insertion_point(field_release:OBJMetaData.mtl_path)
  
  return mtl_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OBJMetaData::set_allocated_mtl_path(std::string* mtl_path) {
  if (mtl_path != nullptr) {
    
  } else {
    
  }
  mtl_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mtl_path);
  // @@protoc_insertion_point(field_set_allocated:OBJMetaData.mtl_path)
}

// -------------------------------------------------------------------

// OBJData

// bytes obj_data = 1;
inline void OBJData::clear_obj_data() {
  obj_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OBJData::obj_data() const {
  // @@protoc_insertion_point(field_get:OBJData.obj_data)
  return _internal_obj_data();
}
inline void OBJData::set_obj_data(const std::string& value) {
  _internal_set_obj_data(value);
  // @@protoc_insertion_point(field_set:OBJData.obj_data)
}
inline std::string* OBJData::mutable_obj_data() {
  // @@protoc_insertion_point(field_mutable:OBJData.obj_data)
  return _internal_mutable_obj_data();
}
inline const std::string& OBJData::_internal_obj_data() const {
  return obj_data_.GetNoArena();
}
inline void OBJData::_internal_set_obj_data(const std::string& value) {
  
  obj_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OBJData::set_obj_data(std::string&& value) {
  
  obj_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OBJData.obj_data)
}
inline void OBJData::set_obj_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OBJData.obj_data)
}
inline void OBJData::set_obj_data(const void* value, size_t size) {
  
  obj_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OBJData.obj_data)
}
inline std::string* OBJData::_internal_mutable_obj_data() {
  
  return obj_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OBJData::release_obj_data() {
  // @@protoc_insertion_point(field_release:OBJData.obj_data)
  
  return obj_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OBJData::set_allocated_obj_data(std::string* obj_data) {
  if (obj_data != nullptr) {
    
  } else {
    
  }
  obj_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_data);
  // @@protoc_insertion_point(field_set_allocated:OBJData.obj_data)
}

// bytes texture_data = 2;
inline void OBJData::clear_texture_data() {
  texture_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OBJData::texture_data() const {
  // @@protoc_insertion_point(field_get:OBJData.texture_data)
  return _internal_texture_data();
}
inline void OBJData::set_texture_data(const std::string& value) {
  _internal_set_texture_data(value);
  // @@protoc_insertion_point(field_set:OBJData.texture_data)
}
inline std::string* OBJData::mutable_texture_data() {
  // @@protoc_insertion_point(field_mutable:OBJData.texture_data)
  return _internal_mutable_texture_data();
}
inline const std::string& OBJData::_internal_texture_data() const {
  return texture_data_.GetNoArena();
}
inline void OBJData::_internal_set_texture_data(const std::string& value) {
  
  texture_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OBJData::set_texture_data(std::string&& value) {
  
  texture_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OBJData.texture_data)
}
inline void OBJData::set_texture_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  texture_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OBJData.texture_data)
}
inline void OBJData::set_texture_data(const void* value, size_t size) {
  
  texture_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OBJData.texture_data)
}
inline std::string* OBJData::_internal_mutable_texture_data() {
  
  return texture_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OBJData::release_texture_data() {
  // @@protoc_insertion_point(field_release:OBJData.texture_data)
  
  return texture_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OBJData::set_allocated_texture_data(std::string* texture_data) {
  if (texture_data != nullptr) {
    
  } else {
    
  }
  texture_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), texture_data);
  // @@protoc_insertion_point(field_set_allocated:OBJData.texture_data)
}

// bytes mtl_data = 3;
inline void OBJData::clear_mtl_data() {
  mtl_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OBJData::mtl_data() const {
  // @@protoc_insertion_point(field_get:OBJData.mtl_data)
  return _internal_mtl_data();
}
inline void OBJData::set_mtl_data(const std::string& value) {
  _internal_set_mtl_data(value);
  // @@protoc_insertion_point(field_set:OBJData.mtl_data)
}
inline std::string* OBJData::mutable_mtl_data() {
  // @@protoc_insertion_point(field_mutable:OBJData.mtl_data)
  return _internal_mutable_mtl_data();
}
inline const std::string& OBJData::_internal_mtl_data() const {
  return mtl_data_.GetNoArena();
}
inline void OBJData::_internal_set_mtl_data(const std::string& value) {
  
  mtl_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OBJData::set_mtl_data(std::string&& value) {
  
  mtl_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OBJData.mtl_data)
}
inline void OBJData::set_mtl_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mtl_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OBJData.mtl_data)
}
inline void OBJData::set_mtl_data(const void* value, size_t size) {
  
  mtl_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OBJData.mtl_data)
}
inline std::string* OBJData::_internal_mutable_mtl_data() {
  
  return mtl_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OBJData::release_mtl_data() {
  // @@protoc_insertion_point(field_release:OBJData.mtl_data)
  
  return mtl_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OBJData::set_allocated_mtl_data(std::string* mtl_data) {
  if (mtl_data != nullptr) {
    
  } else {
    
  }
  mtl_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mtl_data);
  // @@protoc_insertion_point(field_set_allocated:OBJData.mtl_data)
}

// .OBJMetaData metadata = 4;
inline bool OBJData::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool OBJData::has_metadata() const {
  return _internal_has_metadata();
}
inline void OBJData::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::OBJMetaData& OBJData::_internal_metadata() const {
  const ::OBJMetaData* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OBJMetaData*>(
      &::_OBJMetaData_default_instance_);
}
inline const ::OBJMetaData& OBJData::metadata() const {
  // @@protoc_insertion_point(field_get:OBJData.metadata)
  return _internal_metadata();
}
inline ::OBJMetaData* OBJData::release_metadata() {
  // @@protoc_insertion_point(field_release:OBJData.metadata)
  
  ::OBJMetaData* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::OBJMetaData* OBJData::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::OBJMetaData>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline ::OBJMetaData* OBJData::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:OBJData.metadata)
  return _internal_mutable_metadata();
}
inline void OBJData::set_allocated_metadata(::OBJMetaData* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:OBJData.metadata)
}

// -------------------------------------------------------------------

// ReconstructionData

// string id = 1;
inline void ReconstructionData::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReconstructionData::id() const {
  // @@protoc_insertion_point(field_get:ReconstructionData.id)
  return _internal_id();
}
inline void ReconstructionData::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ReconstructionData.id)
}
inline std::string* ReconstructionData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ReconstructionData.id)
  return _internal_mutable_id();
}
inline const std::string& ReconstructionData::_internal_id() const {
  return id_.GetNoArena();
}
inline void ReconstructionData::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReconstructionData::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReconstructionData.id)
}
inline void ReconstructionData::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReconstructionData.id)
}
inline void ReconstructionData::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReconstructionData.id)
}
inline std::string* ReconstructionData::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReconstructionData::release_id() {
  // @@protoc_insertion_point(field_release:ReconstructionData.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructionData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ReconstructionData.id)
}

// string root = 2;
inline void ReconstructionData::clear_root() {
  root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReconstructionData::root() const {
  // @@protoc_insertion_point(field_get:ReconstructionData.root)
  return _internal_root();
}
inline void ReconstructionData::set_root(const std::string& value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:ReconstructionData.root)
}
inline std::string* ReconstructionData::mutable_root() {
  // @@protoc_insertion_point(field_mutable:ReconstructionData.root)
  return _internal_mutable_root();
}
inline const std::string& ReconstructionData::_internal_root() const {
  return root_.GetNoArena();
}
inline void ReconstructionData::_internal_set_root(const std::string& value) {
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReconstructionData::set_root(std::string&& value) {
  
  root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReconstructionData.root)
}
inline void ReconstructionData::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReconstructionData.root)
}
inline void ReconstructionData::set_root(const char* value, size_t size) {
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReconstructionData.root)
}
inline std::string* ReconstructionData::_internal_mutable_root() {
  
  return root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReconstructionData::release_root() {
  // @@protoc_insertion_point(field_release:ReconstructionData.root)
  
  return root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructionData::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root);
  // @@protoc_insertion_point(field_set_allocated:ReconstructionData.root)
}

// repeated string images = 3;
inline int ReconstructionData::_internal_images_size() const {
  return images_.size();
}
inline int ReconstructionData::images_size() const {
  return _internal_images_size();
}
inline void ReconstructionData::clear_images() {
  images_.Clear();
}
inline std::string* ReconstructionData::add_images() {
  // @@protoc_insertion_point(field_add_mutable:ReconstructionData.images)
  return _internal_add_images();
}
inline const std::string& ReconstructionData::_internal_images(int index) const {
  return images_.Get(index);
}
inline const std::string& ReconstructionData::images(int index) const {
  // @@protoc_insertion_point(field_get:ReconstructionData.images)
  return _internal_images(index);
}
inline std::string* ReconstructionData::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ReconstructionData.images)
  return images_.Mutable(index);
}
inline void ReconstructionData::set_images(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ReconstructionData.images)
  images_.Mutable(index)->assign(value);
}
inline void ReconstructionData::set_images(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ReconstructionData.images)
  images_.Mutable(index)->assign(std::move(value));
}
inline void ReconstructionData::set_images(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  images_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ReconstructionData.images)
}
inline void ReconstructionData::set_images(int index, const char* value, size_t size) {
  images_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ReconstructionData.images)
}
inline std::string* ReconstructionData::_internal_add_images() {
  return images_.Add();
}
inline void ReconstructionData::add_images(const std::string& value) {
  images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ReconstructionData.images)
}
inline void ReconstructionData::add_images(std::string&& value) {
  images_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ReconstructionData.images)
}
inline void ReconstructionData::add_images(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ReconstructionData.images)
}
inline void ReconstructionData::add_images(const char* value, size_t size) {
  images_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ReconstructionData.images)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReconstructionData::images() const {
  // @@protoc_insertion_point(field_list:ReconstructionData.images)
  return images_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReconstructionData::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ReconstructionData.images)
  return &images_;
}

// string sparse_reconstruction = 4;
inline void ReconstructionData::clear_sparse_reconstruction() {
  sparse_reconstruction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReconstructionData::sparse_reconstruction() const {
  // @@protoc_insertion_point(field_get:ReconstructionData.sparse_reconstruction)
  return _internal_sparse_reconstruction();
}
inline void ReconstructionData::set_sparse_reconstruction(const std::string& value) {
  _internal_set_sparse_reconstruction(value);
  // @@protoc_insertion_point(field_set:ReconstructionData.sparse_reconstruction)
}
inline std::string* ReconstructionData::mutable_sparse_reconstruction() {
  // @@protoc_insertion_point(field_mutable:ReconstructionData.sparse_reconstruction)
  return _internal_mutable_sparse_reconstruction();
}
inline const std::string& ReconstructionData::_internal_sparse_reconstruction() const {
  return sparse_reconstruction_.GetNoArena();
}
inline void ReconstructionData::_internal_set_sparse_reconstruction(const std::string& value) {
  
  sparse_reconstruction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReconstructionData::set_sparse_reconstruction(std::string&& value) {
  
  sparse_reconstruction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReconstructionData.sparse_reconstruction)
}
inline void ReconstructionData::set_sparse_reconstruction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sparse_reconstruction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReconstructionData.sparse_reconstruction)
}
inline void ReconstructionData::set_sparse_reconstruction(const char* value, size_t size) {
  
  sparse_reconstruction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReconstructionData.sparse_reconstruction)
}
inline std::string* ReconstructionData::_internal_mutable_sparse_reconstruction() {
  
  return sparse_reconstruction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReconstructionData::release_sparse_reconstruction() {
  // @@protoc_insertion_point(field_release:ReconstructionData.sparse_reconstruction)
  
  return sparse_reconstruction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructionData::set_allocated_sparse_reconstruction(std::string* sparse_reconstruction) {
  if (sparse_reconstruction != nullptr) {
    
  } else {
    
  }
  sparse_reconstruction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sparse_reconstruction);
  // @@protoc_insertion_point(field_set_allocated:ReconstructionData.sparse_reconstruction)
}

// string obj = 5;
inline void ReconstructionData::clear_obj() {
  obj_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReconstructionData::obj() const {
  // @@protoc_insertion_point(field_get:ReconstructionData.obj)
  return _internal_obj();
}
inline void ReconstructionData::set_obj(const std::string& value) {
  _internal_set_obj(value);
  // @@protoc_insertion_point(field_set:ReconstructionData.obj)
}
inline std::string* ReconstructionData::mutable_obj() {
  // @@protoc_insertion_point(field_mutable:ReconstructionData.obj)
  return _internal_mutable_obj();
}
inline const std::string& ReconstructionData::_internal_obj() const {
  return obj_.GetNoArena();
}
inline void ReconstructionData::_internal_set_obj(const std::string& value) {
  
  obj_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReconstructionData::set_obj(std::string&& value) {
  
  obj_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReconstructionData.obj)
}
inline void ReconstructionData::set_obj(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReconstructionData.obj)
}
inline void ReconstructionData::set_obj(const char* value, size_t size) {
  
  obj_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReconstructionData.obj)
}
inline std::string* ReconstructionData::_internal_mutable_obj() {
  
  return obj_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReconstructionData::release_obj() {
  // @@protoc_insertion_point(field_release:ReconstructionData.obj)
  
  return obj_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructionData::set_allocated_obj(std::string* obj) {
  if (obj != nullptr) {
    
  } else {
    
  }
  obj_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:ReconstructionData.obj)
}

// string images_path = 6;
inline void ReconstructionData::clear_images_path() {
  images_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReconstructionData::images_path() const {
  // @@protoc_insertion_point(field_get:ReconstructionData.images_path)
  return _internal_images_path();
}
inline void ReconstructionData::set_images_path(const std::string& value) {
  _internal_set_images_path(value);
  // @@protoc_insertion_point(field_set:ReconstructionData.images_path)
}
inline std::string* ReconstructionData::mutable_images_path() {
  // @@protoc_insertion_point(field_mutable:ReconstructionData.images_path)
  return _internal_mutable_images_path();
}
inline const std::string& ReconstructionData::_internal_images_path() const {
  return images_path_.GetNoArena();
}
inline void ReconstructionData::_internal_set_images_path(const std::string& value) {
  
  images_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReconstructionData::set_images_path(std::string&& value) {
  
  images_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReconstructionData.images_path)
}
inline void ReconstructionData::set_images_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  images_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReconstructionData.images_path)
}
inline void ReconstructionData::set_images_path(const char* value, size_t size) {
  
  images_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReconstructionData.images_path)
}
inline std::string* ReconstructionData::_internal_mutable_images_path() {
  
  return images_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReconstructionData::release_images_path() {
  // @@protoc_insertion_point(field_release:ReconstructionData.images_path)
  
  return images_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructionData::set_allocated_images_path(std::string* images_path) {
  if (images_path != nullptr) {
    
  } else {
    
  }
  images_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), images_path);
  // @@protoc_insertion_point(field_set_allocated:ReconstructionData.images_path)
}

// string sfm_path = 7;
inline void ReconstructionData::clear_sfm_path() {
  sfm_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReconstructionData::sfm_path() const {
  // @@protoc_insertion_point(field_get:ReconstructionData.sfm_path)
  return _internal_sfm_path();
}
inline void ReconstructionData::set_sfm_path(const std::string& value) {
  _internal_set_sfm_path(value);
  // @@protoc_insertion_point(field_set:ReconstructionData.sfm_path)
}
inline std::string* ReconstructionData::mutable_sfm_path() {
  // @@protoc_insertion_point(field_mutable:ReconstructionData.sfm_path)
  return _internal_mutable_sfm_path();
}
inline const std::string& ReconstructionData::_internal_sfm_path() const {
  return sfm_path_.GetNoArena();
}
inline void ReconstructionData::_internal_set_sfm_path(const std::string& value) {
  
  sfm_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReconstructionData::set_sfm_path(std::string&& value) {
  
  sfm_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReconstructionData.sfm_path)
}
inline void ReconstructionData::set_sfm_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sfm_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReconstructionData.sfm_path)
}
inline void ReconstructionData::set_sfm_path(const char* value, size_t size) {
  
  sfm_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReconstructionData.sfm_path)
}
inline std::string* ReconstructionData::_internal_mutable_sfm_path() {
  
  return sfm_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReconstructionData::release_sfm_path() {
  // @@protoc_insertion_point(field_release:ReconstructionData.sfm_path)
  
  return sfm_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructionData::set_allocated_sfm_path(std::string* sfm_path) {
  if (sfm_path != nullptr) {
    
  } else {
    
  }
  sfm_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sfm_path);
  // @@protoc_insertion_point(field_set_allocated:ReconstructionData.sfm_path)
}

// string mvs_path = 8;
inline void ReconstructionData::clear_mvs_path() {
  mvs_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReconstructionData::mvs_path() const {
  // @@protoc_insertion_point(field_get:ReconstructionData.mvs_path)
  return _internal_mvs_path();
}
inline void ReconstructionData::set_mvs_path(const std::string& value) {
  _internal_set_mvs_path(value);
  // @@protoc_insertion_point(field_set:ReconstructionData.mvs_path)
}
inline std::string* ReconstructionData::mutable_mvs_path() {
  // @@protoc_insertion_point(field_mutable:ReconstructionData.mvs_path)
  return _internal_mutable_mvs_path();
}
inline const std::string& ReconstructionData::_internal_mvs_path() const {
  return mvs_path_.GetNoArena();
}
inline void ReconstructionData::_internal_set_mvs_path(const std::string& value) {
  
  mvs_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReconstructionData::set_mvs_path(std::string&& value) {
  
  mvs_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReconstructionData.mvs_path)
}
inline void ReconstructionData::set_mvs_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mvs_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReconstructionData.mvs_path)
}
inline void ReconstructionData::set_mvs_path(const char* value, size_t size) {
  
  mvs_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReconstructionData.mvs_path)
}
inline std::string* ReconstructionData::_internal_mutable_mvs_path() {
  
  return mvs_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReconstructionData::release_mvs_path() {
  // @@protoc_insertion_point(field_release:ReconstructionData.mvs_path)
  
  return mvs_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructionData::set_allocated_mvs_path(std::string* mvs_path) {
  if (mvs_path != nullptr) {
    
  } else {
    
  }
  mvs_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mvs_path);
  // @@protoc_insertion_point(field_set_allocated:ReconstructionData.mvs_path)
}

// string features_path = 9;
inline void ReconstructionData::clear_features_path() {
  features_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReconstructionData::features_path() const {
  // @@protoc_insertion_point(field_get:ReconstructionData.features_path)
  return _internal_features_path();
}
inline void ReconstructionData::set_features_path(const std::string& value) {
  _internal_set_features_path(value);
  // @@protoc_insertion_point(field_set:ReconstructionData.features_path)
}
inline std::string* ReconstructionData::mutable_features_path() {
  // @@protoc_insertion_point(field_mutable:ReconstructionData.features_path)
  return _internal_mutable_features_path();
}
inline const std::string& ReconstructionData::_internal_features_path() const {
  return features_path_.GetNoArena();
}
inline void ReconstructionData::_internal_set_features_path(const std::string& value) {
  
  features_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReconstructionData::set_features_path(std::string&& value) {
  
  features_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReconstructionData.features_path)
}
inline void ReconstructionData::set_features_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  features_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReconstructionData.features_path)
}
inline void ReconstructionData::set_features_path(const char* value, size_t size) {
  
  features_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReconstructionData.features_path)
}
inline std::string* ReconstructionData::_internal_mutable_features_path() {
  
  return features_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReconstructionData::release_features_path() {
  // @@protoc_insertion_point(field_release:ReconstructionData.features_path)
  
  return features_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructionData::set_allocated_features_path(std::string* features_path) {
  if (features_path != nullptr) {
    
  } else {
    
  }
  features_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), features_path);
  // @@protoc_insertion_point(field_set_allocated:ReconstructionData.features_path)
}

// string matches_path = 10;
inline void ReconstructionData::clear_matches_path() {
  matches_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReconstructionData::matches_path() const {
  // @@protoc_insertion_point(field_get:ReconstructionData.matches_path)
  return _internal_matches_path();
}
inline void ReconstructionData::set_matches_path(const std::string& value) {
  _internal_set_matches_path(value);
  // @@protoc_insertion_point(field_set:ReconstructionData.matches_path)
}
inline std::string* ReconstructionData::mutable_matches_path() {
  // @@protoc_insertion_point(field_mutable:ReconstructionData.matches_path)
  return _internal_mutable_matches_path();
}
inline const std::string& ReconstructionData::_internal_matches_path() const {
  return matches_path_.GetNoArena();
}
inline void ReconstructionData::_internal_set_matches_path(const std::string& value) {
  
  matches_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReconstructionData::set_matches_path(std::string&& value) {
  
  matches_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReconstructionData.matches_path)
}
inline void ReconstructionData::set_matches_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matches_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReconstructionData.matches_path)
}
inline void ReconstructionData::set_matches_path(const char* value, size_t size) {
  
  matches_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReconstructionData.matches_path)
}
inline std::string* ReconstructionData::_internal_mutable_matches_path() {
  
  return matches_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReconstructionData::release_matches_path() {
  // @@protoc_insertion_point(field_release:ReconstructionData.matches_path)
  
  return matches_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructionData::set_allocated_matches_path(std::string* matches_path) {
  if (matches_path != nullptr) {
    
  } else {
    
  }
  matches_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matches_path);
  // @@protoc_insertion_point(field_set_allocated:ReconstructionData.matches_path)
}

// -------------------------------------------------------------------

// StoreImageResponse

// bool success = 1;
inline void StoreImageResponse::clear_success() {
  success_ = false;
}
inline bool StoreImageResponse::_internal_success() const {
  return success_;
}
inline bool StoreImageResponse::success() const {
  // @@protoc_insertion_point(field_get:StoreImageResponse.success)
  return _internal_success();
}
inline void StoreImageResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void StoreImageResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:StoreImageResponse.success)
}

// -------------------------------------------------------------------

// StoreImageRequest

// string reconstruction_id = 1;
inline void StoreImageRequest::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StoreImageRequest::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:StoreImageRequest.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void StoreImageRequest::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:StoreImageRequest.reconstruction_id)
}
inline std::string* StoreImageRequest::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:StoreImageRequest.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& StoreImageRequest::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void StoreImageRequest::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StoreImageRequest::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreImageRequest.reconstruction_id)
}
inline void StoreImageRequest::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreImageRequest.reconstruction_id)
}
inline void StoreImageRequest::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreImageRequest.reconstruction_id)
}
inline std::string* StoreImageRequest::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoreImageRequest::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:StoreImageRequest.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoreImageRequest::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:StoreImageRequest.reconstruction_id)
}

// .ImageData image = 2;
inline bool StoreImageRequest::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool StoreImageRequest::has_image() const {
  return _internal_has_image();
}
inline void StoreImageRequest::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::ImageData& StoreImageRequest::_internal_image() const {
  const ::ImageData* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ImageData*>(
      &::_ImageData_default_instance_);
}
inline const ::ImageData& StoreImageRequest::image() const {
  // @@protoc_insertion_point(field_get:StoreImageRequest.image)
  return _internal_image();
}
inline ::ImageData* StoreImageRequest::release_image() {
  // @@protoc_insertion_point(field_release:StoreImageRequest.image)
  
  ::ImageData* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::ImageData* StoreImageRequest::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::ImageData>(GetArenaNoVirtual());
    image_ = p;
  }
  return image_;
}
inline ::ImageData* StoreImageRequest::mutable_image() {
  // @@protoc_insertion_point(field_mutable:StoreImageRequest.image)
  return _internal_mutable_image();
}
inline void StoreImageRequest::set_allocated_image(::ImageData* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:StoreImageRequest.image)
}

// -------------------------------------------------------------------

// NewReconstructionRequest

// -------------------------------------------------------------------

// NewReconstructionResponse

// string reconstruction_id = 1;
inline void NewReconstructionResponse::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NewReconstructionResponse::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:NewReconstructionResponse.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void NewReconstructionResponse::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:NewReconstructionResponse.reconstruction_id)
}
inline std::string* NewReconstructionResponse::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:NewReconstructionResponse.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& NewReconstructionResponse::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void NewReconstructionResponse::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NewReconstructionResponse::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NewReconstructionResponse.reconstruction_id)
}
inline void NewReconstructionResponse::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NewReconstructionResponse.reconstruction_id)
}
inline void NewReconstructionResponse::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NewReconstructionResponse.reconstruction_id)
}
inline std::string* NewReconstructionResponse::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewReconstructionResponse::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:NewReconstructionResponse.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewReconstructionResponse::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:NewReconstructionResponse.reconstruction_id)
}

// -------------------------------------------------------------------

// ReconstructRequest

// string reconstruction_id = 1;
inline void ReconstructRequest::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReconstructRequest::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:ReconstructRequest.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void ReconstructRequest::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:ReconstructRequest.reconstruction_id)
}
inline std::string* ReconstructRequest::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:ReconstructRequest.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& ReconstructRequest::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void ReconstructRequest::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReconstructRequest::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReconstructRequest.reconstruction_id)
}
inline void ReconstructRequest::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReconstructRequest.reconstruction_id)
}
inline void ReconstructRequest::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReconstructRequest.reconstruction_id)
}
inline std::string* ReconstructRequest::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReconstructRequest::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:ReconstructRequest.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructRequest::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:ReconstructRequest.reconstruction_id)
}

// -------------------------------------------------------------------

// GetOBJRequest

// string reconstruction_id = 1;
inline void GetOBJRequest::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetOBJRequest::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:GetOBJRequest.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void GetOBJRequest::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:GetOBJRequest.reconstruction_id)
}
inline std::string* GetOBJRequest::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:GetOBJRequest.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& GetOBJRequest::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void GetOBJRequest::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetOBJRequest::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetOBJRequest.reconstruction_id)
}
inline void GetOBJRequest::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetOBJRequest.reconstruction_id)
}
inline void GetOBJRequest::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetOBJRequest.reconstruction_id)
}
inline std::string* GetOBJRequest::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetOBJRequest::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:GetOBJRequest.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetOBJRequest::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:GetOBJRequest.reconstruction_id)
}

// -------------------------------------------------------------------

// GetOBJResponse

// bool success = 1;
inline void GetOBJResponse::clear_success() {
  success_ = false;
}
inline bool GetOBJResponse::_internal_success() const {
  return success_;
}
inline bool GetOBJResponse::success() const {
  // @@protoc_insertion_point(field_get:GetOBJResponse.success)
  return _internal_success();
}
inline void GetOBJResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetOBJResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:GetOBJResponse.success)
}

// .OBJData obj = 2;
inline bool GetOBJResponse::_internal_has_obj() const {
  return this != internal_default_instance() && obj_ != nullptr;
}
inline bool GetOBJResponse::has_obj() const {
  return _internal_has_obj();
}
inline void GetOBJResponse::clear_obj() {
  if (GetArenaNoVirtual() == nullptr && obj_ != nullptr) {
    delete obj_;
  }
  obj_ = nullptr;
}
inline const ::OBJData& GetOBJResponse::_internal_obj() const {
  const ::OBJData* p = obj_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OBJData*>(
      &::_OBJData_default_instance_);
}
inline const ::OBJData& GetOBJResponse::obj() const {
  // @@protoc_insertion_point(field_get:GetOBJResponse.obj)
  return _internal_obj();
}
inline ::OBJData* GetOBJResponse::release_obj() {
  // @@protoc_insertion_point(field_release:GetOBJResponse.obj)
  
  ::OBJData* temp = obj_;
  obj_ = nullptr;
  return temp;
}
inline ::OBJData* GetOBJResponse::_internal_mutable_obj() {
  
  if (obj_ == nullptr) {
    auto* p = CreateMaybeMessage<::OBJData>(GetArenaNoVirtual());
    obj_ = p;
  }
  return obj_;
}
inline ::OBJData* GetOBJResponse::mutable_obj() {
  // @@protoc_insertion_point(field_mutable:GetOBJResponse.obj)
  return _internal_mutable_obj();
}
inline void GetOBJResponse::set_allocated_obj(::OBJData* obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obj_;
  }
  if (obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj, submessage_arena);
    }
    
  } else {
    
  }
  obj_ = obj;
  // @@protoc_insertion_point(field_set_allocated:GetOBJResponse.obj)
}

// -------------------------------------------------------------------

// ReconstructResponse

// bool success = 1;
inline void ReconstructResponse::clear_success() {
  success_ = false;
}
inline bool ReconstructResponse::_internal_success() const {
  return success_;
}
inline bool ReconstructResponse::success() const {
  // @@protoc_insertion_point(field_get:ReconstructResponse.success)
  return _internal_success();
}
inline void ReconstructResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ReconstructResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ReconstructResponse.success)
}

// string error_msg = 2;
inline void ReconstructResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReconstructResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:ReconstructResponse.error_msg)
  return _internal_error_msg();
}
inline void ReconstructResponse::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:ReconstructResponse.error_msg)
}
inline std::string* ReconstructResponse::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:ReconstructResponse.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& ReconstructResponse::_internal_error_msg() const {
  return error_msg_.GetNoArena();
}
inline void ReconstructResponse::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReconstructResponse::set_error_msg(std::string&& value) {
  
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReconstructResponse.error_msg)
}
inline void ReconstructResponse::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReconstructResponse.error_msg)
}
inline void ReconstructResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReconstructResponse.error_msg)
}
inline std::string* ReconstructResponse::_internal_mutable_error_msg() {
  
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReconstructResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:ReconstructResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:ReconstructResponse.error_msg)
}

// -------------------------------------------------------------------

// ReconstructionOBJ

// bytes obj = 1;
inline void ReconstructionOBJ::clear_obj() {
  obj_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReconstructionOBJ::obj() const {
  // @@protoc_insertion_point(field_get:ReconstructionOBJ.obj)
  return _internal_obj();
}
inline void ReconstructionOBJ::set_obj(const std::string& value) {
  _internal_set_obj(value);
  // @@protoc_insertion_point(field_set:ReconstructionOBJ.obj)
}
inline std::string* ReconstructionOBJ::mutable_obj() {
  // @@protoc_insertion_point(field_mutable:ReconstructionOBJ.obj)
  return _internal_mutable_obj();
}
inline const std::string& ReconstructionOBJ::_internal_obj() const {
  return obj_.GetNoArena();
}
inline void ReconstructionOBJ::_internal_set_obj(const std::string& value) {
  
  obj_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReconstructionOBJ::set_obj(std::string&& value) {
  
  obj_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReconstructionOBJ.obj)
}
inline void ReconstructionOBJ::set_obj(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReconstructionOBJ.obj)
}
inline void ReconstructionOBJ::set_obj(const void* value, size_t size) {
  
  obj_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReconstructionOBJ.obj)
}
inline std::string* ReconstructionOBJ::_internal_mutable_obj() {
  
  return obj_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReconstructionOBJ::release_obj() {
  // @@protoc_insertion_point(field_release:ReconstructionOBJ.obj)
  
  return obj_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReconstructionOBJ::set_allocated_obj(std::string* obj) {
  if (obj != nullptr) {
    
  } else {
    
  }
  obj_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:ReconstructionOBJ.obj)
}

// -------------------------------------------------------------------

// DeleteReconstructionRequest

// string id = 1;
inline void DeleteReconstructionRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteReconstructionRequest::id() const {
  // @@protoc_insertion_point(field_get:DeleteReconstructionRequest.id)
  return _internal_id();
}
inline void DeleteReconstructionRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DeleteReconstructionRequest.id)
}
inline std::string* DeleteReconstructionRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:DeleteReconstructionRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteReconstructionRequest::_internal_id() const {
  return id_.GetNoArena();
}
inline void DeleteReconstructionRequest::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteReconstructionRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeleteReconstructionRequest.id)
}
inline void DeleteReconstructionRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteReconstructionRequest.id)
}
inline void DeleteReconstructionRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteReconstructionRequest.id)
}
inline std::string* DeleteReconstructionRequest::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteReconstructionRequest::release_id() {
  // @@protoc_insertion_point(field_release:DeleteReconstructionRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteReconstructionRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:DeleteReconstructionRequest.id)
}

// -------------------------------------------------------------------

// DeleteReconstructionResponse

// bool success = 1;
inline void DeleteReconstructionResponse::clear_success() {
  success_ = false;
}
inline bool DeleteReconstructionResponse::_internal_success() const {
  return success_;
}
inline bool DeleteReconstructionResponse::success() const {
  // @@protoc_insertion_point(field_get:DeleteReconstructionResponse.success)
  return _internal_success();
}
inline void DeleteReconstructionResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void DeleteReconstructionResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:DeleteReconstructionResponse.success)
}

// string id = 2;
inline void DeleteReconstructionResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteReconstructionResponse::id() const {
  // @@protoc_insertion_point(field_get:DeleteReconstructionResponse.id)
  return _internal_id();
}
inline void DeleteReconstructionResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DeleteReconstructionResponse.id)
}
inline std::string* DeleteReconstructionResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:DeleteReconstructionResponse.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteReconstructionResponse::_internal_id() const {
  return id_.GetNoArena();
}
inline void DeleteReconstructionResponse::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteReconstructionResponse::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeleteReconstructionResponse.id)
}
inline void DeleteReconstructionResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteReconstructionResponse.id)
}
inline void DeleteReconstructionResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteReconstructionResponse.id)
}
inline std::string* DeleteReconstructionResponse::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteReconstructionResponse::release_id() {
  // @@protoc_insertion_point(field_release:DeleteReconstructionResponse.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteReconstructionResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:DeleteReconstructionResponse.id)
}

// -------------------------------------------------------------------

// CameraIntrinsics

// string model = 1;
inline void CameraIntrinsics::clear_model() {
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CameraIntrinsics::model() const {
  // @@protoc_insertion_point(field_get:CameraIntrinsics.model)
  return _internal_model();
}
inline void CameraIntrinsics::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:CameraIntrinsics.model)
}
inline std::string* CameraIntrinsics::mutable_model() {
  // @@protoc_insertion_point(field_mutable:CameraIntrinsics.model)
  return _internal_mutable_model();
}
inline const std::string& CameraIntrinsics::_internal_model() const {
  return model_.GetNoArena();
}
inline void CameraIntrinsics::_internal_set_model(const std::string& value) {
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraIntrinsics::set_model(std::string&& value) {
  
  model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraIntrinsics.model)
}
inline void CameraIntrinsics::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraIntrinsics.model)
}
inline void CameraIntrinsics::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraIntrinsics.model)
}
inline std::string* CameraIntrinsics::_internal_mutable_model() {
  
  return model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraIntrinsics::release_model() {
  // @@protoc_insertion_point(field_release:CameraIntrinsics.model)
  
  return model_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraIntrinsics::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:CameraIntrinsics.model)
}

// string maker = 2;
inline void CameraIntrinsics::clear_maker() {
  maker_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CameraIntrinsics::maker() const {
  // @@protoc_insertion_point(field_get:CameraIntrinsics.maker)
  return _internal_maker();
}
inline void CameraIntrinsics::set_maker(const std::string& value) {
  _internal_set_maker(value);
  // @@protoc_insertion_point(field_set:CameraIntrinsics.maker)
}
inline std::string* CameraIntrinsics::mutable_maker() {
  // @@protoc_insertion_point(field_mutable:CameraIntrinsics.maker)
  return _internal_mutable_maker();
}
inline const std::string& CameraIntrinsics::_internal_maker() const {
  return maker_.GetNoArena();
}
inline void CameraIntrinsics::_internal_set_maker(const std::string& value) {
  
  maker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraIntrinsics::set_maker(std::string&& value) {
  
  maker_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraIntrinsics.maker)
}
inline void CameraIntrinsics::set_maker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraIntrinsics.maker)
}
inline void CameraIntrinsics::set_maker(const char* value, size_t size) {
  
  maker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraIntrinsics.maker)
}
inline std::string* CameraIntrinsics::_internal_mutable_maker() {
  
  return maker_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraIntrinsics::release_maker() {
  // @@protoc_insertion_point(field_release:CameraIntrinsics.maker)
  
  return maker_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraIntrinsics::set_allocated_maker(std::string* maker) {
  if (maker != nullptr) {
    
  } else {
    
  }
  maker_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maker);
  // @@protoc_insertion_point(field_set_allocated:CameraIntrinsics.maker)
}

// string numeric_model = 3;
inline void CameraIntrinsics::clear_numeric_model() {
  numeric_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CameraIntrinsics::numeric_model() const {
  // @@protoc_insertion_point(field_get:CameraIntrinsics.numeric_model)
  return _internal_numeric_model();
}
inline void CameraIntrinsics::set_numeric_model(const std::string& value) {
  _internal_set_numeric_model(value);
  // @@protoc_insertion_point(field_set:CameraIntrinsics.numeric_model)
}
inline std::string* CameraIntrinsics::mutable_numeric_model() {
  // @@protoc_insertion_point(field_mutable:CameraIntrinsics.numeric_model)
  return _internal_mutable_numeric_model();
}
inline const std::string& CameraIntrinsics::_internal_numeric_model() const {
  return numeric_model_.GetNoArena();
}
inline void CameraIntrinsics::_internal_set_numeric_model(const std::string& value) {
  
  numeric_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraIntrinsics::set_numeric_model(std::string&& value) {
  
  numeric_model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraIntrinsics.numeric_model)
}
inline void CameraIntrinsics::set_numeric_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  numeric_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraIntrinsics.numeric_model)
}
inline void CameraIntrinsics::set_numeric_model(const char* value, size_t size) {
  
  numeric_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraIntrinsics.numeric_model)
}
inline std::string* CameraIntrinsics::_internal_mutable_numeric_model() {
  
  return numeric_model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraIntrinsics::release_numeric_model() {
  // @@protoc_insertion_point(field_release:CameraIntrinsics.numeric_model)
  
  return numeric_model_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraIntrinsics::set_allocated_numeric_model(std::string* numeric_model) {
  if (numeric_model != nullptr) {
    
  } else {
    
  }
  numeric_model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), numeric_model);
  // @@protoc_insertion_point(field_set_allocated:CameraIntrinsics.numeric_model)
}

// float sensor_size = 4;
inline void CameraIntrinsics::clear_sensor_size() {
  sensor_size_ = 0;
}
inline float CameraIntrinsics::_internal_sensor_size() const {
  return sensor_size_;
}
inline float CameraIntrinsics::sensor_size() const {
  // @@protoc_insertion_point(field_get:CameraIntrinsics.sensor_size)
  return _internal_sensor_size();
}
inline void CameraIntrinsics::_internal_set_sensor_size(float value) {
  
  sensor_size_ = value;
}
inline void CameraIntrinsics::set_sensor_size(float value) {
  _internal_set_sensor_size(value);
  // @@protoc_insertion_point(field_set:CameraIntrinsics.sensor_size)
}

// string focus_mode = 5;
inline void CameraIntrinsics::clear_focus_mode() {
  focus_mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CameraIntrinsics::focus_mode() const {
  // @@protoc_insertion_point(field_get:CameraIntrinsics.focus_mode)
  return _internal_focus_mode();
}
inline void CameraIntrinsics::set_focus_mode(const std::string& value) {
  _internal_set_focus_mode(value);
  // @@protoc_insertion_point(field_set:CameraIntrinsics.focus_mode)
}
inline std::string* CameraIntrinsics::mutable_focus_mode() {
  // @@protoc_insertion_point(field_mutable:CameraIntrinsics.focus_mode)
  return _internal_mutable_focus_mode();
}
inline const std::string& CameraIntrinsics::_internal_focus_mode() const {
  return focus_mode_.GetNoArena();
}
inline void CameraIntrinsics::_internal_set_focus_mode(const std::string& value) {
  
  focus_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraIntrinsics::set_focus_mode(std::string&& value) {
  
  focus_mode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraIntrinsics.focus_mode)
}
inline void CameraIntrinsics::set_focus_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  focus_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraIntrinsics.focus_mode)
}
inline void CameraIntrinsics::set_focus_mode(const char* value, size_t size) {
  
  focus_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraIntrinsics.focus_mode)
}
inline std::string* CameraIntrinsics::_internal_mutable_focus_mode() {
  
  return focus_mode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraIntrinsics::release_focus_mode() {
  // @@protoc_insertion_point(field_release:CameraIntrinsics.focus_mode)
  
  return focus_mode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraIntrinsics::set_allocated_focus_mode(std::string* focus_mode) {
  if (focus_mode != nullptr) {
    
  } else {
    
  }
  focus_mode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), focus_mode);
  // @@protoc_insertion_point(field_set_allocated:CameraIntrinsics.focus_mode)
}

// float horizontal_view_angle = 6;
inline void CameraIntrinsics::clear_horizontal_view_angle() {
  horizontal_view_angle_ = 0;
}
inline float CameraIntrinsics::_internal_horizontal_view_angle() const {
  return horizontal_view_angle_;
}
inline float CameraIntrinsics::horizontal_view_angle() const {
  // @@protoc_insertion_point(field_get:CameraIntrinsics.horizontal_view_angle)
  return _internal_horizontal_view_angle();
}
inline void CameraIntrinsics::_internal_set_horizontal_view_angle(float value) {
  
  horizontal_view_angle_ = value;
}
inline void CameraIntrinsics::set_horizontal_view_angle(float value) {
  _internal_set_horizontal_view_angle(value);
  // @@protoc_insertion_point(field_set:CameraIntrinsics.horizontal_view_angle)
}

// int32 jpeg_quality = 7;
inline void CameraIntrinsics::clear_jpeg_quality() {
  jpeg_quality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraIntrinsics::_internal_jpeg_quality() const {
  return jpeg_quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraIntrinsics::jpeg_quality() const {
  // @@protoc_insertion_point(field_get:CameraIntrinsics.jpeg_quality)
  return _internal_jpeg_quality();
}
inline void CameraIntrinsics::_internal_set_jpeg_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  jpeg_quality_ = value;
}
inline void CameraIntrinsics::set_jpeg_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_jpeg_quality(value);
  // @@protoc_insertion_point(field_set:CameraIntrinsics.jpeg_quality)
}

// -------------------------------------------------------------------

// HandhsakeRequest

// string identifier = 1;
inline void HandhsakeRequest::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HandhsakeRequest::identifier() const {
  // @@protoc_insertion_point(field_get:HandhsakeRequest.identifier)
  return _internal_identifier();
}
inline void HandhsakeRequest::set_identifier(const std::string& value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:HandhsakeRequest.identifier)
}
inline std::string* HandhsakeRequest::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:HandhsakeRequest.identifier)
  return _internal_mutable_identifier();
}
inline const std::string& HandhsakeRequest::_internal_identifier() const {
  return identifier_.GetNoArena();
}
inline void HandhsakeRequest::_internal_set_identifier(const std::string& value) {
  
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HandhsakeRequest::set_identifier(std::string&& value) {
  
  identifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HandhsakeRequest.identifier)
}
inline void HandhsakeRequest::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HandhsakeRequest.identifier)
}
inline void HandhsakeRequest::set_identifier(const char* value, size_t size) {
  
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HandhsakeRequest.identifier)
}
inline std::string* HandhsakeRequest::_internal_mutable_identifier() {
  
  return identifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HandhsakeRequest::release_identifier() {
  // @@protoc_insertion_point(field_release:HandhsakeRequest.identifier)
  
  return identifier_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HandhsakeRequest::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:HandhsakeRequest.identifier)
}

// .CameraIntrinsics camera_intrinsics = 2;
inline bool HandhsakeRequest::_internal_has_camera_intrinsics() const {
  return this != internal_default_instance() && camera_intrinsics_ != nullptr;
}
inline bool HandhsakeRequest::has_camera_intrinsics() const {
  return _internal_has_camera_intrinsics();
}
inline void HandhsakeRequest::clear_camera_intrinsics() {
  if (GetArenaNoVirtual() == nullptr && camera_intrinsics_ != nullptr) {
    delete camera_intrinsics_;
  }
  camera_intrinsics_ = nullptr;
}
inline const ::CameraIntrinsics& HandhsakeRequest::_internal_camera_intrinsics() const {
  const ::CameraIntrinsics* p = camera_intrinsics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CameraIntrinsics*>(
      &::_CameraIntrinsics_default_instance_);
}
inline const ::CameraIntrinsics& HandhsakeRequest::camera_intrinsics() const {
  // @@protoc_insertion_point(field_get:HandhsakeRequest.camera_intrinsics)
  return _internal_camera_intrinsics();
}
inline ::CameraIntrinsics* HandhsakeRequest::release_camera_intrinsics() {
  // @@protoc_insertion_point(field_release:HandhsakeRequest.camera_intrinsics)
  
  ::CameraIntrinsics* temp = camera_intrinsics_;
  camera_intrinsics_ = nullptr;
  return temp;
}
inline ::CameraIntrinsics* HandhsakeRequest::_internal_mutable_camera_intrinsics() {
  
  if (camera_intrinsics_ == nullptr) {
    auto* p = CreateMaybeMessage<::CameraIntrinsics>(GetArenaNoVirtual());
    camera_intrinsics_ = p;
  }
  return camera_intrinsics_;
}
inline ::CameraIntrinsics* HandhsakeRequest::mutable_camera_intrinsics() {
  // @@protoc_insertion_point(field_mutable:HandhsakeRequest.camera_intrinsics)
  return _internal_mutable_camera_intrinsics();
}
inline void HandhsakeRequest::set_allocated_camera_intrinsics(::CameraIntrinsics* camera_intrinsics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_intrinsics_;
  }
  if (camera_intrinsics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_intrinsics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_intrinsics, submessage_arena);
    }
    
  } else {
    
  }
  camera_intrinsics_ = camera_intrinsics;
  // @@protoc_insertion_point(field_set_allocated:HandhsakeRequest.camera_intrinsics)
}

// -------------------------------------------------------------------

// HandshakeResponse

// bool success = 1;
inline void HandshakeResponse::clear_success() {
  success_ = false;
}
inline bool HandshakeResponse::_internal_success() const {
  return success_;
}
inline bool HandshakeResponse::success() const {
  // @@protoc_insertion_point(field_get:HandshakeResponse.success)
  return _internal_success();
}
inline void HandshakeResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void HandshakeResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:HandshakeResponse.success)
}

// -------------------------------------------------------------------

// StartSessionRequest

// string reconstruction_id = 1;
inline void StartSessionRequest::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StartSessionRequest::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:StartSessionRequest.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void StartSessionRequest::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:StartSessionRequest.reconstruction_id)
}
inline std::string* StartSessionRequest::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:StartSessionRequest.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& StartSessionRequest::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void StartSessionRequest::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StartSessionRequest::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StartSessionRequest.reconstruction_id)
}
inline void StartSessionRequest::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StartSessionRequest.reconstruction_id)
}
inline void StartSessionRequest::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StartSessionRequest.reconstruction_id)
}
inline std::string* StartSessionRequest::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StartSessionRequest::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:StartSessionRequest.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StartSessionRequest::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:StartSessionRequest.reconstruction_id)
}

// -------------------------------------------------------------------

// StartSessionResponse

// string reconstruction_id = 1;
inline void StartSessionResponse::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StartSessionResponse::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:StartSessionResponse.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void StartSessionResponse::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:StartSessionResponse.reconstruction_id)
}
inline std::string* StartSessionResponse::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:StartSessionResponse.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& StartSessionResponse::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void StartSessionResponse::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StartSessionResponse::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StartSessionResponse.reconstruction_id)
}
inline void StartSessionResponse::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StartSessionResponse.reconstruction_id)
}
inline void StartSessionResponse::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StartSessionResponse.reconstruction_id)
}
inline std::string* StartSessionResponse::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StartSessionResponse::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:StartSessionResponse.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StartSessionResponse::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:StartSessionResponse.reconstruction_id)
}

// string session_id = 2;
inline void StartSessionResponse::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StartSessionResponse::session_id() const {
  // @@protoc_insertion_point(field_get:StartSessionResponse.session_id)
  return _internal_session_id();
}
inline void StartSessionResponse::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:StartSessionResponse.session_id)
}
inline std::string* StartSessionResponse::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:StartSessionResponse.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& StartSessionResponse::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void StartSessionResponse::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StartSessionResponse::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StartSessionResponse.session_id)
}
inline void StartSessionResponse::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StartSessionResponse.session_id)
}
inline void StartSessionResponse::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StartSessionResponse.session_id)
}
inline std::string* StartSessionResponse::_internal_mutable_session_id() {
  
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StartSessionResponse::release_session_id() {
  // @@protoc_insertion_point(field_release:StartSessionResponse.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StartSessionResponse::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:StartSessionResponse.session_id)
}

// -------------------------------------------------------------------

// StopSessionRequest

// string session_id = 1;
inline void StopSessionRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StopSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:StopSessionRequest.session_id)
  return _internal_session_id();
}
inline void StopSessionRequest::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:StopSessionRequest.session_id)
}
inline std::string* StopSessionRequest::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:StopSessionRequest.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& StopSessionRequest::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void StopSessionRequest::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StopSessionRequest::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StopSessionRequest.session_id)
}
inline void StopSessionRequest::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StopSessionRequest.session_id)
}
inline void StopSessionRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StopSessionRequest.session_id)
}
inline std::string* StopSessionRequest::_internal_mutable_session_id() {
  
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StopSessionRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:StopSessionRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StopSessionRequest::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:StopSessionRequest.session_id)
}

// -------------------------------------------------------------------

// StopSessionResponse

// string session_id = 1;
inline void StopSessionResponse::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StopSessionResponse::session_id() const {
  // @@protoc_insertion_point(field_get:StopSessionResponse.session_id)
  return _internal_session_id();
}
inline void StopSessionResponse::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:StopSessionResponse.session_id)
}
inline std::string* StopSessionResponse::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:StopSessionResponse.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& StopSessionResponse::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void StopSessionResponse::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StopSessionResponse::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StopSessionResponse.session_id)
}
inline void StopSessionResponse::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StopSessionResponse.session_id)
}
inline void StopSessionResponse::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StopSessionResponse.session_id)
}
inline std::string* StopSessionResponse::_internal_mutable_session_id() {
  
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StopSessionResponse::release_session_id() {
  // @@protoc_insertion_point(field_release:StopSessionResponse.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StopSessionResponse::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:StopSessionResponse.session_id)
}

// -------------------------------------------------------------------

// SessionAddImageRequest

// string session_id = 1;
inline void SessionAddImageRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SessionAddImageRequest::session_id() const {
  // @@protoc_insertion_point(field_get:SessionAddImageRequest.session_id)
  return _internal_session_id();
}
inline void SessionAddImageRequest::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:SessionAddImageRequest.session_id)
}
inline std::string* SessionAddImageRequest::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:SessionAddImageRequest.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& SessionAddImageRequest::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void SessionAddImageRequest::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SessionAddImageRequest::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SessionAddImageRequest.session_id)
}
inline void SessionAddImageRequest::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SessionAddImageRequest.session_id)
}
inline void SessionAddImageRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SessionAddImageRequest.session_id)
}
inline std::string* SessionAddImageRequest::_internal_mutable_session_id() {
  
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionAddImageRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:SessionAddImageRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionAddImageRequest::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:SessionAddImageRequest.session_id)
}

// .StoreImageRequest upload_image = 2;
inline bool SessionAddImageRequest::_internal_has_upload_image() const {
  return this != internal_default_instance() && upload_image_ != nullptr;
}
inline bool SessionAddImageRequest::has_upload_image() const {
  return _internal_has_upload_image();
}
inline void SessionAddImageRequest::clear_upload_image() {
  if (GetArenaNoVirtual() == nullptr && upload_image_ != nullptr) {
    delete upload_image_;
  }
  upload_image_ = nullptr;
}
inline const ::StoreImageRequest& SessionAddImageRequest::_internal_upload_image() const {
  const ::StoreImageRequest* p = upload_image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::StoreImageRequest*>(
      &::_StoreImageRequest_default_instance_);
}
inline const ::StoreImageRequest& SessionAddImageRequest::upload_image() const {
  // @@protoc_insertion_point(field_get:SessionAddImageRequest.upload_image)
  return _internal_upload_image();
}
inline ::StoreImageRequest* SessionAddImageRequest::release_upload_image() {
  // @@protoc_insertion_point(field_release:SessionAddImageRequest.upload_image)
  
  ::StoreImageRequest* temp = upload_image_;
  upload_image_ = nullptr;
  return temp;
}
inline ::StoreImageRequest* SessionAddImageRequest::_internal_mutable_upload_image() {
  
  if (upload_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::StoreImageRequest>(GetArenaNoVirtual());
    upload_image_ = p;
  }
  return upload_image_;
}
inline ::StoreImageRequest* SessionAddImageRequest::mutable_upload_image() {
  // @@protoc_insertion_point(field_mutable:SessionAddImageRequest.upload_image)
  return _internal_mutable_upload_image();
}
inline void SessionAddImageRequest::set_allocated_upload_image(::StoreImageRequest* upload_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete upload_image_;
  }
  if (upload_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upload_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upload_image, submessage_arena);
    }
    
  } else {
    
  }
  upload_image_ = upload_image;
  // @@protoc_insertion_point(field_set_allocated:SessionAddImageRequest.upload_image)
}

// -------------------------------------------------------------------

// SessionAddImageResponse

// -------------------------------------------------------------------

// GetSparseRequest

// string reconstruction_id = 1;
inline void GetSparseRequest::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetSparseRequest::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:GetSparseRequest.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void GetSparseRequest::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:GetSparseRequest.reconstruction_id)
}
inline std::string* GetSparseRequest::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:GetSparseRequest.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& GetSparseRequest::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void GetSparseRequest::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetSparseRequest::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetSparseRequest.reconstruction_id)
}
inline void GetSparseRequest::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetSparseRequest.reconstruction_id)
}
inline void GetSparseRequest::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetSparseRequest.reconstruction_id)
}
inline std::string* GetSparseRequest::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSparseRequest::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:GetSparseRequest.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSparseRequest::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:GetSparseRequest.reconstruction_id)
}

// -------------------------------------------------------------------

// GetSparseResponse

// .SparsePointCloudData sparse = 1;
inline bool GetSparseResponse::_internal_has_sparse() const {
  return this != internal_default_instance() && sparse_ != nullptr;
}
inline bool GetSparseResponse::has_sparse() const {
  return _internal_has_sparse();
}
inline void GetSparseResponse::clear_sparse() {
  if (GetArenaNoVirtual() == nullptr && sparse_ != nullptr) {
    delete sparse_;
  }
  sparse_ = nullptr;
}
inline const ::SparsePointCloudData& GetSparseResponse::_internal_sparse() const {
  const ::SparsePointCloudData* p = sparse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SparsePointCloudData*>(
      &::_SparsePointCloudData_default_instance_);
}
inline const ::SparsePointCloudData& GetSparseResponse::sparse() const {
  // @@protoc_insertion_point(field_get:GetSparseResponse.sparse)
  return _internal_sparse();
}
inline ::SparsePointCloudData* GetSparseResponse::release_sparse() {
  // @@protoc_insertion_point(field_release:GetSparseResponse.sparse)
  
  ::SparsePointCloudData* temp = sparse_;
  sparse_ = nullptr;
  return temp;
}
inline ::SparsePointCloudData* GetSparseResponse::_internal_mutable_sparse() {
  
  if (sparse_ == nullptr) {
    auto* p = CreateMaybeMessage<::SparsePointCloudData>(GetArenaNoVirtual());
    sparse_ = p;
  }
  return sparse_;
}
inline ::SparsePointCloudData* GetSparseResponse::mutable_sparse() {
  // @@protoc_insertion_point(field_mutable:GetSparseResponse.sparse)
  return _internal_mutable_sparse();
}
inline void GetSparseResponse::set_allocated_sparse(::SparsePointCloudData* sparse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sparse_;
  }
  if (sparse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sparse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sparse, submessage_arena);
    }
    
  } else {
    
  }
  sparse_ = sparse;
  // @@protoc_insertion_point(field_set_allocated:GetSparseResponse.sparse)
}

// -------------------------------------------------------------------

// SetReconstructionConfigRequest

// string reconstruction_id = 1;
inline void SetReconstructionConfigRequest::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetReconstructionConfigRequest::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:SetReconstructionConfigRequest.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void SetReconstructionConfigRequest::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:SetReconstructionConfigRequest.reconstruction_id)
}
inline std::string* SetReconstructionConfigRequest::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:SetReconstructionConfigRequest.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& SetReconstructionConfigRequest::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void SetReconstructionConfigRequest::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetReconstructionConfigRequest::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetReconstructionConfigRequest.reconstruction_id)
}
inline void SetReconstructionConfigRequest::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetReconstructionConfigRequest.reconstruction_id)
}
inline void SetReconstructionConfigRequest::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetReconstructionConfigRequest.reconstruction_id)
}
inline std::string* SetReconstructionConfigRequest::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetReconstructionConfigRequest::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:SetReconstructionConfigRequest.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetReconstructionConfigRequest::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:SetReconstructionConfigRequest.reconstruction_id)
}

// string config_json = 2;
inline void SetReconstructionConfigRequest::clear_config_json() {
  config_json_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetReconstructionConfigRequest::config_json() const {
  // @@protoc_insertion_point(field_get:SetReconstructionConfigRequest.config_json)
  return _internal_config_json();
}
inline void SetReconstructionConfigRequest::set_config_json(const std::string& value) {
  _internal_set_config_json(value);
  // @@protoc_insertion_point(field_set:SetReconstructionConfigRequest.config_json)
}
inline std::string* SetReconstructionConfigRequest::mutable_config_json() {
  // @@protoc_insertion_point(field_mutable:SetReconstructionConfigRequest.config_json)
  return _internal_mutable_config_json();
}
inline const std::string& SetReconstructionConfigRequest::_internal_config_json() const {
  return config_json_.GetNoArena();
}
inline void SetReconstructionConfigRequest::_internal_set_config_json(const std::string& value) {
  
  config_json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetReconstructionConfigRequest::set_config_json(std::string&& value) {
  
  config_json_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetReconstructionConfigRequest.config_json)
}
inline void SetReconstructionConfigRequest::set_config_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetReconstructionConfigRequest.config_json)
}
inline void SetReconstructionConfigRequest::set_config_json(const char* value, size_t size) {
  
  config_json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetReconstructionConfigRequest.config_json)
}
inline std::string* SetReconstructionConfigRequest::_internal_mutable_config_json() {
  
  return config_json_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetReconstructionConfigRequest::release_config_json() {
  // @@protoc_insertion_point(field_release:SetReconstructionConfigRequest.config_json)
  
  return config_json_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetReconstructionConfigRequest::set_allocated_config_json(std::string* config_json) {
  if (config_json != nullptr) {
    
  } else {
    
  }
  config_json_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_json);
  // @@protoc_insertion_point(field_set_allocated:SetReconstructionConfigRequest.config_json)
}

// -------------------------------------------------------------------

// SetReconstructionConfigResponse

// bool success = 1;
inline void SetReconstructionConfigResponse::clear_success() {
  success_ = false;
}
inline bool SetReconstructionConfigResponse::_internal_success() const {
  return success_;
}
inline bool SetReconstructionConfigResponse::success() const {
  // @@protoc_insertion_point(field_get:SetReconstructionConfigResponse.success)
  return _internal_success();
}
inline void SetReconstructionConfigResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SetReconstructionConfigResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SetReconstructionConfigResponse.success)
}

// -------------------------------------------------------------------

// GetReconstructionConfigRequest

// string reconstruction_id = 1;
inline void GetReconstructionConfigRequest::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetReconstructionConfigRequest::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:GetReconstructionConfigRequest.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void GetReconstructionConfigRequest::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:GetReconstructionConfigRequest.reconstruction_id)
}
inline std::string* GetReconstructionConfigRequest::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:GetReconstructionConfigRequest.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& GetReconstructionConfigRequest::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void GetReconstructionConfigRequest::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetReconstructionConfigRequest::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetReconstructionConfigRequest.reconstruction_id)
}
inline void GetReconstructionConfigRequest::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetReconstructionConfigRequest.reconstruction_id)
}
inline void GetReconstructionConfigRequest::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetReconstructionConfigRequest.reconstruction_id)
}
inline std::string* GetReconstructionConfigRequest::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetReconstructionConfigRequest::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:GetReconstructionConfigRequest.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetReconstructionConfigRequest::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:GetReconstructionConfigRequest.reconstruction_id)
}

// -------------------------------------------------------------------

// GetReconstructionConfigResponse

// string config_json = 1;
inline void GetReconstructionConfigResponse::clear_config_json() {
  config_json_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetReconstructionConfigResponse::config_json() const {
  // @@protoc_insertion_point(field_get:GetReconstructionConfigResponse.config_json)
  return _internal_config_json();
}
inline void GetReconstructionConfigResponse::set_config_json(const std::string& value) {
  _internal_set_config_json(value);
  // @@protoc_insertion_point(field_set:GetReconstructionConfigResponse.config_json)
}
inline std::string* GetReconstructionConfigResponse::mutable_config_json() {
  // @@protoc_insertion_point(field_mutable:GetReconstructionConfigResponse.config_json)
  return _internal_mutable_config_json();
}
inline const std::string& GetReconstructionConfigResponse::_internal_config_json() const {
  return config_json_.GetNoArena();
}
inline void GetReconstructionConfigResponse::_internal_set_config_json(const std::string& value) {
  
  config_json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetReconstructionConfigResponse::set_config_json(std::string&& value) {
  
  config_json_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetReconstructionConfigResponse.config_json)
}
inline void GetReconstructionConfigResponse::set_config_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetReconstructionConfigResponse.config_json)
}
inline void GetReconstructionConfigResponse::set_config_json(const char* value, size_t size) {
  
  config_json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetReconstructionConfigResponse.config_json)
}
inline std::string* GetReconstructionConfigResponse::_internal_mutable_config_json() {
  
  return config_json_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetReconstructionConfigResponse::release_config_json() {
  // @@protoc_insertion_point(field_release:GetReconstructionConfigResponse.config_json)
  
  return config_json_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetReconstructionConfigResponse::set_allocated_config_json(std::string* config_json) {
  if (config_json != nullptr) {
    
  } else {
    
  }
  config_json_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_json);
  // @@protoc_insertion_point(field_set_allocated:GetReconstructionConfigResponse.config_json)
}

// -------------------------------------------------------------------

// ReconstructionUploadImageBatchRequest

// int32 idx = 1;
inline void ReconstructionUploadImageBatchRequest::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconstructionUploadImageBatchRequest::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconstructionUploadImageBatchRequest::idx() const {
  // @@protoc_insertion_point(field_get:ReconstructionUploadImageBatchRequest.idx)
  return _internal_idx();
}
inline void ReconstructionUploadImageBatchRequest::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void ReconstructionUploadImageBatchRequest::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:ReconstructionUploadImageBatchRequest.idx)
}

// .ImageData data = 2;
inline bool ReconstructionUploadImageBatchRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ReconstructionUploadImageBatchRequest::has_data() const {
  return _internal_has_data();
}
inline void ReconstructionUploadImageBatchRequest::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::ImageData& ReconstructionUploadImageBatchRequest::_internal_data() const {
  const ::ImageData* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ImageData*>(
      &::_ImageData_default_instance_);
}
inline const ::ImageData& ReconstructionUploadImageBatchRequest::data() const {
  // @@protoc_insertion_point(field_get:ReconstructionUploadImageBatchRequest.data)
  return _internal_data();
}
inline ::ImageData* ReconstructionUploadImageBatchRequest::release_data() {
  // @@protoc_insertion_point(field_release:ReconstructionUploadImageBatchRequest.data)
  
  ::ImageData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::ImageData* ReconstructionUploadImageBatchRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::ImageData>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::ImageData* ReconstructionUploadImageBatchRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ReconstructionUploadImageBatchRequest.data)
  return _internal_mutable_data();
}
inline void ReconstructionUploadImageBatchRequest::set_allocated_data(::ImageData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:ReconstructionUploadImageBatchRequest.data)
}

// -------------------------------------------------------------------

// ReconstructionUploadImageBatchResponse

// int32 images_uploaded = 1;
inline void ReconstructionUploadImageBatchResponse::clear_images_uploaded() {
  images_uploaded_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconstructionUploadImageBatchResponse::_internal_images_uploaded() const {
  return images_uploaded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconstructionUploadImageBatchResponse::images_uploaded() const {
  // @@protoc_insertion_point(field_get:ReconstructionUploadImageBatchResponse.images_uploaded)
  return _internal_images_uploaded();
}
inline void ReconstructionUploadImageBatchResponse::_internal_set_images_uploaded(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  images_uploaded_ = value;
}
inline void ReconstructionUploadImageBatchResponse::set_images_uploaded(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_images_uploaded(value);
  // @@protoc_insertion_point(field_set:ReconstructionUploadImageBatchResponse.images_uploaded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2eproto
