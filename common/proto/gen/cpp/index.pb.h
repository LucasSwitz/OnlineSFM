// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_index_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_index_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_index_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_index_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_index_2eproto;
class ClosestNRequest;
class ClosestNRequestDefaultTypeInternal;
extern ClosestNRequestDefaultTypeInternal _ClosestNRequest_default_instance_;
class ClosestNResponse;
class ClosestNResponseDefaultTypeInternal;
extern ClosestNResponseDefaultTypeInternal _ClosestNResponse_default_instance_;
class GetBagOfWordsRequest;
class GetBagOfWordsRequestDefaultTypeInternal;
extern GetBagOfWordsRequestDefaultTypeInternal _GetBagOfWordsRequest_default_instance_;
class GetBagOfWordsResponse;
class GetBagOfWordsResponseDefaultTypeInternal;
extern GetBagOfWordsResponseDefaultTypeInternal _GetBagOfWordsResponse_default_instance_;
class IndexImageRequest;
class IndexImageRequestDefaultTypeInternal;
extern IndexImageRequestDefaultTypeInternal _IndexImageRequest_default_instance_;
class IndexImageResponse;
class IndexImageResponseDefaultTypeInternal;
extern IndexImageResponseDefaultTypeInternal _IndexImageResponse_default_instance_;
class IndexWord;
class IndexWordDefaultTypeInternal;
extern IndexWordDefaultTypeInternal _IndexWord_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClosestNRequest* Arena::CreateMaybeMessage<::ClosestNRequest>(Arena*);
template<> ::ClosestNResponse* Arena::CreateMaybeMessage<::ClosestNResponse>(Arena*);
template<> ::GetBagOfWordsRequest* Arena::CreateMaybeMessage<::GetBagOfWordsRequest>(Arena*);
template<> ::GetBagOfWordsResponse* Arena::CreateMaybeMessage<::GetBagOfWordsResponse>(Arena*);
template<> ::IndexImageRequest* Arena::CreateMaybeMessage<::IndexImageRequest>(Arena*);
template<> ::IndexImageResponse* Arena::CreateMaybeMessage<::IndexImageResponse>(Arena*);
template<> ::IndexWord* Arena::CreateMaybeMessage<::IndexWord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class IndexWord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndexWord) */ {
 public:
  IndexWord();
  virtual ~IndexWord();

  IndexWord(const IndexWord& from);
  IndexWord(IndexWord&& from) noexcept
    : IndexWord() {
    *this = ::std::move(from);
  }

  inline IndexWord& operator=(const IndexWord& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexWord& operator=(IndexWord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexWord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexWord* internal_default_instance() {
    return reinterpret_cast<const IndexWord*>(
               &_IndexWord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IndexWord& a, IndexWord& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexWord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexWord* New() const final {
    return CreateMaybeMessage<IndexWord>(nullptr);
  }

  IndexWord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexWord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexWord& from);
  void MergeFrom(const IndexWord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexWord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndexWord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
  };
  // bytes word = 1;
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const void* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // @@protoc_insertion_point(class_scope:IndexWord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class IndexImageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndexImageRequest) */ {
 public:
  IndexImageRequest();
  virtual ~IndexImageRequest();

  IndexImageRequest(const IndexImageRequest& from);
  IndexImageRequest(IndexImageRequest&& from) noexcept
    : IndexImageRequest() {
    *this = ::std::move(from);
  }

  inline IndexImageRequest& operator=(const IndexImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexImageRequest& operator=(IndexImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexImageRequest* internal_default_instance() {
    return reinterpret_cast<const IndexImageRequest*>(
               &_IndexImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IndexImageRequest& a, IndexImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexImageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexImageRequest* New() const final {
    return CreateMaybeMessage<IndexImageRequest>(nullptr);
  }

  IndexImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexImageRequest& from);
  void MergeFrom(const IndexImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndexImageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageIdFieldNumber = 1,
  };
  // string image_id = 1;
  void clear_image_id();
  const std::string& image_id() const;
  void set_image_id(const std::string& value);
  void set_image_id(std::string&& value);
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  std::string* mutable_image_id();
  std::string* release_image_id();
  void set_allocated_image_id(std::string* image_id);
  private:
  const std::string& _internal_image_id() const;
  void _internal_set_image_id(const std::string& value);
  std::string* _internal_mutable_image_id();
  public:

  // @@protoc_insertion_point(class_scope:IndexImageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class IndexImageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndexImageResponse) */ {
 public:
  IndexImageResponse();
  virtual ~IndexImageResponse();

  IndexImageResponse(const IndexImageResponse& from);
  IndexImageResponse(IndexImageResponse&& from) noexcept
    : IndexImageResponse() {
    *this = ::std::move(from);
  }

  inline IndexImageResponse& operator=(const IndexImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexImageResponse& operator=(IndexImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexImageResponse* internal_default_instance() {
    return reinterpret_cast<const IndexImageResponse*>(
               &_IndexImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IndexImageResponse& a, IndexImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexImageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexImageResponse* New() const final {
    return CreateMaybeMessage<IndexImageResponse>(nullptr);
  }

  IndexImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexImageResponse& from);
  void MergeFrom(const IndexImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndexImageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndexImageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class GetBagOfWordsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBagOfWordsRequest) */ {
 public:
  GetBagOfWordsRequest();
  virtual ~GetBagOfWordsRequest();

  GetBagOfWordsRequest(const GetBagOfWordsRequest& from);
  GetBagOfWordsRequest(GetBagOfWordsRequest&& from) noexcept
    : GetBagOfWordsRequest() {
    *this = ::std::move(from);
  }

  inline GetBagOfWordsRequest& operator=(const GetBagOfWordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBagOfWordsRequest& operator=(GetBagOfWordsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBagOfWordsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBagOfWordsRequest* internal_default_instance() {
    return reinterpret_cast<const GetBagOfWordsRequest*>(
               &_GetBagOfWordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetBagOfWordsRequest& a, GetBagOfWordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBagOfWordsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBagOfWordsRequest* New() const final {
    return CreateMaybeMessage<GetBagOfWordsRequest>(nullptr);
  }

  GetBagOfWordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBagOfWordsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBagOfWordsRequest& from);
  void MergeFrom(const GetBagOfWordsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBagOfWordsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBagOfWordsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageIdFieldNumber = 1,
  };
  // string image_id = 1;
  void clear_image_id();
  const std::string& image_id() const;
  void set_image_id(const std::string& value);
  void set_image_id(std::string&& value);
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  std::string* mutable_image_id();
  std::string* release_image_id();
  void set_allocated_image_id(std::string* image_id);
  private:
  const std::string& _internal_image_id() const;
  void _internal_set_image_id(const std::string& value);
  std::string* _internal_mutable_image_id();
  public:

  // @@protoc_insertion_point(class_scope:GetBagOfWordsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class GetBagOfWordsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBagOfWordsResponse) */ {
 public:
  GetBagOfWordsResponse();
  virtual ~GetBagOfWordsResponse();

  GetBagOfWordsResponse(const GetBagOfWordsResponse& from);
  GetBagOfWordsResponse(GetBagOfWordsResponse&& from) noexcept
    : GetBagOfWordsResponse() {
    *this = ::std::move(from);
  }

  inline GetBagOfWordsResponse& operator=(const GetBagOfWordsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBagOfWordsResponse& operator=(GetBagOfWordsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBagOfWordsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBagOfWordsResponse* internal_default_instance() {
    return reinterpret_cast<const GetBagOfWordsResponse*>(
               &_GetBagOfWordsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetBagOfWordsResponse& a, GetBagOfWordsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBagOfWordsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBagOfWordsResponse* New() const final {
    return CreateMaybeMessage<GetBagOfWordsResponse>(nullptr);
  }

  GetBagOfWordsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBagOfWordsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBagOfWordsResponse& from);
  void MergeFrom(const GetBagOfWordsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBagOfWordsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBagOfWordsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordsFieldNumber = 1,
  };
  // repeated .IndexWord words = 1;
  int words_size() const;
  private:
  int _internal_words_size() const;
  public:
  void clear_words();
  ::IndexWord* mutable_words(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndexWord >*
      mutable_words();
  private:
  const ::IndexWord& _internal_words(int index) const;
  ::IndexWord* _internal_add_words();
  public:
  const ::IndexWord& words(int index) const;
  ::IndexWord* add_words();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndexWord >&
      words() const;

  // @@protoc_insertion_point(class_scope:GetBagOfWordsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndexWord > words_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class ClosestNRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClosestNRequest) */ {
 public:
  ClosestNRequest();
  virtual ~ClosestNRequest();

  ClosestNRequest(const ClosestNRequest& from);
  ClosestNRequest(ClosestNRequest&& from) noexcept
    : ClosestNRequest() {
    *this = ::std::move(from);
  }

  inline ClosestNRequest& operator=(const ClosestNRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClosestNRequest& operator=(ClosestNRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClosestNRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClosestNRequest* internal_default_instance() {
    return reinterpret_cast<const ClosestNRequest*>(
               &_ClosestNRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClosestNRequest& a, ClosestNRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClosestNRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClosestNRequest* New() const final {
    return CreateMaybeMessage<ClosestNRequest>(nullptr);
  }

  ClosestNRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClosestNRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClosestNRequest& from);
  void MergeFrom(const ClosestNRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClosestNRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClosestNRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageIdFieldNumber = 1,
    kNFieldNumber = 2,
  };
  // string image_id = 1;
  void clear_image_id();
  const std::string& image_id() const;
  void set_image_id(const std::string& value);
  void set_image_id(std::string&& value);
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  std::string* mutable_image_id();
  std::string* release_image_id();
  void set_allocated_image_id(std::string* image_id);
  private:
  const std::string& _internal_image_id() const;
  void _internal_set_image_id(const std::string& value);
  std::string* _internal_mutable_image_id();
  public:

  // uint32 N = 2;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::uint32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClosestNRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class ClosestNResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClosestNResponse) */ {
 public:
  ClosestNResponse();
  virtual ~ClosestNResponse();

  ClosestNResponse(const ClosestNResponse& from);
  ClosestNResponse(ClosestNResponse&& from) noexcept
    : ClosestNResponse() {
    *this = ::std::move(from);
  }

  inline ClosestNResponse& operator=(const ClosestNResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClosestNResponse& operator=(ClosestNResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClosestNResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClosestNResponse* internal_default_instance() {
    return reinterpret_cast<const ClosestNResponse*>(
               &_ClosestNResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClosestNResponse& a, ClosestNResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClosestNResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClosestNResponse* New() const final {
    return CreateMaybeMessage<ClosestNResponse>(nullptr);
  }

  ClosestNResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClosestNResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClosestNResponse& from);
  void MergeFrom(const ClosestNResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClosestNResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClosestNResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageIdsFieldNumber = 1,
  };
  // repeated string image_ids = 1;
  int image_ids_size() const;
  private:
  int _internal_image_ids_size() const;
  public:
  void clear_image_ids();
  const std::string& image_ids(int index) const;
  std::string* mutable_image_ids(int index);
  void set_image_ids(int index, const std::string& value);
  void set_image_ids(int index, std::string&& value);
  void set_image_ids(int index, const char* value);
  void set_image_ids(int index, const char* value, size_t size);
  std::string* add_image_ids();
  void add_image_ids(const std::string& value);
  void add_image_ids(std::string&& value);
  void add_image_ids(const char* value);
  void add_image_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& image_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_image_ids();
  private:
  const std::string& _internal_image_ids(int index) const;
  std::string* _internal_add_image_ids();
  public:

  // @@protoc_insertion_point(class_scope:ClosestNResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> image_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IndexWord

// bytes word = 1;
inline void IndexWord::clear_word() {
  word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexWord::word() const {
  // @@protoc_insertion_point(field_get:IndexWord.word)
  return _internal_word();
}
inline void IndexWord::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:IndexWord.word)
}
inline std::string* IndexWord::mutable_word() {
  // @@protoc_insertion_point(field_mutable:IndexWord.word)
  return _internal_mutable_word();
}
inline const std::string& IndexWord::_internal_word() const {
  return word_.GetNoArena();
}
inline void IndexWord::_internal_set_word(const std::string& value) {
  
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexWord::set_word(std::string&& value) {
  
  word_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndexWord.word)
}
inline void IndexWord::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexWord.word)
}
inline void IndexWord::set_word(const void* value, size_t size) {
  
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexWord.word)
}
inline std::string* IndexWord::_internal_mutable_word() {
  
  return word_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexWord::release_word() {
  // @@protoc_insertion_point(field_release:IndexWord.word)
  
  return word_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexWord::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    
  } else {
    
  }
  word_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:IndexWord.word)
}

// -------------------------------------------------------------------

// IndexImageRequest

// string image_id = 1;
inline void IndexImageRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexImageRequest::image_id() const {
  // @@protoc_insertion_point(field_get:IndexImageRequest.image_id)
  return _internal_image_id();
}
inline void IndexImageRequest::set_image_id(const std::string& value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:IndexImageRequest.image_id)
}
inline std::string* IndexImageRequest::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable:IndexImageRequest.image_id)
  return _internal_mutable_image_id();
}
inline const std::string& IndexImageRequest::_internal_image_id() const {
  return image_id_.GetNoArena();
}
inline void IndexImageRequest::_internal_set_image_id(const std::string& value) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexImageRequest::set_image_id(std::string&& value) {
  
  image_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndexImageRequest.image_id)
}
inline void IndexImageRequest::set_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndexImageRequest.image_id)
}
inline void IndexImageRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndexImageRequest.image_id)
}
inline std::string* IndexImageRequest::_internal_mutable_image_id() {
  
  return image_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexImageRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:IndexImageRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexImageRequest::set_allocated_image_id(std::string* image_id) {
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:IndexImageRequest.image_id)
}

// -------------------------------------------------------------------

// IndexImageResponse

// -------------------------------------------------------------------

// GetBagOfWordsRequest

// string image_id = 1;
inline void GetBagOfWordsRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBagOfWordsRequest::image_id() const {
  // @@protoc_insertion_point(field_get:GetBagOfWordsRequest.image_id)
  return _internal_image_id();
}
inline void GetBagOfWordsRequest::set_image_id(const std::string& value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:GetBagOfWordsRequest.image_id)
}
inline std::string* GetBagOfWordsRequest::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable:GetBagOfWordsRequest.image_id)
  return _internal_mutable_image_id();
}
inline const std::string& GetBagOfWordsRequest::_internal_image_id() const {
  return image_id_.GetNoArena();
}
inline void GetBagOfWordsRequest::_internal_set_image_id(const std::string& value) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBagOfWordsRequest::set_image_id(std::string&& value) {
  
  image_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBagOfWordsRequest.image_id)
}
inline void GetBagOfWordsRequest::set_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBagOfWordsRequest.image_id)
}
inline void GetBagOfWordsRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBagOfWordsRequest.image_id)
}
inline std::string* GetBagOfWordsRequest::_internal_mutable_image_id() {
  
  return image_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBagOfWordsRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:GetBagOfWordsRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBagOfWordsRequest::set_allocated_image_id(std::string* image_id) {
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:GetBagOfWordsRequest.image_id)
}

// -------------------------------------------------------------------

// GetBagOfWordsResponse

// repeated .IndexWord words = 1;
inline int GetBagOfWordsResponse::_internal_words_size() const {
  return words_.size();
}
inline int GetBagOfWordsResponse::words_size() const {
  return _internal_words_size();
}
inline void GetBagOfWordsResponse::clear_words() {
  words_.Clear();
}
inline ::IndexWord* GetBagOfWordsResponse::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:GetBagOfWordsResponse.words)
  return words_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndexWord >*
GetBagOfWordsResponse::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:GetBagOfWordsResponse.words)
  return &words_;
}
inline const ::IndexWord& GetBagOfWordsResponse::_internal_words(int index) const {
  return words_.Get(index);
}
inline const ::IndexWord& GetBagOfWordsResponse::words(int index) const {
  // @@protoc_insertion_point(field_get:GetBagOfWordsResponse.words)
  return _internal_words(index);
}
inline ::IndexWord* GetBagOfWordsResponse::_internal_add_words() {
  return words_.Add();
}
inline ::IndexWord* GetBagOfWordsResponse::add_words() {
  // @@protoc_insertion_point(field_add:GetBagOfWordsResponse.words)
  return _internal_add_words();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndexWord >&
GetBagOfWordsResponse::words() const {
  // @@protoc_insertion_point(field_list:GetBagOfWordsResponse.words)
  return words_;
}

// -------------------------------------------------------------------

// ClosestNRequest

// string image_id = 1;
inline void ClosestNRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClosestNRequest::image_id() const {
  // @@protoc_insertion_point(field_get:ClosestNRequest.image_id)
  return _internal_image_id();
}
inline void ClosestNRequest::set_image_id(const std::string& value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:ClosestNRequest.image_id)
}
inline std::string* ClosestNRequest::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable:ClosestNRequest.image_id)
  return _internal_mutable_image_id();
}
inline const std::string& ClosestNRequest::_internal_image_id() const {
  return image_id_.GetNoArena();
}
inline void ClosestNRequest::_internal_set_image_id(const std::string& value) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClosestNRequest::set_image_id(std::string&& value) {
  
  image_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClosestNRequest.image_id)
}
inline void ClosestNRequest::set_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClosestNRequest.image_id)
}
inline void ClosestNRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClosestNRequest.image_id)
}
inline std::string* ClosestNRequest::_internal_mutable_image_id() {
  
  return image_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClosestNRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:ClosestNRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClosestNRequest::set_allocated_image_id(std::string* image_id) {
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:ClosestNRequest.image_id)
}

// uint32 N = 2;
inline void ClosestNRequest::clear_n() {
  n_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClosestNRequest::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClosestNRequest::n() const {
  // @@protoc_insertion_point(field_get:ClosestNRequest.N)
  return _internal_n();
}
inline void ClosestNRequest::_internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_ = value;
}
inline void ClosestNRequest::set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:ClosestNRequest.N)
}

// -------------------------------------------------------------------

// ClosestNResponse

// repeated string image_ids = 1;
inline int ClosestNResponse::_internal_image_ids_size() const {
  return image_ids_.size();
}
inline int ClosestNResponse::image_ids_size() const {
  return _internal_image_ids_size();
}
inline void ClosestNResponse::clear_image_ids() {
  image_ids_.Clear();
}
inline std::string* ClosestNResponse::add_image_ids() {
  // @@protoc_insertion_point(field_add_mutable:ClosestNResponse.image_ids)
  return _internal_add_image_ids();
}
inline const std::string& ClosestNResponse::_internal_image_ids(int index) const {
  return image_ids_.Get(index);
}
inline const std::string& ClosestNResponse::image_ids(int index) const {
  // @@protoc_insertion_point(field_get:ClosestNResponse.image_ids)
  return _internal_image_ids(index);
}
inline std::string* ClosestNResponse::mutable_image_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ClosestNResponse.image_ids)
  return image_ids_.Mutable(index);
}
inline void ClosestNResponse::set_image_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClosestNResponse.image_ids)
  image_ids_.Mutable(index)->assign(value);
}
inline void ClosestNResponse::set_image_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClosestNResponse.image_ids)
  image_ids_.Mutable(index)->assign(std::move(value));
}
inline void ClosestNResponse::set_image_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  image_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClosestNResponse.image_ids)
}
inline void ClosestNResponse::set_image_ids(int index, const char* value, size_t size) {
  image_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClosestNResponse.image_ids)
}
inline std::string* ClosestNResponse::_internal_add_image_ids() {
  return image_ids_.Add();
}
inline void ClosestNResponse::add_image_ids(const std::string& value) {
  image_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClosestNResponse.image_ids)
}
inline void ClosestNResponse::add_image_ids(std::string&& value) {
  image_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClosestNResponse.image_ids)
}
inline void ClosestNResponse::add_image_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  image_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClosestNResponse.image_ids)
}
inline void ClosestNResponse::add_image_ids(const char* value, size_t size) {
  image_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClosestNResponse.image_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClosestNResponse::image_ids() const {
  // @@protoc_insertion_point(field_list:ClosestNResponse.image_ids)
  return image_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClosestNResponse::mutable_image_ids() {
  // @@protoc_insertion_point(field_mutable_list:ClosestNResponse.image_ids)
  return &image_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_index_2eproto
