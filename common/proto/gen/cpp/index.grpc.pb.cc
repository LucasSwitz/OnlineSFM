// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: index.proto

#include "index.pb.h"
#include "index.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* VisualIndexingService_method_names[] = {
  "/VisualIndexingService/IndexImage",
  "/VisualIndexingService/GetBagOfWords",
  "/VisualIndexingService/ClosestN",
  "/VisualIndexingService/ScoreImage",
};

std::unique_ptr< VisualIndexingService::Stub> VisualIndexingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VisualIndexingService::Stub> stub(new VisualIndexingService::Stub(channel));
  return stub;
}

VisualIndexingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_IndexImage_(VisualIndexingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBagOfWords_(VisualIndexingService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClosestN_(VisualIndexingService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScoreImage_(VisualIndexingService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VisualIndexingService::Stub::IndexImage(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::IndexImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IndexImage_, context, request, response);
}

void VisualIndexingService::Stub::experimental_async::IndexImage(::grpc::ClientContext* context, const ::IndexImageRequest* request, ::IndexImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IndexImage_, context, request, response, std::move(f));
}

void VisualIndexingService::Stub::experimental_async::IndexImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndexImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IndexImage_, context, request, response, std::move(f));
}

void VisualIndexingService::Stub::experimental_async::IndexImage(::grpc::ClientContext* context, const ::IndexImageRequest* request, ::IndexImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IndexImage_, context, request, response, reactor);
}

void VisualIndexingService::Stub::experimental_async::IndexImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndexImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IndexImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndexImageResponse>* VisualIndexingService::Stub::AsyncIndexImageRaw(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndexImageResponse>::Create(channel_.get(), cq, rpcmethod_IndexImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndexImageResponse>* VisualIndexingService::Stub::PrepareAsyncIndexImageRaw(::grpc::ClientContext* context, const ::IndexImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndexImageResponse>::Create(channel_.get(), cq, rpcmethod_IndexImage_, context, request, false);
}

::grpc::Status VisualIndexingService::Stub::GetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::GetBagOfWordsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBagOfWords_, context, request, response);
}

void VisualIndexingService::Stub::experimental_async::GetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest* request, ::GetBagOfWordsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBagOfWords_, context, request, response, std::move(f));
}

void VisualIndexingService::Stub::experimental_async::GetBagOfWords(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetBagOfWordsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBagOfWords_, context, request, response, std::move(f));
}

void VisualIndexingService::Stub::experimental_async::GetBagOfWords(::grpc::ClientContext* context, const ::GetBagOfWordsRequest* request, ::GetBagOfWordsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBagOfWords_, context, request, response, reactor);
}

void VisualIndexingService::Stub::experimental_async::GetBagOfWords(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetBagOfWordsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBagOfWords_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetBagOfWordsResponse>* VisualIndexingService::Stub::AsyncGetBagOfWordsRaw(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GetBagOfWordsResponse>::Create(channel_.get(), cq, rpcmethod_GetBagOfWords_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GetBagOfWordsResponse>* VisualIndexingService::Stub::PrepareAsyncGetBagOfWordsRaw(::grpc::ClientContext* context, const ::GetBagOfWordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GetBagOfWordsResponse>::Create(channel_.get(), cq, rpcmethod_GetBagOfWords_, context, request, false);
}

::grpc::Status VisualIndexingService::Stub::ClosestN(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::ClosestNResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClosestN_, context, request, response);
}

void VisualIndexingService::Stub::experimental_async::ClosestN(::grpc::ClientContext* context, const ::ClosestNRequest* request, ::ClosestNResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClosestN_, context, request, response, std::move(f));
}

void VisualIndexingService::Stub::experimental_async::ClosestN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ClosestNResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClosestN_, context, request, response, std::move(f));
}

void VisualIndexingService::Stub::experimental_async::ClosestN(::grpc::ClientContext* context, const ::ClosestNRequest* request, ::ClosestNResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClosestN_, context, request, response, reactor);
}

void VisualIndexingService::Stub::experimental_async::ClosestN(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ClosestNResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClosestN_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClosestNResponse>* VisualIndexingService::Stub::AsyncClosestNRaw(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ClosestNResponse>::Create(channel_.get(), cq, rpcmethod_ClosestN_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ClosestNResponse>* VisualIndexingService::Stub::PrepareAsyncClosestNRaw(::grpc::ClientContext* context, const ::ClosestNRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ClosestNResponse>::Create(channel_.get(), cq, rpcmethod_ClosestN_, context, request, false);
}

::grpc::Status VisualIndexingService::Stub::ScoreImage(::grpc::ClientContext* context, const ::ScoreImageRequest& request, ::ScoreImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ScoreImage_, context, request, response);
}

void VisualIndexingService::Stub::experimental_async::ScoreImage(::grpc::ClientContext* context, const ::ScoreImageRequest* request, ::ScoreImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ScoreImage_, context, request, response, std::move(f));
}

void VisualIndexingService::Stub::experimental_async::ScoreImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ScoreImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ScoreImage_, context, request, response, std::move(f));
}

void VisualIndexingService::Stub::experimental_async::ScoreImage(::grpc::ClientContext* context, const ::ScoreImageRequest* request, ::ScoreImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ScoreImage_, context, request, response, reactor);
}

void VisualIndexingService::Stub::experimental_async::ScoreImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ScoreImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ScoreImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ScoreImageResponse>* VisualIndexingService::Stub::AsyncScoreImageRaw(::grpc::ClientContext* context, const ::ScoreImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ScoreImageResponse>::Create(channel_.get(), cq, rpcmethod_ScoreImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ScoreImageResponse>* VisualIndexingService::Stub::PrepareAsyncScoreImageRaw(::grpc::ClientContext* context, const ::ScoreImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ScoreImageResponse>::Create(channel_.get(), cq, rpcmethod_ScoreImage_, context, request, false);
}

VisualIndexingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VisualIndexingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VisualIndexingService::Service, ::IndexImageRequest, ::IndexImageResponse>(
          std::mem_fn(&VisualIndexingService::Service::IndexImage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VisualIndexingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VisualIndexingService::Service, ::GetBagOfWordsRequest, ::GetBagOfWordsResponse>(
          std::mem_fn(&VisualIndexingService::Service::GetBagOfWords), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VisualIndexingService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VisualIndexingService::Service, ::ClosestNRequest, ::ClosestNResponse>(
          std::mem_fn(&VisualIndexingService::Service::ClosestN), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VisualIndexingService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VisualIndexingService::Service, ::ScoreImageRequest, ::ScoreImageResponse>(
          std::mem_fn(&VisualIndexingService::Service::ScoreImage), this)));
}

VisualIndexingService::Service::~Service() {
}

::grpc::Status VisualIndexingService::Service::IndexImage(::grpc::ServerContext* context, const ::IndexImageRequest* request, ::IndexImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VisualIndexingService::Service::GetBagOfWords(::grpc::ServerContext* context, const ::GetBagOfWordsRequest* request, ::GetBagOfWordsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VisualIndexingService::Service::ClosestN(::grpc::ServerContext* context, const ::ClosestNRequest* request, ::ClosestNResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VisualIndexingService::Service::ScoreImage(::grpc::ServerContext* context, const ::ScoreImageRequest* request, ::ScoreImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


