// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: worker.proto
#ifndef GRPC_worker_2eproto__INCLUDED
#define GRPC_worker_2eproto__INCLUDED

#include "worker.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class WorkerPoolManager final {
 public:
  static constexpr char const* service_full_name() {
    return "WorkerPoolManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::WorkerComputeFeaturesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeFeaturesResponse>> AsyncComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeFeaturesResponse>>(AsyncComputeFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeFeaturesResponse>> PrepareAsyncComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeFeaturesResponse>>(PrepareAsyncComputeFeaturesRaw(context, request, cq));
    }
    virtual ::grpc::Status ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::WorkerComputeMatchesReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeMatchesReponse>> AsyncComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeMatchesReponse>>(AsyncComputeMatchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeMatchesReponse>> PrepareAsyncComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeMatchesReponse>>(PrepareAsyncComputeMatchesRaw(context, request, cq));
    }
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::RegisterWorkerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterWorkerResponse>> AsyncRegister(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterWorkerResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterWorkerResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterWorkerResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Register(::grpc::ClientContext* context, const ::RegisterWorkerRequest* request, ::RegisterWorkerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterWorkerResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Register(::grpc::ClientContext* context, const ::RegisterWorkerRequest* request, ::RegisterWorkerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Register(::grpc::ClientContext* context, const ::RegisterWorkerRequest* request, ::RegisterWorkerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterWorkerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterWorkerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeFeaturesResponse>* AsyncComputeFeaturesRaw(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeFeaturesResponse>* PrepareAsyncComputeFeaturesRaw(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeMatchesReponse>* AsyncComputeMatchesRaw(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeMatchesReponse>* PrepareAsyncComputeMatchesRaw(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RegisterWorkerResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RegisterWorkerResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::WorkerComputeFeaturesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>> AsyncComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>>(AsyncComputeFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>> PrepareAsyncComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>>(PrepareAsyncComputeFeaturesRaw(context, request, cq));
    }
    ::grpc::Status ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::WorkerComputeMatchesReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>> AsyncComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>>(AsyncComputeMatchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>> PrepareAsyncComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>>(PrepareAsyncComputeMatchesRaw(context, request, cq));
    }
    ::grpc::Status Register(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::RegisterWorkerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterWorkerResponse>> AsyncRegister(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterWorkerResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterWorkerResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterWorkerResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, std::function<void(::grpc::Status)>) override;
      void ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, std::function<void(::grpc::Status)>) override;
      void ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Register(::grpc::ClientContext* context, const ::RegisterWorkerRequest* request, ::RegisterWorkerResponse* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterWorkerResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Register(::grpc::ClientContext* context, const ::RegisterWorkerRequest* request, ::RegisterWorkerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Register(::grpc::ClientContext* context, const ::RegisterWorkerRequest* request, ::RegisterWorkerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterWorkerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterWorkerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>* AsyncComputeFeaturesRaw(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>* PrepareAsyncComputeFeaturesRaw(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>* AsyncComputeMatchesRaw(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>* PrepareAsyncComputeMatchesRaw(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RegisterWorkerResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RegisterWorkerResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::RegisterWorkerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ComputeFeatures_;
    const ::grpc::internal::RpcMethod rpcmethod_ComputeMatches_;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ComputeFeatures(::grpc::ServerContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response);
    virtual ::grpc::Status ComputeMatches(::grpc::ServerContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response);
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::RegisterWorkerRequest* request, ::RegisterWorkerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ComputeFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ComputeFeatures() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ComputeFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeFeatures(::grpc::ServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComputeFeatures(::grpc::ServerContext* context, ::WorkerComputeFeaturesRequest* request, ::grpc::ServerAsyncResponseWriter< ::WorkerComputeFeaturesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ComputeMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ComputeMatches() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ComputeMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeMatches(::grpc::ServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComputeMatches(::grpc::ServerContext* context, ::WorkerComputeMatchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::WorkerComputeMatchesReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::RegisterWorkerRequest* /*request*/, ::RegisterWorkerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::RegisterWorkerRequest* request, ::grpc::ServerAsyncResponseWriter< ::RegisterWorkerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ComputeFeatures<WithAsyncMethod_ComputeMatches<WithAsyncMethod_Register<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ComputeFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ComputeFeatures() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::WorkerComputeFeaturesRequest, ::WorkerComputeFeaturesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response) { return this->ComputeFeatures(context, request, response); }));}
    void SetMessageAllocatorFor_ComputeFeatures(
        ::grpc::experimental::MessageAllocator< ::WorkerComputeFeaturesRequest, ::WorkerComputeFeaturesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::WorkerComputeFeaturesRequest, ::WorkerComputeFeaturesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ComputeFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeFeatures(::grpc::ServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ComputeFeatures(
      ::grpc::CallbackServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ComputeFeatures(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ComputeMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ComputeMatches() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::WorkerComputeMatchesRequest, ::WorkerComputeMatchesReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response) { return this->ComputeMatches(context, request, response); }));}
    void SetMessageAllocatorFor_ComputeMatches(
        ::grpc::experimental::MessageAllocator< ::WorkerComputeMatchesRequest, ::WorkerComputeMatchesReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::WorkerComputeMatchesRequest, ::WorkerComputeMatchesReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ComputeMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeMatches(::grpc::ServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ComputeMatches(
      ::grpc::CallbackServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ComputeMatches(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Register() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::RegisterWorkerRequest, ::RegisterWorkerResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::RegisterWorkerRequest* request, ::RegisterWorkerResponse* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::experimental::MessageAllocator< ::RegisterWorkerRequest, ::RegisterWorkerResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::RegisterWorkerRequest, ::RegisterWorkerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::RegisterWorkerRequest* /*request*/, ::RegisterWorkerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::RegisterWorkerRequest* /*request*/, ::RegisterWorkerResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Register(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::RegisterWorkerRequest* /*request*/, ::RegisterWorkerResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ComputeFeatures<ExperimentalWithCallbackMethod_ComputeMatches<ExperimentalWithCallbackMethod_Register<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ComputeFeatures<ExperimentalWithCallbackMethod_ComputeMatches<ExperimentalWithCallbackMethod_Register<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ComputeFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ComputeFeatures() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ComputeFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeFeatures(::grpc::ServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ComputeMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ComputeMatches() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ComputeMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeMatches(::grpc::ServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::RegisterWorkerRequest* /*request*/, ::RegisterWorkerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ComputeFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ComputeFeatures() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ComputeFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeFeatures(::grpc::ServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComputeFeatures(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ComputeMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ComputeMatches() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ComputeMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeMatches(::grpc::ServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComputeMatches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::RegisterWorkerRequest* /*request*/, ::RegisterWorkerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ComputeFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ComputeFeatures() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ComputeFeatures(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ComputeFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeFeatures(::grpc::ServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ComputeFeatures(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ComputeFeatures(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ComputeMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ComputeMatches() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ComputeMatches(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ComputeMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeMatches(::grpc::ServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ComputeMatches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ComputeMatches(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Register() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::RegisterWorkerRequest* /*request*/, ::RegisterWorkerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Register(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ComputeFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ComputeFeatures() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::WorkerComputeFeaturesRequest, ::WorkerComputeFeaturesResponse>(std::bind(&WithStreamedUnaryMethod_ComputeFeatures<BaseClass>::StreamedComputeFeatures, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ComputeFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ComputeFeatures(::grpc::ServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedComputeFeatures(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::WorkerComputeFeaturesRequest,::WorkerComputeFeaturesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ComputeMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ComputeMatches() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::WorkerComputeMatchesRequest, ::WorkerComputeMatchesReponse>(std::bind(&WithStreamedUnaryMethod_ComputeMatches<BaseClass>::StreamedComputeMatches, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ComputeMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ComputeMatches(::grpc::ServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedComputeMatches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::WorkerComputeMatchesRequest,::WorkerComputeMatchesReponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::RegisterWorkerRequest, ::RegisterWorkerResponse>(std::bind(&WithStreamedUnaryMethod_Register<BaseClass>::StreamedRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::RegisterWorkerRequest* /*request*/, ::RegisterWorkerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RegisterWorkerRequest,::RegisterWorkerResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ComputeFeatures<WithStreamedUnaryMethod_ComputeMatches<WithStreamedUnaryMethod_Register<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ComputeFeatures<WithStreamedUnaryMethod_ComputeMatches<WithStreamedUnaryMethod_Register<Service > > > StreamedService;
};

class Worker final {
 public:
  static constexpr char const* service_full_name() {
    return "Worker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::WorkerComputeFeaturesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeFeaturesResponse>> AsyncComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeFeaturesResponse>>(AsyncComputeFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeFeaturesResponse>> PrepareAsyncComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeFeaturesResponse>>(PrepareAsyncComputeFeaturesRaw(context, request, cq));
    }
    virtual ::grpc::Status ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::WorkerComputeMatchesReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeMatchesReponse>> AsyncComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeMatchesReponse>>(AsyncComputeMatchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeMatchesReponse>> PrepareAsyncComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeMatchesReponse>>(PrepareAsyncComputeMatchesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeFeaturesResponse>* AsyncComputeFeaturesRaw(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeFeaturesResponse>* PrepareAsyncComputeFeaturesRaw(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeMatchesReponse>* AsyncComputeMatchesRaw(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WorkerComputeMatchesReponse>* PrepareAsyncComputeMatchesRaw(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::WorkerComputeFeaturesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>> AsyncComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>>(AsyncComputeFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>> PrepareAsyncComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>>(PrepareAsyncComputeFeaturesRaw(context, request, cq));
    }
    ::grpc::Status ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::WorkerComputeMatchesReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>> AsyncComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>>(AsyncComputeMatchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>> PrepareAsyncComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>>(PrepareAsyncComputeMatchesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, std::function<void(::grpc::Status)>) override;
      void ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ComputeFeatures(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ComputeFeatures(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeFeaturesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, std::function<void(::grpc::Status)>) override;
      void ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ComputeMatches(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ComputeMatches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::WorkerComputeMatchesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>* AsyncComputeFeaturesRaw(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::WorkerComputeFeaturesResponse>* PrepareAsyncComputeFeaturesRaw(::grpc::ClientContext* context, const ::WorkerComputeFeaturesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>* AsyncComputeMatchesRaw(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::WorkerComputeMatchesReponse>* PrepareAsyncComputeMatchesRaw(::grpc::ClientContext* context, const ::WorkerComputeMatchesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ComputeFeatures_;
    const ::grpc::internal::RpcMethod rpcmethod_ComputeMatches_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ComputeFeatures(::grpc::ServerContext* context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response);
    virtual ::grpc::Status ComputeMatches(::grpc::ServerContext* context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ComputeFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ComputeFeatures() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ComputeFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeFeatures(::grpc::ServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComputeFeatures(::grpc::ServerContext* context, ::WorkerComputeFeaturesRequest* request, ::grpc::ServerAsyncResponseWriter< ::WorkerComputeFeaturesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ComputeMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ComputeMatches() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ComputeMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeMatches(::grpc::ServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComputeMatches(::grpc::ServerContext* context, ::WorkerComputeMatchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::WorkerComputeMatchesReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ComputeFeatures<WithAsyncMethod_ComputeMatches<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ComputeFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ComputeFeatures() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::WorkerComputeFeaturesRequest, ::WorkerComputeFeaturesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::WorkerComputeFeaturesRequest* request, ::WorkerComputeFeaturesResponse* response) { return this->ComputeFeatures(context, request, response); }));}
    void SetMessageAllocatorFor_ComputeFeatures(
        ::grpc::experimental::MessageAllocator< ::WorkerComputeFeaturesRequest, ::WorkerComputeFeaturesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::WorkerComputeFeaturesRequest, ::WorkerComputeFeaturesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ComputeFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeFeatures(::grpc::ServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ComputeFeatures(
      ::grpc::CallbackServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ComputeFeatures(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ComputeMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ComputeMatches() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::WorkerComputeMatchesRequest, ::WorkerComputeMatchesReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::WorkerComputeMatchesRequest* request, ::WorkerComputeMatchesReponse* response) { return this->ComputeMatches(context, request, response); }));}
    void SetMessageAllocatorFor_ComputeMatches(
        ::grpc::experimental::MessageAllocator< ::WorkerComputeMatchesRequest, ::WorkerComputeMatchesReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::WorkerComputeMatchesRequest, ::WorkerComputeMatchesReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ComputeMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeMatches(::grpc::ServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ComputeMatches(
      ::grpc::CallbackServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ComputeMatches(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ComputeFeatures<ExperimentalWithCallbackMethod_ComputeMatches<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ComputeFeatures<ExperimentalWithCallbackMethod_ComputeMatches<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ComputeFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ComputeFeatures() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ComputeFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeFeatures(::grpc::ServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ComputeMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ComputeMatches() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ComputeMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeMatches(::grpc::ServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ComputeFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ComputeFeatures() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ComputeFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeFeatures(::grpc::ServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComputeFeatures(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ComputeMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ComputeMatches() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ComputeMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeMatches(::grpc::ServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComputeMatches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ComputeFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ComputeFeatures() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ComputeFeatures(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ComputeFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeFeatures(::grpc::ServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ComputeFeatures(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ComputeFeatures(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ComputeMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ComputeMatches() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ComputeMatches(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ComputeMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeMatches(::grpc::ServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ComputeMatches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ComputeMatches(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ComputeFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ComputeFeatures() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::WorkerComputeFeaturesRequest, ::WorkerComputeFeaturesResponse>(std::bind(&WithStreamedUnaryMethod_ComputeFeatures<BaseClass>::StreamedComputeFeatures, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ComputeFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ComputeFeatures(::grpc::ServerContext* /*context*/, const ::WorkerComputeFeaturesRequest* /*request*/, ::WorkerComputeFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedComputeFeatures(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::WorkerComputeFeaturesRequest,::WorkerComputeFeaturesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ComputeMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ComputeMatches() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::WorkerComputeMatchesRequest, ::WorkerComputeMatchesReponse>(std::bind(&WithStreamedUnaryMethod_ComputeMatches<BaseClass>::StreamedComputeMatches, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ComputeMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ComputeMatches(::grpc::ServerContext* /*context*/, const ::WorkerComputeMatchesRequest* /*request*/, ::WorkerComputeMatchesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedComputeMatches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::WorkerComputeMatchesRequest,::WorkerComputeMatchesReponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ComputeFeatures<WithStreamedUnaryMethod_ComputeMatches<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ComputeFeatures<WithStreamedUnaryMethod_ComputeMatches<Service > > StreamedService;
};


#endif  // GRPC_worker_2eproto__INCLUDED
