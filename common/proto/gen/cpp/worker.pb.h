// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_worker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_worker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_worker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_worker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_worker_2eproto;
class RegisterWorkerRequest;
class RegisterWorkerRequestDefaultTypeInternal;
extern RegisterWorkerRequestDefaultTypeInternal _RegisterWorkerRequest_default_instance_;
class RegisterWorkerResponse;
class RegisterWorkerResponseDefaultTypeInternal;
extern RegisterWorkerResponseDefaultTypeInternal _RegisterWorkerResponse_default_instance_;
class WorkerComputeFeaturesRequest;
class WorkerComputeFeaturesRequestDefaultTypeInternal;
extern WorkerComputeFeaturesRequestDefaultTypeInternal _WorkerComputeFeaturesRequest_default_instance_;
class WorkerComputeFeaturesResponse;
class WorkerComputeFeaturesResponseDefaultTypeInternal;
extern WorkerComputeFeaturesResponseDefaultTypeInternal _WorkerComputeFeaturesResponse_default_instance_;
class WorkerComputeMatchesReponse;
class WorkerComputeMatchesReponseDefaultTypeInternal;
extern WorkerComputeMatchesReponseDefaultTypeInternal _WorkerComputeMatchesReponse_default_instance_;
class WorkerComputeMatchesRequest;
class WorkerComputeMatchesRequestDefaultTypeInternal;
extern WorkerComputeMatchesRequestDefaultTypeInternal _WorkerComputeMatchesRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RegisterWorkerRequest* Arena::CreateMaybeMessage<::RegisterWorkerRequest>(Arena*);
template<> ::RegisterWorkerResponse* Arena::CreateMaybeMessage<::RegisterWorkerResponse>(Arena*);
template<> ::WorkerComputeFeaturesRequest* Arena::CreateMaybeMessage<::WorkerComputeFeaturesRequest>(Arena*);
template<> ::WorkerComputeFeaturesResponse* Arena::CreateMaybeMessage<::WorkerComputeFeaturesResponse>(Arena*);
template<> ::WorkerComputeMatchesReponse* Arena::CreateMaybeMessage<::WorkerComputeMatchesReponse>(Arena*);
template<> ::WorkerComputeMatchesRequest* Arena::CreateMaybeMessage<::WorkerComputeMatchesRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class WorkerComputeFeaturesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorkerComputeFeaturesRequest) */ {
 public:
  WorkerComputeFeaturesRequest();
  virtual ~WorkerComputeFeaturesRequest();

  WorkerComputeFeaturesRequest(const WorkerComputeFeaturesRequest& from);
  WorkerComputeFeaturesRequest(WorkerComputeFeaturesRequest&& from) noexcept
    : WorkerComputeFeaturesRequest() {
    *this = ::std::move(from);
  }

  inline WorkerComputeFeaturesRequest& operator=(const WorkerComputeFeaturesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerComputeFeaturesRequest& operator=(WorkerComputeFeaturesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerComputeFeaturesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerComputeFeaturesRequest* internal_default_instance() {
    return reinterpret_cast<const WorkerComputeFeaturesRequest*>(
               &_WorkerComputeFeaturesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkerComputeFeaturesRequest& a, WorkerComputeFeaturesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerComputeFeaturesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerComputeFeaturesRequest* New() const final {
    return CreateMaybeMessage<WorkerComputeFeaturesRequest>(nullptr);
  }

  WorkerComputeFeaturesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerComputeFeaturesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerComputeFeaturesRequest& from);
  void MergeFrom(const WorkerComputeFeaturesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerComputeFeaturesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorkerComputeFeaturesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_worker_2eproto);
    return ::descriptor_table_worker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
    kImageIdFieldNumber = 2,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // string image_id = 2;
  void clear_image_id();
  const std::string& image_id() const;
  void set_image_id(const std::string& value);
  void set_image_id(std::string&& value);
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  std::string* mutable_image_id();
  std::string* release_image_id();
  void set_allocated_image_id(std::string* image_id);
  private:
  const std::string& _internal_image_id() const;
  void _internal_set_image_id(const std::string& value);
  std::string* _internal_mutable_image_id();
  public:

  // @@protoc_insertion_point(class_scope:WorkerComputeFeaturesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class WorkerComputeFeaturesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorkerComputeFeaturesResponse) */ {
 public:
  WorkerComputeFeaturesResponse();
  virtual ~WorkerComputeFeaturesResponse();

  WorkerComputeFeaturesResponse(const WorkerComputeFeaturesResponse& from);
  WorkerComputeFeaturesResponse(WorkerComputeFeaturesResponse&& from) noexcept
    : WorkerComputeFeaturesResponse() {
    *this = ::std::move(from);
  }

  inline WorkerComputeFeaturesResponse& operator=(const WorkerComputeFeaturesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerComputeFeaturesResponse& operator=(WorkerComputeFeaturesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerComputeFeaturesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerComputeFeaturesResponse* internal_default_instance() {
    return reinterpret_cast<const WorkerComputeFeaturesResponse*>(
               &_WorkerComputeFeaturesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WorkerComputeFeaturesResponse& a, WorkerComputeFeaturesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerComputeFeaturesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerComputeFeaturesResponse* New() const final {
    return CreateMaybeMessage<WorkerComputeFeaturesResponse>(nullptr);
  }

  WorkerComputeFeaturesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerComputeFeaturesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerComputeFeaturesResponse& from);
  void MergeFrom(const WorkerComputeFeaturesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerComputeFeaturesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorkerComputeFeaturesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_worker_2eproto);
    return ::descriptor_table_worker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:WorkerComputeFeaturesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class WorkerComputeMatchesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorkerComputeMatchesRequest) */ {
 public:
  WorkerComputeMatchesRequest();
  virtual ~WorkerComputeMatchesRequest();

  WorkerComputeMatchesRequest(const WorkerComputeMatchesRequest& from);
  WorkerComputeMatchesRequest(WorkerComputeMatchesRequest&& from) noexcept
    : WorkerComputeMatchesRequest() {
    *this = ::std::move(from);
  }

  inline WorkerComputeMatchesRequest& operator=(const WorkerComputeMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerComputeMatchesRequest& operator=(WorkerComputeMatchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerComputeMatchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerComputeMatchesRequest* internal_default_instance() {
    return reinterpret_cast<const WorkerComputeMatchesRequest*>(
               &_WorkerComputeMatchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WorkerComputeMatchesRequest& a, WorkerComputeMatchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerComputeMatchesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerComputeMatchesRequest* New() const final {
    return CreateMaybeMessage<WorkerComputeMatchesRequest>(nullptr);
  }

  WorkerComputeMatchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerComputeMatchesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerComputeMatchesRequest& from);
  void MergeFrom(const WorkerComputeMatchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerComputeMatchesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorkerComputeMatchesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_worker_2eproto);
    return ::descriptor_table_worker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
    kImageIdFieldNumber = 2,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // string image_id = 2;
  void clear_image_id();
  const std::string& image_id() const;
  void set_image_id(const std::string& value);
  void set_image_id(std::string&& value);
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  std::string* mutable_image_id();
  std::string* release_image_id();
  void set_allocated_image_id(std::string* image_id);
  private:
  const std::string& _internal_image_id() const;
  void _internal_set_image_id(const std::string& value);
  std::string* _internal_mutable_image_id();
  public:

  // @@protoc_insertion_point(class_scope:WorkerComputeMatchesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class WorkerComputeMatchesReponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorkerComputeMatchesReponse) */ {
 public:
  WorkerComputeMatchesReponse();
  virtual ~WorkerComputeMatchesReponse();

  WorkerComputeMatchesReponse(const WorkerComputeMatchesReponse& from);
  WorkerComputeMatchesReponse(WorkerComputeMatchesReponse&& from) noexcept
    : WorkerComputeMatchesReponse() {
    *this = ::std::move(from);
  }

  inline WorkerComputeMatchesReponse& operator=(const WorkerComputeMatchesReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerComputeMatchesReponse& operator=(WorkerComputeMatchesReponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerComputeMatchesReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerComputeMatchesReponse* internal_default_instance() {
    return reinterpret_cast<const WorkerComputeMatchesReponse*>(
               &_WorkerComputeMatchesReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WorkerComputeMatchesReponse& a, WorkerComputeMatchesReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerComputeMatchesReponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerComputeMatchesReponse* New() const final {
    return CreateMaybeMessage<WorkerComputeMatchesReponse>(nullptr);
  }

  WorkerComputeMatchesReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerComputeMatchesReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerComputeMatchesReponse& from);
  void MergeFrom(const WorkerComputeMatchesReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerComputeMatchesReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorkerComputeMatchesReponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_worker_2eproto);
    return ::descriptor_table_worker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:WorkerComputeMatchesReponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class RegisterWorkerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterWorkerRequest) */ {
 public:
  RegisterWorkerRequest();
  virtual ~RegisterWorkerRequest();

  RegisterWorkerRequest(const RegisterWorkerRequest& from);
  RegisterWorkerRequest(RegisterWorkerRequest&& from) noexcept
    : RegisterWorkerRequest() {
    *this = ::std::move(from);
  }

  inline RegisterWorkerRequest& operator=(const RegisterWorkerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterWorkerRequest& operator=(RegisterWorkerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterWorkerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterWorkerRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterWorkerRequest*>(
               &_RegisterWorkerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterWorkerRequest& a, RegisterWorkerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterWorkerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterWorkerRequest* New() const final {
    return CreateMaybeMessage<RegisterWorkerRequest>(nullptr);
  }

  RegisterWorkerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterWorkerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterWorkerRequest& from);
  void MergeFrom(const RegisterWorkerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterWorkerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterWorkerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_worker_2eproto);
    return ::descriptor_table_worker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCoresFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int32 cores = 2;
  void clear_cores();
  ::PROTOBUF_NAMESPACE_ID::int32 cores() const;
  void set_cores(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cores() const;
  void _internal_set_cores(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterWorkerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int32 cores_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class RegisterWorkerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterWorkerResponse) */ {
 public:
  RegisterWorkerResponse();
  virtual ~RegisterWorkerResponse();

  RegisterWorkerResponse(const RegisterWorkerResponse& from);
  RegisterWorkerResponse(RegisterWorkerResponse&& from) noexcept
    : RegisterWorkerResponse() {
    *this = ::std::move(from);
  }

  inline RegisterWorkerResponse& operator=(const RegisterWorkerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterWorkerResponse& operator=(RegisterWorkerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterWorkerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterWorkerResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterWorkerResponse*>(
               &_RegisterWorkerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterWorkerResponse& a, RegisterWorkerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterWorkerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterWorkerResponse* New() const final {
    return CreateMaybeMessage<RegisterWorkerResponse>(nullptr);
  }

  RegisterWorkerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterWorkerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterWorkerResponse& from);
  void MergeFrom(const RegisterWorkerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterWorkerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterWorkerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_worker_2eproto);
    return ::descriptor_table_worker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:RegisterWorkerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkerComputeFeaturesRequest

// string reconstruction_id = 1;
inline void WorkerComputeFeaturesRequest::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkerComputeFeaturesRequest::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:WorkerComputeFeaturesRequest.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void WorkerComputeFeaturesRequest::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:WorkerComputeFeaturesRequest.reconstruction_id)
}
inline std::string* WorkerComputeFeaturesRequest::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:WorkerComputeFeaturesRequest.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& WorkerComputeFeaturesRequest::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void WorkerComputeFeaturesRequest::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkerComputeFeaturesRequest::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkerComputeFeaturesRequest.reconstruction_id)
}
inline void WorkerComputeFeaturesRequest::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkerComputeFeaturesRequest.reconstruction_id)
}
inline void WorkerComputeFeaturesRequest::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkerComputeFeaturesRequest.reconstruction_id)
}
inline std::string* WorkerComputeFeaturesRequest::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkerComputeFeaturesRequest::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:WorkerComputeFeaturesRequest.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkerComputeFeaturesRequest::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:WorkerComputeFeaturesRequest.reconstruction_id)
}

// string image_id = 2;
inline void WorkerComputeFeaturesRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkerComputeFeaturesRequest::image_id() const {
  // @@protoc_insertion_point(field_get:WorkerComputeFeaturesRequest.image_id)
  return _internal_image_id();
}
inline void WorkerComputeFeaturesRequest::set_image_id(const std::string& value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:WorkerComputeFeaturesRequest.image_id)
}
inline std::string* WorkerComputeFeaturesRequest::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable:WorkerComputeFeaturesRequest.image_id)
  return _internal_mutable_image_id();
}
inline const std::string& WorkerComputeFeaturesRequest::_internal_image_id() const {
  return image_id_.GetNoArena();
}
inline void WorkerComputeFeaturesRequest::_internal_set_image_id(const std::string& value) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkerComputeFeaturesRequest::set_image_id(std::string&& value) {
  
  image_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkerComputeFeaturesRequest.image_id)
}
inline void WorkerComputeFeaturesRequest::set_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkerComputeFeaturesRequest.image_id)
}
inline void WorkerComputeFeaturesRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkerComputeFeaturesRequest.image_id)
}
inline std::string* WorkerComputeFeaturesRequest::_internal_mutable_image_id() {
  
  return image_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkerComputeFeaturesRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:WorkerComputeFeaturesRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkerComputeFeaturesRequest::set_allocated_image_id(std::string* image_id) {
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:WorkerComputeFeaturesRequest.image_id)
}

// -------------------------------------------------------------------

// WorkerComputeFeaturesResponse

// -------------------------------------------------------------------

// WorkerComputeMatchesRequest

// string reconstruction_id = 1;
inline void WorkerComputeMatchesRequest::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkerComputeMatchesRequest::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:WorkerComputeMatchesRequest.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void WorkerComputeMatchesRequest::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:WorkerComputeMatchesRequest.reconstruction_id)
}
inline std::string* WorkerComputeMatchesRequest::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:WorkerComputeMatchesRequest.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& WorkerComputeMatchesRequest::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void WorkerComputeMatchesRequest::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkerComputeMatchesRequest::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkerComputeMatchesRequest.reconstruction_id)
}
inline void WorkerComputeMatchesRequest::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkerComputeMatchesRequest.reconstruction_id)
}
inline void WorkerComputeMatchesRequest::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkerComputeMatchesRequest.reconstruction_id)
}
inline std::string* WorkerComputeMatchesRequest::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkerComputeMatchesRequest::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:WorkerComputeMatchesRequest.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkerComputeMatchesRequest::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:WorkerComputeMatchesRequest.reconstruction_id)
}

// string image_id = 2;
inline void WorkerComputeMatchesRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkerComputeMatchesRequest::image_id() const {
  // @@protoc_insertion_point(field_get:WorkerComputeMatchesRequest.image_id)
  return _internal_image_id();
}
inline void WorkerComputeMatchesRequest::set_image_id(const std::string& value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:WorkerComputeMatchesRequest.image_id)
}
inline std::string* WorkerComputeMatchesRequest::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable:WorkerComputeMatchesRequest.image_id)
  return _internal_mutable_image_id();
}
inline const std::string& WorkerComputeMatchesRequest::_internal_image_id() const {
  return image_id_.GetNoArena();
}
inline void WorkerComputeMatchesRequest::_internal_set_image_id(const std::string& value) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkerComputeMatchesRequest::set_image_id(std::string&& value) {
  
  image_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkerComputeMatchesRequest.image_id)
}
inline void WorkerComputeMatchesRequest::set_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkerComputeMatchesRequest.image_id)
}
inline void WorkerComputeMatchesRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkerComputeMatchesRequest.image_id)
}
inline std::string* WorkerComputeMatchesRequest::_internal_mutable_image_id() {
  
  return image_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkerComputeMatchesRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:WorkerComputeMatchesRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkerComputeMatchesRequest::set_allocated_image_id(std::string* image_id) {
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:WorkerComputeMatchesRequest.image_id)
}

// -------------------------------------------------------------------

// WorkerComputeMatchesReponse

// -------------------------------------------------------------------

// RegisterWorkerRequest

// string address = 1;
inline void RegisterWorkerRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterWorkerRequest::address() const {
  // @@protoc_insertion_point(field_get:RegisterWorkerRequest.address)
  return _internal_address();
}
inline void RegisterWorkerRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:RegisterWorkerRequest.address)
}
inline std::string* RegisterWorkerRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:RegisterWorkerRequest.address)
  return _internal_mutable_address();
}
inline const std::string& RegisterWorkerRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void RegisterWorkerRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterWorkerRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterWorkerRequest.address)
}
inline void RegisterWorkerRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterWorkerRequest.address)
}
inline void RegisterWorkerRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterWorkerRequest.address)
}
inline std::string* RegisterWorkerRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterWorkerRequest::release_address() {
  // @@protoc_insertion_point(field_release:RegisterWorkerRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterWorkerRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:RegisterWorkerRequest.address)
}

// int32 cores = 2;
inline void RegisterWorkerRequest::clear_cores() {
  cores_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterWorkerRequest::_internal_cores() const {
  return cores_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterWorkerRequest::cores() const {
  // @@protoc_insertion_point(field_get:RegisterWorkerRequest.cores)
  return _internal_cores();
}
inline void RegisterWorkerRequest::_internal_set_cores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cores_ = value;
}
inline void RegisterWorkerRequest::set_cores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cores(value);
  // @@protoc_insertion_point(field_set:RegisterWorkerRequest.cores)
}

// -------------------------------------------------------------------

// RegisterWorkerResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_worker_2eproto
