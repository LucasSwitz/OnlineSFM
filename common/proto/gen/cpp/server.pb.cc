// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraIntrinsics_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageData_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageMetaData_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OBJData_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBJMetaData_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparsePointCloudData_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SparsePointCloudMetaData_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UploadImageRequest_server_2eproto;
class ImageMetaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageMetaData> _instance;
} _ImageMetaData_default_instance_;
class ImageDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageData> _instance;
} _ImageData_default_instance_;
class SparsePointCloudDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparsePointCloudData> _instance;
} _SparsePointCloudData_default_instance_;
class SparsePointCloudMetaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparsePointCloudMetaData> _instance;
} _SparsePointCloudMetaData_default_instance_;
class OBJMetaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBJMetaData> _instance;
} _OBJMetaData_default_instance_;
class OBJDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBJData> _instance;
} _OBJData_default_instance_;
class ReconstructionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReconstructionData> _instance;
} _ReconstructionData_default_instance_;
class ImageUploadResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageUploadResponse> _instance;
} _ImageUploadResponse_default_instance_;
class UploadImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadImageRequest> _instance;
} _UploadImageRequest_default_instance_;
class NewReconstructionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewReconstructionRequest> _instance;
} _NewReconstructionRequest_default_instance_;
class NewReconstructionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewReconstructionResponse> _instance;
} _NewReconstructionResponse_default_instance_;
class ReconstructRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReconstructRequest> _instance;
} _ReconstructRequest_default_instance_;
class GetOBJRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOBJRequest> _instance;
} _GetOBJRequest_default_instance_;
class GetOBJResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOBJResponse> _instance;
} _GetOBJResponse_default_instance_;
class ReconstructResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReconstructResponse> _instance;
} _ReconstructResponse_default_instance_;
class ReconstructionOBJDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReconstructionOBJ> _instance;
} _ReconstructionOBJ_default_instance_;
class DeleteReconstructionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteReconstructionRequest> _instance;
} _DeleteReconstructionRequest_default_instance_;
class DeleteReconstructionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteReconstructionResponse> _instance;
} _DeleteReconstructionResponse_default_instance_;
class CameraIntrinsicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraIntrinsics> _instance;
} _CameraIntrinsics_default_instance_;
class HandhsakeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HandhsakeRequest> _instance;
} _HandhsakeRequest_default_instance_;
class HandshakeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HandshakeResponse> _instance;
} _HandshakeResponse_default_instance_;
class StartSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartSessionRequest> _instance;
} _StartSessionRequest_default_instance_;
class StartSessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartSessionResponse> _instance;
} _StartSessionResponse_default_instance_;
class StopSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopSessionRequest> _instance;
} _StopSessionRequest_default_instance_;
class StopSessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopSessionResponse> _instance;
} _StopSessionResponse_default_instance_;
class SessionUploadImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionUploadImageRequest> _instance;
} _SessionUploadImageRequest_default_instance_;
class SessionUploadImageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionUploadImageResponse> _instance;
} _SessionUploadImageResponse_default_instance_;
class GetSparseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSparseRequest> _instance;
} _GetSparseRequest_default_instance_;
class GetSparseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSparseResponse> _instance;
} _GetSparseResponse_default_instance_;
static void InitDefaultsscc_info_CameraIntrinsics_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CameraIntrinsics_default_instance_;
    new (ptr) ::CameraIntrinsics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CameraIntrinsics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraIntrinsics_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraIntrinsics_server_2eproto}, {}};

static void InitDefaultsscc_info_DeleteReconstructionRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeleteReconstructionRequest_default_instance_;
    new (ptr) ::DeleteReconstructionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeleteReconstructionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteReconstructionRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteReconstructionRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_DeleteReconstructionResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeleteReconstructionResponse_default_instance_;
    new (ptr) ::DeleteReconstructionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeleteReconstructionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteReconstructionResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteReconstructionResponse_server_2eproto}, {}};

static void InitDefaultsscc_info_GetOBJRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetOBJRequest_default_instance_;
    new (ptr) ::GetOBJRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetOBJRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOBJRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOBJRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_GetOBJResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetOBJResponse_default_instance_;
    new (ptr) ::GetOBJResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetOBJResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetOBJResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetOBJResponse_server_2eproto}, {
      &scc_info_OBJData_server_2eproto.base,}};

static void InitDefaultsscc_info_GetSparseRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetSparseRequest_default_instance_;
    new (ptr) ::GetSparseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetSparseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSparseRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSparseRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_GetSparseResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetSparseResponse_default_instance_;
    new (ptr) ::GetSparseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetSparseResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSparseResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSparseResponse_server_2eproto}, {
      &scc_info_SparsePointCloudData_server_2eproto.base,}};

static void InitDefaultsscc_info_HandhsakeRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HandhsakeRequest_default_instance_;
    new (ptr) ::HandhsakeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HandhsakeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HandhsakeRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HandhsakeRequest_server_2eproto}, {
      &scc_info_CameraIntrinsics_server_2eproto.base,}};

static void InitDefaultsscc_info_HandshakeResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HandshakeResponse_default_instance_;
    new (ptr) ::HandshakeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HandshakeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HandshakeResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HandshakeResponse_server_2eproto}, {}};

static void InitDefaultsscc_info_ImageData_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ImageData_default_instance_;
    new (ptr) ::ImageData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageData_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageData_server_2eproto}, {
      &scc_info_ImageMetaData_server_2eproto.base,}};

static void InitDefaultsscc_info_ImageMetaData_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ImageMetaData_default_instance_;
    new (ptr) ::ImageMetaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageMetaData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageMetaData_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageMetaData_server_2eproto}, {}};

static void InitDefaultsscc_info_ImageUploadResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ImageUploadResponse_default_instance_;
    new (ptr) ::ImageUploadResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageUploadResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageUploadResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageUploadResponse_server_2eproto}, {}};

static void InitDefaultsscc_info_NewReconstructionRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NewReconstructionRequest_default_instance_;
    new (ptr) ::NewReconstructionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NewReconstructionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewReconstructionRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewReconstructionRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_NewReconstructionResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NewReconstructionResponse_default_instance_;
    new (ptr) ::NewReconstructionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NewReconstructionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewReconstructionResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewReconstructionResponse_server_2eproto}, {}};

static void InitDefaultsscc_info_OBJData_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OBJData_default_instance_;
    new (ptr) ::OBJData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OBJData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OBJData_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OBJData_server_2eproto}, {
      &scc_info_OBJMetaData_server_2eproto.base,}};

static void InitDefaultsscc_info_OBJMetaData_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OBJMetaData_default_instance_;
    new (ptr) ::OBJMetaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OBJMetaData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBJMetaData_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OBJMetaData_server_2eproto}, {}};

static void InitDefaultsscc_info_ReconstructRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReconstructRequest_default_instance_;
    new (ptr) ::ReconstructRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReconstructRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReconstructRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReconstructRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_ReconstructResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReconstructResponse_default_instance_;
    new (ptr) ::ReconstructResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReconstructResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReconstructResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReconstructResponse_server_2eproto}, {}};

static void InitDefaultsscc_info_ReconstructionData_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReconstructionData_default_instance_;
    new (ptr) ::ReconstructionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReconstructionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReconstructionData_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReconstructionData_server_2eproto}, {}};

static void InitDefaultsscc_info_ReconstructionOBJ_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReconstructionOBJ_default_instance_;
    new (ptr) ::ReconstructionOBJ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReconstructionOBJ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReconstructionOBJ_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReconstructionOBJ_server_2eproto}, {}};

static void InitDefaultsscc_info_SessionUploadImageRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SessionUploadImageRequest_default_instance_;
    new (ptr) ::SessionUploadImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SessionUploadImageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionUploadImageRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SessionUploadImageRequest_server_2eproto}, {
      &scc_info_UploadImageRequest_server_2eproto.base,}};

static void InitDefaultsscc_info_SessionUploadImageResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SessionUploadImageResponse_default_instance_;
    new (ptr) ::SessionUploadImageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SessionUploadImageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionUploadImageResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionUploadImageResponse_server_2eproto}, {}};

static void InitDefaultsscc_info_SparsePointCloudData_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SparsePointCloudData_default_instance_;
    new (ptr) ::SparsePointCloudData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SparsePointCloudData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparsePointCloudData_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SparsePointCloudData_server_2eproto}, {
      &scc_info_SparsePointCloudMetaData_server_2eproto.base,}};

static void InitDefaultsscc_info_SparsePointCloudMetaData_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SparsePointCloudMetaData_default_instance_;
    new (ptr) ::SparsePointCloudMetaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SparsePointCloudMetaData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SparsePointCloudMetaData_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SparsePointCloudMetaData_server_2eproto}, {}};

static void InitDefaultsscc_info_StartSessionRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartSessionRequest_default_instance_;
    new (ptr) ::StartSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartSessionRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartSessionRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_StartSessionResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartSessionResponse_default_instance_;
    new (ptr) ::StartSessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartSessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartSessionResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartSessionResponse_server_2eproto}, {}};

static void InitDefaultsscc_info_StopSessionRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StopSessionRequest_default_instance_;
    new (ptr) ::StopSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StopSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopSessionRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopSessionRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_StopSessionResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StopSessionResponse_default_instance_;
    new (ptr) ::StopSessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StopSessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopSessionResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopSessionResponse_server_2eproto}, {}};

static void InitDefaultsscc_info_UploadImageRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UploadImageRequest_default_instance_;
    new (ptr) ::UploadImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UploadImageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UploadImageRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UploadImageRequest_server_2eproto}, {
      &scc_info_ImageData_server_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2eproto[29];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_server_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImageMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImageMetaData, id_),
  PROTOBUF_FIELD_OFFSET(::ImageMetaData, reconstruction_),
  PROTOBUF_FIELD_OFFSET(::ImageMetaData, path_),
  PROTOBUF_FIELD_OFFSET(::ImageMetaData, format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImageData, data_),
  PROTOBUF_FIELD_OFFSET(::ImageData, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SparsePointCloudData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SparsePointCloudData, data_),
  PROTOBUF_FIELD_OFFSET(::SparsePointCloudData, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SparsePointCloudMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SparsePointCloudMetaData, id_),
  PROTOBUF_FIELD_OFFSET(::SparsePointCloudMetaData, reconstruction_),
  PROTOBUF_FIELD_OFFSET(::SparsePointCloudMetaData, mvs_path_),
  PROTOBUF_FIELD_OFFSET(::SparsePointCloudMetaData, ply_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OBJMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OBJMetaData, id_),
  PROTOBUF_FIELD_OFFSET(::OBJMetaData, reconstruction_),
  PROTOBUF_FIELD_OFFSET(::OBJMetaData, path_),
  PROTOBUF_FIELD_OFFSET(::OBJMetaData, texture_path_),
  PROTOBUF_FIELD_OFFSET(::OBJMetaData, mtl_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OBJData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OBJData, obj_data_),
  PROTOBUF_FIELD_OFFSET(::OBJData, texture_data_),
  PROTOBUF_FIELD_OFFSET(::OBJData, mtl_data_),
  PROTOBUF_FIELD_OFFSET(::OBJData, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReconstructionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReconstructionData, id_),
  PROTOBUF_FIELD_OFFSET(::ReconstructionData, root_),
  PROTOBUF_FIELD_OFFSET(::ReconstructionData, images_),
  PROTOBUF_FIELD_OFFSET(::ReconstructionData, sparse_reconstruction_),
  PROTOBUF_FIELD_OFFSET(::ReconstructionData, obj_),
  PROTOBUF_FIELD_OFFSET(::ReconstructionData, images_path_),
  PROTOBUF_FIELD_OFFSET(::ReconstructionData, sfm_path_),
  PROTOBUF_FIELD_OFFSET(::ReconstructionData, mvs_path_),
  PROTOBUF_FIELD_OFFSET(::ReconstructionData, features_path_),
  PROTOBUF_FIELD_OFFSET(::ReconstructionData, matches_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImageUploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImageUploadResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UploadImageRequest, reconstruction_id_),
  PROTOBUF_FIELD_OFFSET(::UploadImageRequest, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NewReconstructionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NewReconstructionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NewReconstructionResponse, reconstruction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReconstructRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReconstructRequest, reconstruction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetOBJRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetOBJRequest, reconstruction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetOBJResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetOBJResponse, success_),
  PROTOBUF_FIELD_OFFSET(::GetOBJResponse, obj_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReconstructResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReconstructResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ReconstructResponse, error_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReconstructionOBJ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReconstructionOBJ, obj_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeleteReconstructionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeleteReconstructionRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeleteReconstructionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeleteReconstructionResponse, success_),
  PROTOBUF_FIELD_OFFSET(::DeleteReconstructionResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CameraIntrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CameraIntrinsics, model_),
  PROTOBUF_FIELD_OFFSET(::CameraIntrinsics, maker_),
  PROTOBUF_FIELD_OFFSET(::CameraIntrinsics, numeric_model_),
  PROTOBUF_FIELD_OFFSET(::CameraIntrinsics, sensor_size_),
  PROTOBUF_FIELD_OFFSET(::CameraIntrinsics, focus_mode_),
  PROTOBUF_FIELD_OFFSET(::CameraIntrinsics, horizontal_view_angle_),
  PROTOBUF_FIELD_OFFSET(::CameraIntrinsics, jpeg_quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HandhsakeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HandhsakeRequest, identifier_),
  PROTOBUF_FIELD_OFFSET(::HandhsakeRequest, camera_intrinsics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HandshakeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HandshakeResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StartSessionRequest, reconstruction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StartSessionResponse, reconstruction_id_),
  PROTOBUF_FIELD_OFFSET(::StartSessionResponse, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StopSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StopSessionRequest, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StopSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StopSessionResponse, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SessionUploadImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SessionUploadImageRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::SessionUploadImageRequest, upload_image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SessionUploadImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetSparseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetSparseRequest, reconstruction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetSparseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetSparseResponse, sparse_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ImageMetaData)},
  { 9, -1, sizeof(::ImageData)},
  { 16, -1, sizeof(::SparsePointCloudData)},
  { 23, -1, sizeof(::SparsePointCloudMetaData)},
  { 32, -1, sizeof(::OBJMetaData)},
  { 42, -1, sizeof(::OBJData)},
  { 51, -1, sizeof(::ReconstructionData)},
  { 66, -1, sizeof(::ImageUploadResponse)},
  { 72, -1, sizeof(::UploadImageRequest)},
  { 79, -1, sizeof(::NewReconstructionRequest)},
  { 84, -1, sizeof(::NewReconstructionResponse)},
  { 90, -1, sizeof(::ReconstructRequest)},
  { 96, -1, sizeof(::GetOBJRequest)},
  { 102, -1, sizeof(::GetOBJResponse)},
  { 109, -1, sizeof(::ReconstructResponse)},
  { 116, -1, sizeof(::ReconstructionOBJ)},
  { 122, -1, sizeof(::DeleteReconstructionRequest)},
  { 128, -1, sizeof(::DeleteReconstructionResponse)},
  { 135, -1, sizeof(::CameraIntrinsics)},
  { 147, -1, sizeof(::HandhsakeRequest)},
  { 154, -1, sizeof(::HandshakeResponse)},
  { 160, -1, sizeof(::StartSessionRequest)},
  { 166, -1, sizeof(::StartSessionResponse)},
  { 173, -1, sizeof(::StopSessionRequest)},
  { 179, -1, sizeof(::StopSessionResponse)},
  { 185, -1, sizeof(::SessionUploadImageRequest)},
  { 192, -1, sizeof(::SessionUploadImageResponse)},
  { 197, -1, sizeof(::GetSparseRequest)},
  { 203, -1, sizeof(::GetSparseResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ImageMetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ImageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SparsePointCloudData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SparsePointCloudMetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OBJMetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OBJData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReconstructionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ImageUploadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UploadImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NewReconstructionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NewReconstructionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReconstructRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetOBJRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetOBJResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReconstructResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReconstructionOBJ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeleteReconstructionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeleteReconstructionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CameraIntrinsics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HandhsakeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HandshakeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StartSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StartSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StopSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StopSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SessionUploadImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SessionUploadImageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetSparseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetSparseResponse_default_instance_),
};

const char descriptor_table_protodef_server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014server.proto\"Q\n\rImageMetaData\022\n\n\002id\030\001 "
  "\001(\t\022\026\n\016reconstruction\030\002 \001(\t\022\014\n\004path\030\003 \001("
  "\t\022\016\n\006format\030\004 \001(\t\";\n\tImageData\022\014\n\004data\030\001"
  " \001(\014\022 \n\010metadata\030\002 \001(\0132\016.ImageMetaData\"Q"
  "\n\024SparsePointCloudData\022\014\n\004data\030\001 \001(\014\022+\n\010"
  "metadata\030\002 \001(\0132\031.SparsePointCloudMetaDat"
  "a\"b\n\030SparsePointCloudMetaData\022\n\n\002id\030\001 \001("
  "\t\022\026\n\016reconstruction\030\002 \001(\t\022\020\n\010mvs_path\030\003 "
  "\001(\t\022\020\n\010ply_path\030\004 \001(\t\"g\n\013OBJMetaData\022\n\n\002"
  "id\030\001 \001(\t\022\026\n\016reconstruction\030\002 \001(\t\022\014\n\004path"
  "\030\003 \001(\t\022\024\n\014texture_path\030\004 \001(\t\022\020\n\010mtl_path"
  "\030\005 \001(\t\"c\n\007OBJData\022\020\n\010obj_data\030\001 \001(\014\022\024\n\014t"
  "exture_data\030\002 \001(\014\022\020\n\010mtl_data\030\003 \001(\014\022\036\n\010m"
  "etadata\030\004 \001(\0132\014.OBJMetaData\"\320\001\n\022Reconstr"
  "uctionData\022\n\n\002id\030\001 \001(\t\022\014\n\004root\030\002 \001(\t\022\016\n\006"
  "images\030\003 \003(\t\022\035\n\025sparse_reconstruction\030\004 "
  "\001(\t\022\013\n\003obj\030\005 \001(\t\022\023\n\013images_path\030\006 \001(\t\022\020\n"
  "\010sfm_path\030\007 \001(\t\022\020\n\010mvs_path\030\010 \001(\t\022\025\n\rfea"
  "tures_path\030\t \001(\t\022\024\n\014matches_path\030\n \001(\t\"&"
  "\n\023ImageUploadResponse\022\017\n\007success\030\001 \001(\010\"J"
  "\n\022UploadImageRequest\022\031\n\021reconstruction_i"
  "d\030\001 \001(\t\022\031\n\005image\030\002 \001(\0132\n.ImageData\"\032\n\030Ne"
  "wReconstructionRequest\"6\n\031NewReconstruct"
  "ionResponse\022\031\n\021reconstruction_id\030\001 \001(\t\"/"
  "\n\022ReconstructRequest\022\031\n\021reconstruction_i"
  "d\030\001 \001(\t\"*\n\rGetOBJRequest\022\031\n\021reconstructi"
  "on_id\030\001 \001(\t\"8\n\016GetOBJResponse\022\017\n\007success"
  "\030\001 \001(\010\022\025\n\003obj\030\002 \001(\0132\010.OBJData\"9\n\023Reconst"
  "ructResponse\022\017\n\007success\030\001 \001(\010\022\021\n\terror_m"
  "sg\030\002 \001(\t\" \n\021ReconstructionOBJ\022\013\n\003obj\030\001 \001"
  "(\014\")\n\033DeleteReconstructionRequest\022\n\n\002id\030"
  "\001 \001(\t\";\n\034DeleteReconstructionResponse\022\017\n"
  "\007success\030\001 \001(\010\022\n\n\002id\030\002 \001(\t\"\245\001\n\020CameraInt"
  "rinsics\022\r\n\005model\030\001 \001(\t\022\r\n\005maker\030\002 \001(\t\022\025\n"
  "\rnumeric_model\030\003 \001(\t\022\023\n\013sensor_size\030\004 \001("
  "\002\022\022\n\nfocus_mode\030\005 \001(\t\022\035\n\025horizontal_view"
  "_angle\030\006 \001(\002\022\024\n\014jpeg_quality\030\007 \001(\005\"T\n\020Ha"
  "ndhsakeRequest\022\022\n\nidentifier\030\001 \001(\t\022,\n\021ca"
  "mera_intrinsics\030\002 \001(\0132\021.CameraIntrinsics"
  "\"$\n\021HandshakeResponse\022\017\n\007success\030\001 \001(\010\"0"
  "\n\023StartSessionRequest\022\031\n\021reconstruction_"
  "id\030\001 \001(\t\"E\n\024StartSessionResponse\022\031\n\021reco"
  "nstruction_id\030\001 \001(\t\022\022\n\nsession_id\030\002 \001(\t\""
  "(\n\022StopSessionRequest\022\022\n\nsession_id\030\001 \001("
  "\t\")\n\023StopSessionResponse\022\022\n\nsession_id\030\001"
  " \001(\t\"Z\n\031SessionUploadImageRequest\022\022\n\nses"
  "sion_id\030\001 \001(\t\022)\n\014upload_image\030\002 \001(\0132\023.Up"
  "loadImageRequest\"\034\n\032SessionUploadImageRe"
  "sponse\"-\n\020GetSparseRequest\022\031\n\021reconstruc"
  "tion_id\030\001 \001(\t\":\n\021GetSparseResponse\022%\n\006sp"
  "arse\030\001 \001(\0132\025.SparsePointCloudData2\221\005\n\025Re"
  "constructionService\0224\n\tHandshake\022\021.Handh"
  "sakeRequest\032\022.HandshakeResponse\"\000\022<\n\013Upl"
  "oadImage\022\023.UploadImageRequest\032\024.ImageUpl"
  "oadResponse\"\000(\001\0228\n\013Reconstruct\022\023.Reconst"
  "ructRequest\032\024.ReconstructResponse\022+\n\006Get"
  "OBJ\022\016.GetOBJRequest\032\017.GetOBJResponse0\001\0224"
  "\n\tGetSparse\022\021.GetSparseRequest\032\022.GetSpar"
  "seResponse0\001\022J\n\021NewReconstruction\022\031.NewR"
  "econstructionRequest\032\032.NewReconstruction"
  "Response\022S\n\024DeleteReconstruction\022\034.Delet"
  "eReconstructionRequest\032\035.DeleteReconstru"
  "ctionResponse\022;\n\014StartSession\022\024.StartSes"
  "sionRequest\032\025.StartSessionResponse\0228\n\013St"
  "opSession\022\023.StopSessionRequest\032\024.StopSes"
  "sionResponse\022O\n\022SessionUploadImage\022\032.Ses"
  "sionUploadImageRequest\032\033.SessionUploadIm"
  "ageResponse(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_server_2eproto_sccs[29] = {
  &scc_info_CameraIntrinsics_server_2eproto.base,
  &scc_info_DeleteReconstructionRequest_server_2eproto.base,
  &scc_info_DeleteReconstructionResponse_server_2eproto.base,
  &scc_info_GetOBJRequest_server_2eproto.base,
  &scc_info_GetOBJResponse_server_2eproto.base,
  &scc_info_GetSparseRequest_server_2eproto.base,
  &scc_info_GetSparseResponse_server_2eproto.base,
  &scc_info_HandhsakeRequest_server_2eproto.base,
  &scc_info_HandshakeResponse_server_2eproto.base,
  &scc_info_ImageData_server_2eproto.base,
  &scc_info_ImageMetaData_server_2eproto.base,
  &scc_info_ImageUploadResponse_server_2eproto.base,
  &scc_info_NewReconstructionRequest_server_2eproto.base,
  &scc_info_NewReconstructionResponse_server_2eproto.base,
  &scc_info_OBJData_server_2eproto.base,
  &scc_info_OBJMetaData_server_2eproto.base,
  &scc_info_ReconstructRequest_server_2eproto.base,
  &scc_info_ReconstructResponse_server_2eproto.base,
  &scc_info_ReconstructionData_server_2eproto.base,
  &scc_info_ReconstructionOBJ_server_2eproto.base,
  &scc_info_SessionUploadImageRequest_server_2eproto.base,
  &scc_info_SessionUploadImageResponse_server_2eproto.base,
  &scc_info_SparsePointCloudData_server_2eproto.base,
  &scc_info_SparsePointCloudMetaData_server_2eproto.base,
  &scc_info_StartSessionRequest_server_2eproto.base,
  &scc_info_StartSessionResponse_server_2eproto.base,
  &scc_info_StopSessionRequest_server_2eproto.base,
  &scc_info_StopSessionResponse_server_2eproto.base,
  &scc_info_UploadImageRequest_server_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2eproto_once;
static bool descriptor_table_server_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2eproto = {
  &descriptor_table_server_2eproto_initialized, descriptor_table_protodef_server_2eproto, "server.proto", 2701,
  &descriptor_table_server_2eproto_once, descriptor_table_server_2eproto_sccs, descriptor_table_server_2eproto_deps, 29, 0,
  schemas, file_default_instances, TableStruct_server_2eproto::offsets,
  file_level_metadata_server_2eproto, 29, file_level_enum_descriptors_server_2eproto, file_level_service_descriptors_server_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_server_2eproto), true);

// ===================================================================

void ImageMetaData::InitAsDefaultInstance() {
}
class ImageMetaData::_Internal {
 public:
};

ImageMetaData::ImageMetaData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageMetaData)
}
ImageMetaData::ImageMetaData(const ImageMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  reconstruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reconstruction().empty()) {
    reconstruction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_format().empty()) {
    format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  // @@protoc_insertion_point(copy_constructor:ImageMetaData)
}

void ImageMetaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageMetaData_server_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reconstruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ImageMetaData::~ImageMetaData() {
  // @@protoc_insertion_point(destructor:ImageMetaData)
  SharedDtor();
}

void ImageMetaData::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reconstruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageMetaData& ImageMetaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageMetaData_server_2eproto.base);
  return *internal_default_instance();
}


void ImageMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reconstruction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ImageMetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ImageMetaData.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reconstruction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reconstruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ImageMetaData.reconstruction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ImageMetaData.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ImageMetaData.format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageMetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ImageMetaData.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string reconstruction = 2;
  if (this->reconstruction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reconstruction().data(), static_cast<int>(this->_internal_reconstruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ImageMetaData.reconstruction");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reconstruction(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ImageMetaData.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // string format = 4;
  if (this->format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ImageMetaData.format");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageMetaData)
  return target;
}

size_t ImageMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageMetaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string reconstruction = 2;
  if (this->reconstruction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reconstruction());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string format = 4;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageMetaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageMetaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageMetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageMetaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageMetaData)
    MergeFrom(*source);
  }
}

void ImageMetaData::MergeFrom(const ImageMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.reconstruction().size() > 0) {

    reconstruction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
}

void ImageMetaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMetaData::CopyFrom(const ImageMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMetaData::IsInitialized() const {
  return true;
}

void ImageMetaData::InternalSwap(ImageMetaData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reconstruction_.Swap(&other->reconstruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  format_.Swap(&other->format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageMetaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageData::InitAsDefaultInstance() {
  ::_ImageData_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::ImageMetaData*>(
      ::ImageMetaData::internal_default_instance());
}
class ImageData::_Internal {
 public:
  static const ::ImageMetaData& metadata(const ImageData* msg);
};

const ::ImageMetaData&
ImageData::_Internal::metadata(const ImageData* msg) {
  return *msg->metadata_;
}
ImageData::ImageData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageData)
}
ImageData::ImageData(const ImageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::ImageMetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ImageData)
}

void ImageData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageData_server_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_ = nullptr;
}

ImageData::~ImageData() {
  // @@protoc_insertion_point(destructor:ImageData)
  SharedDtor();
}

void ImageData::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void ImageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageData& ImageData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageData_server_2eproto.base);
  return *internal_default_instance();
}


void ImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ImageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ImageMetaData metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .ImageMetaData metadata = 2;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageData)
  return target;
}

size_t ImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .ImageMetaData metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageData)
    MergeFrom(*source);
  }
}

void ImageData::MergeFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::ImageMetaData::MergeFrom(from._internal_metadata());
  }
}

void ImageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageData::CopyFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageData::IsInitialized() const {
  return true;
}

void ImageData::InternalSwap(ImageData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SparsePointCloudData::InitAsDefaultInstance() {
  ::_SparsePointCloudData_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::SparsePointCloudMetaData*>(
      ::SparsePointCloudMetaData::internal_default_instance());
}
class SparsePointCloudData::_Internal {
 public:
  static const ::SparsePointCloudMetaData& metadata(const SparsePointCloudData* msg);
};

const ::SparsePointCloudMetaData&
SparsePointCloudData::_Internal::metadata(const SparsePointCloudData* msg) {
  return *msg->metadata_;
}
SparsePointCloudData::SparsePointCloudData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SparsePointCloudData)
}
SparsePointCloudData::SparsePointCloudData(const SparsePointCloudData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::SparsePointCloudMetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SparsePointCloudData)
}

void SparsePointCloudData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SparsePointCloudData_server_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_ = nullptr;
}

SparsePointCloudData::~SparsePointCloudData() {
  // @@protoc_insertion_point(destructor:SparsePointCloudData)
  SharedDtor();
}

void SparsePointCloudData::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void SparsePointCloudData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SparsePointCloudData& SparsePointCloudData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SparsePointCloudData_server_2eproto.base);
  return *internal_default_instance();
}


void SparsePointCloudData::Clear() {
// @@protoc_insertion_point(message_clear_start:SparsePointCloudData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SparsePointCloudData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SparsePointCloudMetaData metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SparsePointCloudData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SparsePointCloudData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .SparsePointCloudMetaData metadata = 2;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SparsePointCloudData)
  return target;
}

size_t SparsePointCloudData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SparsePointCloudData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .SparsePointCloudMetaData metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparsePointCloudData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SparsePointCloudData)
  GOOGLE_DCHECK_NE(&from, this);
  const SparsePointCloudData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparsePointCloudData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SparsePointCloudData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SparsePointCloudData)
    MergeFrom(*source);
  }
}

void SparsePointCloudData::MergeFrom(const SparsePointCloudData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SparsePointCloudData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::SparsePointCloudMetaData::MergeFrom(from._internal_metadata());
  }
}

void SparsePointCloudData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SparsePointCloudData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsePointCloudData::CopyFrom(const SparsePointCloudData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SparsePointCloudData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsePointCloudData::IsInitialized() const {
  return true;
}

void SparsePointCloudData::InternalSwap(SparsePointCloudData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparsePointCloudData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SparsePointCloudMetaData::InitAsDefaultInstance() {
}
class SparsePointCloudMetaData::_Internal {
 public:
};

SparsePointCloudMetaData::SparsePointCloudMetaData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SparsePointCloudMetaData)
}
SparsePointCloudMetaData::SparsePointCloudMetaData(const SparsePointCloudMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  reconstruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reconstruction().empty()) {
    reconstruction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_);
  }
  mvs_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mvs_path().empty()) {
    mvs_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mvs_path_);
  }
  ply_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ply_path().empty()) {
    ply_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ply_path_);
  }
  // @@protoc_insertion_point(copy_constructor:SparsePointCloudMetaData)
}

void SparsePointCloudMetaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SparsePointCloudMetaData_server_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reconstruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mvs_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ply_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SparsePointCloudMetaData::~SparsePointCloudMetaData() {
  // @@protoc_insertion_point(destructor:SparsePointCloudMetaData)
  SharedDtor();
}

void SparsePointCloudMetaData::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reconstruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mvs_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ply_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SparsePointCloudMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SparsePointCloudMetaData& SparsePointCloudMetaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SparsePointCloudMetaData_server_2eproto.base);
  return *internal_default_instance();
}


void SparsePointCloudMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:SparsePointCloudMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reconstruction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mvs_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ply_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SparsePointCloudMetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SparsePointCloudMetaData.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reconstruction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reconstruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SparsePointCloudMetaData.reconstruction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mvs_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mvs_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SparsePointCloudMetaData.mvs_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ply_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ply_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SparsePointCloudMetaData.ply_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SparsePointCloudMetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SparsePointCloudMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SparsePointCloudMetaData.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string reconstruction = 2;
  if (this->reconstruction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reconstruction().data(), static_cast<int>(this->_internal_reconstruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SparsePointCloudMetaData.reconstruction");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reconstruction(), target);
  }

  // string mvs_path = 3;
  if (this->mvs_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mvs_path().data(), static_cast<int>(this->_internal_mvs_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SparsePointCloudMetaData.mvs_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mvs_path(), target);
  }

  // string ply_path = 4;
  if (this->ply_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ply_path().data(), static_cast<int>(this->_internal_ply_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SparsePointCloudMetaData.ply_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ply_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SparsePointCloudMetaData)
  return target;
}

size_t SparsePointCloudMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SparsePointCloudMetaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string reconstruction = 2;
  if (this->reconstruction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reconstruction());
  }

  // string mvs_path = 3;
  if (this->mvs_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mvs_path());
  }

  // string ply_path = 4;
  if (this->ply_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ply_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparsePointCloudMetaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SparsePointCloudMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const SparsePointCloudMetaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparsePointCloudMetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SparsePointCloudMetaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SparsePointCloudMetaData)
    MergeFrom(*source);
  }
}

void SparsePointCloudMetaData::MergeFrom(const SparsePointCloudMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SparsePointCloudMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.reconstruction().size() > 0) {

    reconstruction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_);
  }
  if (from.mvs_path().size() > 0) {

    mvs_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mvs_path_);
  }
  if (from.ply_path().size() > 0) {

    ply_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ply_path_);
  }
}

void SparsePointCloudMetaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SparsePointCloudMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsePointCloudMetaData::CopyFrom(const SparsePointCloudMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SparsePointCloudMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsePointCloudMetaData::IsInitialized() const {
  return true;
}

void SparsePointCloudMetaData::InternalSwap(SparsePointCloudMetaData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reconstruction_.Swap(&other->reconstruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mvs_path_.Swap(&other->mvs_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ply_path_.Swap(&other->ply_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SparsePointCloudMetaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OBJMetaData::InitAsDefaultInstance() {
}
class OBJMetaData::_Internal {
 public:
};

OBJMetaData::OBJMetaData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OBJMetaData)
}
OBJMetaData::OBJMetaData(const OBJMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  reconstruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reconstruction().empty()) {
    reconstruction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  texture_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_texture_path().empty()) {
    texture_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.texture_path_);
  }
  mtl_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mtl_path().empty()) {
    mtl_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mtl_path_);
  }
  // @@protoc_insertion_point(copy_constructor:OBJMetaData)
}

void OBJMetaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OBJMetaData_server_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reconstruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texture_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mtl_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OBJMetaData::~OBJMetaData() {
  // @@protoc_insertion_point(destructor:OBJMetaData)
  SharedDtor();
}

void OBJMetaData::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reconstruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texture_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mtl_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OBJMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBJMetaData& OBJMetaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBJMetaData_server_2eproto.base);
  return *internal_default_instance();
}


void OBJMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:OBJMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reconstruction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texture_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mtl_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* OBJMetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OBJMetaData.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reconstruction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reconstruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OBJMetaData.reconstruction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OBJMetaData.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string texture_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_texture_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OBJMetaData.texture_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mtl_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mtl_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OBJMetaData.mtl_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBJMetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OBJMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OBJMetaData.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string reconstruction = 2;
  if (this->reconstruction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reconstruction().data(), static_cast<int>(this->_internal_reconstruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OBJMetaData.reconstruction");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reconstruction(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OBJMetaData.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // string texture_path = 4;
  if (this->texture_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_texture_path().data(), static_cast<int>(this->_internal_texture_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OBJMetaData.texture_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_texture_path(), target);
  }

  // string mtl_path = 5;
  if (this->mtl_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mtl_path().data(), static_cast<int>(this->_internal_mtl_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OBJMetaData.mtl_path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mtl_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OBJMetaData)
  return target;
}

size_t OBJMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OBJMetaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string reconstruction = 2;
  if (this->reconstruction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reconstruction());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string texture_path = 4;
  if (this->texture_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_texture_path());
  }

  // string mtl_path = 5;
  if (this->mtl_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mtl_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBJMetaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OBJMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const OBJMetaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OBJMetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OBJMetaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OBJMetaData)
    MergeFrom(*source);
  }
}

void OBJMetaData::MergeFrom(const OBJMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OBJMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.reconstruction().size() > 0) {

    reconstruction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.texture_path().size() > 0) {

    texture_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.texture_path_);
  }
  if (from.mtl_path().size() > 0) {

    mtl_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mtl_path_);
  }
}

void OBJMetaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OBJMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OBJMetaData::CopyFrom(const OBJMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OBJMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBJMetaData::IsInitialized() const {
  return true;
}

void OBJMetaData::InternalSwap(OBJMetaData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reconstruction_.Swap(&other->reconstruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  texture_path_.Swap(&other->texture_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mtl_path_.Swap(&other->mtl_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata OBJMetaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OBJData::InitAsDefaultInstance() {
  ::_OBJData_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::OBJMetaData*>(
      ::OBJMetaData::internal_default_instance());
}
class OBJData::_Internal {
 public:
  static const ::OBJMetaData& metadata(const OBJData* msg);
};

const ::OBJMetaData&
OBJData::_Internal::metadata(const OBJData* msg) {
  return *msg->metadata_;
}
OBJData::OBJData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OBJData)
}
OBJData::OBJData(const OBJData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obj_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_obj_data().empty()) {
    obj_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obj_data_);
  }
  texture_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_texture_data().empty()) {
    texture_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.texture_data_);
  }
  mtl_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mtl_data().empty()) {
    mtl_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mtl_data_);
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::OBJMetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OBJData)
}

void OBJData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OBJData_server_2eproto.base);
  obj_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texture_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mtl_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_ = nullptr;
}

OBJData::~OBJData() {
  // @@protoc_insertion_point(destructor:OBJData)
  SharedDtor();
}

void OBJData::SharedDtor() {
  obj_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texture_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mtl_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void OBJData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBJData& OBJData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBJData_server_2eproto.base);
  return *internal_default_instance();
}


void OBJData::Clear() {
// @@protoc_insertion_point(message_clear_start:OBJData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obj_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texture_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mtl_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OBJData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes obj_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_obj_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes texture_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_texture_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes mtl_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mtl_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OBJMetaData metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBJData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OBJData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes obj_data = 1;
  if (this->obj_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_obj_data(), target);
  }

  // bytes texture_data = 2;
  if (this->texture_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_texture_data(), target);
  }

  // bytes mtl_data = 3;
  if (this->mtl_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mtl_data(), target);
  }

  // .OBJMetaData metadata = 4;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OBJData)
  return target;
}

size_t OBJData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OBJData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes obj_data = 1;
  if (this->obj_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_obj_data());
  }

  // bytes texture_data = 2;
  if (this->texture_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_texture_data());
  }

  // bytes mtl_data = 3;
  if (this->mtl_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mtl_data());
  }

  // .OBJMetaData metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBJData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OBJData)
  GOOGLE_DCHECK_NE(&from, this);
  const OBJData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OBJData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OBJData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OBJData)
    MergeFrom(*source);
  }
}

void OBJData::MergeFrom(const OBJData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OBJData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj_data().size() > 0) {

    obj_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obj_data_);
  }
  if (from.texture_data().size() > 0) {

    texture_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.texture_data_);
  }
  if (from.mtl_data().size() > 0) {

    mtl_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mtl_data_);
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::OBJMetaData::MergeFrom(from._internal_metadata());
  }
}

void OBJData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OBJData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OBJData::CopyFrom(const OBJData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OBJData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBJData::IsInitialized() const {
  return true;
}

void OBJData::InternalSwap(OBJData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  obj_data_.Swap(&other->obj_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  texture_data_.Swap(&other->texture_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mtl_data_.Swap(&other->mtl_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OBJData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReconstructionData::InitAsDefaultInstance() {
}
class ReconstructionData::_Internal {
 public:
};

ReconstructionData::ReconstructionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReconstructionData)
}
ReconstructionData::ReconstructionData(const ReconstructionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      images_(from.images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root().empty()) {
    root_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_);
  }
  sparse_reconstruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sparse_reconstruction().empty()) {
    sparse_reconstruction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sparse_reconstruction_);
  }
  obj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_obj().empty()) {
    obj_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obj_);
  }
  images_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_images_path().empty()) {
    images_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.images_path_);
  }
  sfm_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sfm_path().empty()) {
    sfm_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sfm_path_);
  }
  mvs_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mvs_path().empty()) {
    mvs_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mvs_path_);
  }
  features_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_features_path().empty()) {
    features_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.features_path_);
  }
  matches_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_matches_path().empty()) {
    matches_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.matches_path_);
  }
  // @@protoc_insertion_point(copy_constructor:ReconstructionData)
}

void ReconstructionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReconstructionData_server_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sparse_reconstruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  images_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sfm_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mvs_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  features_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matches_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReconstructionData::~ReconstructionData() {
  // @@protoc_insertion_point(destructor:ReconstructionData)
  SharedDtor();
}

void ReconstructionData::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sparse_reconstruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obj_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  images_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sfm_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mvs_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  features_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matches_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReconstructionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReconstructionData& ReconstructionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReconstructionData_server_2eproto.base);
  return *internal_default_instance();
}


void ReconstructionData::Clear() {
// @@protoc_insertion_point(message_clear_start:ReconstructionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sparse_reconstruction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obj_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  images_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sfm_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mvs_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  features_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matches_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ReconstructionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReconstructionData.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReconstructionData.root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string images = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_images();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReconstructionData.images"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string sparse_reconstruction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sparse_reconstruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReconstructionData.sparse_reconstruction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string obj = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_obj();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReconstructionData.obj"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string images_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_images_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReconstructionData.images_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sfm_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_sfm_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReconstructionData.sfm_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mvs_path = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_mvs_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReconstructionData.mvs_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string features_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_features_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReconstructionData.features_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string matches_path = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_matches_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReconstructionData.matches_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReconstructionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReconstructionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReconstructionData.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string root = 2;
  if (this->root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root().data(), static_cast<int>(this->_internal_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReconstructionData.root");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_root(), target);
  }

  // repeated string images = 3;
  for (int i = 0, n = this->_internal_images_size(); i < n; i++) {
    const auto& s = this->_internal_images(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReconstructionData.images");
    target = stream->WriteString(3, s, target);
  }

  // string sparse_reconstruction = 4;
  if (this->sparse_reconstruction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sparse_reconstruction().data(), static_cast<int>(this->_internal_sparse_reconstruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReconstructionData.sparse_reconstruction");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sparse_reconstruction(), target);
  }

  // string obj = 5;
  if (this->obj().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_obj().data(), static_cast<int>(this->_internal_obj().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReconstructionData.obj");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_obj(), target);
  }

  // string images_path = 6;
  if (this->images_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_images_path().data(), static_cast<int>(this->_internal_images_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReconstructionData.images_path");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_images_path(), target);
  }

  // string sfm_path = 7;
  if (this->sfm_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sfm_path().data(), static_cast<int>(this->_internal_sfm_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReconstructionData.sfm_path");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sfm_path(), target);
  }

  // string mvs_path = 8;
  if (this->mvs_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mvs_path().data(), static_cast<int>(this->_internal_mvs_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReconstructionData.mvs_path");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_mvs_path(), target);
  }

  // string features_path = 9;
  if (this->features_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_features_path().data(), static_cast<int>(this->_internal_features_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReconstructionData.features_path");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_features_path(), target);
  }

  // string matches_path = 10;
  if (this->matches_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_matches_path().data(), static_cast<int>(this->_internal_matches_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReconstructionData.matches_path");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_matches_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReconstructionData)
  return target;
}

size_t ReconstructionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReconstructionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string images = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(images_.size());
  for (int i = 0, n = images_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      images_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string root = 2;
  if (this->root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root());
  }

  // string sparse_reconstruction = 4;
  if (this->sparse_reconstruction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sparse_reconstruction());
  }

  // string obj = 5;
  if (this->obj().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj());
  }

  // string images_path = 6;
  if (this->images_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_images_path());
  }

  // string sfm_path = 7;
  if (this->sfm_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sfm_path());
  }

  // string mvs_path = 8;
  if (this->mvs_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mvs_path());
  }

  // string features_path = 9;
  if (this->features_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_features_path());
  }

  // string matches_path = 10;
  if (this->matches_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_matches_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReconstructionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReconstructionData)
  GOOGLE_DCHECK_NE(&from, this);
  const ReconstructionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReconstructionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReconstructionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReconstructionData)
    MergeFrom(*source);
  }
}

void ReconstructionData::MergeFrom(const ReconstructionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReconstructionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.root().size() > 0) {

    root_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_);
  }
  if (from.sparse_reconstruction().size() > 0) {

    sparse_reconstruction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sparse_reconstruction_);
  }
  if (from.obj().size() > 0) {

    obj_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obj_);
  }
  if (from.images_path().size() > 0) {

    images_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.images_path_);
  }
  if (from.sfm_path().size() > 0) {

    sfm_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sfm_path_);
  }
  if (from.mvs_path().size() > 0) {

    mvs_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mvs_path_);
  }
  if (from.features_path().size() > 0) {

    features_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.features_path_);
  }
  if (from.matches_path().size() > 0) {

    matches_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.matches_path_);
  }
}

void ReconstructionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReconstructionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconstructionData::CopyFrom(const ReconstructionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReconstructionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconstructionData::IsInitialized() const {
  return true;
}

void ReconstructionData::InternalSwap(ReconstructionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  images_.InternalSwap(&other->images_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  root_.Swap(&other->root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sparse_reconstruction_.Swap(&other->sparse_reconstruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  obj_.Swap(&other->obj_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  images_path_.Swap(&other->images_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sfm_path_.Swap(&other->sfm_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mvs_path_.Swap(&other->mvs_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  features_path_.Swap(&other->features_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  matches_path_.Swap(&other->matches_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconstructionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageUploadResponse::InitAsDefaultInstance() {
}
class ImageUploadResponse::_Internal {
 public:
};

ImageUploadResponse::ImageUploadResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageUploadResponse)
}
ImageUploadResponse::ImageUploadResponse(const ImageUploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ImageUploadResponse)
}

void ImageUploadResponse::SharedCtor() {
  success_ = false;
}

ImageUploadResponse::~ImageUploadResponse() {
  // @@protoc_insertion_point(destructor:ImageUploadResponse)
  SharedDtor();
}

void ImageUploadResponse::SharedDtor() {
}

void ImageUploadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageUploadResponse& ImageUploadResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageUploadResponse_server_2eproto.base);
  return *internal_default_instance();
}


void ImageUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageUploadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* ImageUploadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageUploadResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageUploadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageUploadResponse)
  return target;
}

size_t ImageUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageUploadResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageUploadResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageUploadResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageUploadResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageUploadResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageUploadResponse)
    MergeFrom(*source);
  }
}

void ImageUploadResponse::MergeFrom(const ImageUploadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ImageUploadResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageUploadResponse::CopyFrom(const ImageUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageUploadResponse::IsInitialized() const {
  return true;
}

void ImageUploadResponse::InternalSwap(ImageUploadResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageUploadResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadImageRequest::InitAsDefaultInstance() {
  ::_UploadImageRequest_default_instance_._instance.get_mutable()->image_ = const_cast< ::ImageData*>(
      ::ImageData::internal_default_instance());
}
class UploadImageRequest::_Internal {
 public:
  static const ::ImageData& image(const UploadImageRequest* msg);
};

const ::ImageData&
UploadImageRequest::_Internal::image(const UploadImageRequest* msg) {
  return *msg->image_;
}
UploadImageRequest::UploadImageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UploadImageRequest)
}
UploadImageRequest::UploadImageRequest(const UploadImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reconstruction_id().empty()) {
    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
  if (from._internal_has_image()) {
    image_ = new ::ImageData(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:UploadImageRequest)
}

void UploadImageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadImageRequest_server_2eproto.base);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_ = nullptr;
}

UploadImageRequest::~UploadImageRequest() {
  // @@protoc_insertion_point(destructor:UploadImageRequest)
  SharedDtor();
}

void UploadImageRequest::SharedDtor() {
  reconstruction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
}

void UploadImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadImageRequest& UploadImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadImageRequest_server_2eproto.base);
  return *internal_default_instance();
}


void UploadImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UploadImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear();
}

const char* UploadImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reconstruction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reconstruction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UploadImageRequest.reconstruction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ImageData image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UploadImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reconstruction_id().data(), static_cast<int>(this->_internal_reconstruction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UploadImageRequest.reconstruction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reconstruction_id(), target);
  }

  // .ImageData image = 2;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UploadImageRequest)
  return target;
}

size_t UploadImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UploadImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reconstruction_id());
  }

  // .ImageData image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UploadImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UploadImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UploadImageRequest)
    MergeFrom(*source);
  }
}

void UploadImageRequest::MergeFrom(const UploadImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UploadImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reconstruction_id().size() > 0) {

    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
  if (from.has_image()) {
    _internal_mutable_image()->::ImageData::MergeFrom(from._internal_image());
  }
}

void UploadImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UploadImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadImageRequest::CopyFrom(const UploadImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UploadImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadImageRequest::IsInitialized() const {
  return true;
}

void UploadImageRequest::InternalSwap(UploadImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reconstruction_id_.Swap(&other->reconstruction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewReconstructionRequest::InitAsDefaultInstance() {
}
class NewReconstructionRequest::_Internal {
 public:
};

NewReconstructionRequest::NewReconstructionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewReconstructionRequest)
}
NewReconstructionRequest::NewReconstructionRequest(const NewReconstructionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NewReconstructionRequest)
}

void NewReconstructionRequest::SharedCtor() {
}

NewReconstructionRequest::~NewReconstructionRequest() {
  // @@protoc_insertion_point(destructor:NewReconstructionRequest)
  SharedDtor();
}

void NewReconstructionRequest::SharedDtor() {
}

void NewReconstructionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewReconstructionRequest& NewReconstructionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewReconstructionRequest_server_2eproto.base);
  return *internal_default_instance();
}


void NewReconstructionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NewReconstructionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* NewReconstructionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewReconstructionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewReconstructionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewReconstructionRequest)
  return target;
}

size_t NewReconstructionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewReconstructionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewReconstructionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NewReconstructionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewReconstructionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewReconstructionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NewReconstructionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NewReconstructionRequest)
    MergeFrom(*source);
  }
}

void NewReconstructionRequest::MergeFrom(const NewReconstructionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NewReconstructionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NewReconstructionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NewReconstructionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewReconstructionRequest::CopyFrom(const NewReconstructionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewReconstructionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewReconstructionRequest::IsInitialized() const {
  return true;
}

void NewReconstructionRequest::InternalSwap(NewReconstructionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewReconstructionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewReconstructionResponse::InitAsDefaultInstance() {
}
class NewReconstructionResponse::_Internal {
 public:
};

NewReconstructionResponse::NewReconstructionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewReconstructionResponse)
}
NewReconstructionResponse::NewReconstructionResponse(const NewReconstructionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reconstruction_id().empty()) {
    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NewReconstructionResponse)
}

void NewReconstructionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewReconstructionResponse_server_2eproto.base);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NewReconstructionResponse::~NewReconstructionResponse() {
  // @@protoc_insertion_point(destructor:NewReconstructionResponse)
  SharedDtor();
}

void NewReconstructionResponse::SharedDtor() {
  reconstruction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewReconstructionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewReconstructionResponse& NewReconstructionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewReconstructionResponse_server_2eproto.base);
  return *internal_default_instance();
}


void NewReconstructionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NewReconstructionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* NewReconstructionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reconstruction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reconstruction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NewReconstructionResponse.reconstruction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewReconstructionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewReconstructionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reconstruction_id().data(), static_cast<int>(this->_internal_reconstruction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NewReconstructionResponse.reconstruction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reconstruction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewReconstructionResponse)
  return target;
}

size_t NewReconstructionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewReconstructionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reconstruction_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewReconstructionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NewReconstructionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewReconstructionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewReconstructionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NewReconstructionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NewReconstructionResponse)
    MergeFrom(*source);
  }
}

void NewReconstructionResponse::MergeFrom(const NewReconstructionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NewReconstructionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reconstruction_id().size() > 0) {

    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
}

void NewReconstructionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NewReconstructionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewReconstructionResponse::CopyFrom(const NewReconstructionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewReconstructionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewReconstructionResponse::IsInitialized() const {
  return true;
}

void NewReconstructionResponse::InternalSwap(NewReconstructionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reconstruction_id_.Swap(&other->reconstruction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NewReconstructionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReconstructRequest::InitAsDefaultInstance() {
}
class ReconstructRequest::_Internal {
 public:
};

ReconstructRequest::ReconstructRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReconstructRequest)
}
ReconstructRequest::ReconstructRequest(const ReconstructRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reconstruction_id().empty()) {
    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ReconstructRequest)
}

void ReconstructRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReconstructRequest_server_2eproto.base);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReconstructRequest::~ReconstructRequest() {
  // @@protoc_insertion_point(destructor:ReconstructRequest)
  SharedDtor();
}

void ReconstructRequest::SharedDtor() {
  reconstruction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReconstructRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReconstructRequest& ReconstructRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReconstructRequest_server_2eproto.base);
  return *internal_default_instance();
}


void ReconstructRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ReconstructRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ReconstructRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reconstruction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reconstruction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReconstructRequest.reconstruction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReconstructRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReconstructRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reconstruction_id().data(), static_cast<int>(this->_internal_reconstruction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReconstructRequest.reconstruction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reconstruction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReconstructRequest)
  return target;
}

size_t ReconstructRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReconstructRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reconstruction_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReconstructRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReconstructRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReconstructRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReconstructRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReconstructRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReconstructRequest)
    MergeFrom(*source);
  }
}

void ReconstructRequest::MergeFrom(const ReconstructRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReconstructRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reconstruction_id().size() > 0) {

    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
}

void ReconstructRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReconstructRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconstructRequest::CopyFrom(const ReconstructRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReconstructRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconstructRequest::IsInitialized() const {
  return true;
}

void ReconstructRequest::InternalSwap(ReconstructRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reconstruction_id_.Swap(&other->reconstruction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconstructRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOBJRequest::InitAsDefaultInstance() {
}
class GetOBJRequest::_Internal {
 public:
};

GetOBJRequest::GetOBJRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetOBJRequest)
}
GetOBJRequest::GetOBJRequest(const GetOBJRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reconstruction_id().empty()) {
    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
  // @@protoc_insertion_point(copy_constructor:GetOBJRequest)
}

void GetOBJRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOBJRequest_server_2eproto.base);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetOBJRequest::~GetOBJRequest() {
  // @@protoc_insertion_point(destructor:GetOBJRequest)
  SharedDtor();
}

void GetOBJRequest::SharedDtor() {
  reconstruction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOBJRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOBJRequest& GetOBJRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOBJRequest_server_2eproto.base);
  return *internal_default_instance();
}


void GetOBJRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetOBJRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetOBJRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reconstruction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reconstruction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetOBJRequest.reconstruction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOBJRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetOBJRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reconstruction_id().data(), static_cast<int>(this->_internal_reconstruction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetOBJRequest.reconstruction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reconstruction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetOBJRequest)
  return target;
}

size_t GetOBJRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetOBJRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reconstruction_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOBJRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetOBJRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOBJRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOBJRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetOBJRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetOBJRequest)
    MergeFrom(*source);
  }
}

void GetOBJRequest::MergeFrom(const GetOBJRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetOBJRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reconstruction_id().size() > 0) {

    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
}

void GetOBJRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetOBJRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOBJRequest::CopyFrom(const GetOBJRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetOBJRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOBJRequest::IsInitialized() const {
  return true;
}

void GetOBJRequest::InternalSwap(GetOBJRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reconstruction_id_.Swap(&other->reconstruction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOBJRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOBJResponse::InitAsDefaultInstance() {
  ::_GetOBJResponse_default_instance_._instance.get_mutable()->obj_ = const_cast< ::OBJData*>(
      ::OBJData::internal_default_instance());
}
class GetOBJResponse::_Internal {
 public:
  static const ::OBJData& obj(const GetOBJResponse* msg);
};

const ::OBJData&
GetOBJResponse::_Internal::obj(const GetOBJResponse* msg) {
  return *msg->obj_;
}
GetOBJResponse::GetOBJResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetOBJResponse)
}
GetOBJResponse::GetOBJResponse(const GetOBJResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_obj()) {
    obj_ = new ::OBJData(*from.obj_);
  } else {
    obj_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:GetOBJResponse)
}

void GetOBJResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOBJResponse_server_2eproto.base);
  ::memset(&obj_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&obj_)) + sizeof(success_));
}

GetOBJResponse::~GetOBJResponse() {
  // @@protoc_insertion_point(destructor:GetOBJResponse)
  SharedDtor();
}

void GetOBJResponse::SharedDtor() {
  if (this != internal_default_instance()) delete obj_;
}

void GetOBJResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOBJResponse& GetOBJResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOBJResponse_server_2eproto.base);
  return *internal_default_instance();
}


void GetOBJResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetOBJResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && obj_ != nullptr) {
    delete obj_;
  }
  obj_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* GetOBJResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OBJData obj = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOBJResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetOBJResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .OBJData obj = 2;
  if (this->has_obj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::obj(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetOBJResponse)
  return target;
}

size_t GetOBJResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetOBJResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OBJData obj = 2;
  if (this->has_obj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obj_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOBJResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetOBJResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOBJResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOBJResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetOBJResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetOBJResponse)
    MergeFrom(*source);
  }
}

void GetOBJResponse::MergeFrom(const GetOBJResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetOBJResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_obj()) {
    _internal_mutable_obj()->::OBJData::MergeFrom(from._internal_obj());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void GetOBJResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetOBJResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOBJResponse::CopyFrom(const GetOBJResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetOBJResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOBJResponse::IsInitialized() const {
  return true;
}

void GetOBJResponse::InternalSwap(GetOBJResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(obj_, other->obj_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOBJResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReconstructResponse::InitAsDefaultInstance() {
}
class ReconstructResponse::_Internal {
 public:
};

ReconstructResponse::ReconstructResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReconstructResponse)
}
ReconstructResponse::ReconstructResponse(const ReconstructResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ReconstructResponse)
}

void ReconstructResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReconstructResponse_server_2eproto.base);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

ReconstructResponse::~ReconstructResponse() {
  // @@protoc_insertion_point(destructor:ReconstructResponse)
  SharedDtor();
}

void ReconstructResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReconstructResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReconstructResponse& ReconstructResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReconstructResponse_server_2eproto.base);
  return *internal_default_instance();
}


void ReconstructResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ReconstructResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

const char* ReconstructResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReconstructResponse.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReconstructResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReconstructResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReconstructResponse.error_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReconstructResponse)
  return target;
}

size_t ReconstructResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReconstructResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReconstructResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReconstructResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReconstructResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReconstructResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReconstructResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReconstructResponse)
    MergeFrom(*source);
  }
}

void ReconstructResponse::MergeFrom(const ReconstructResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReconstructResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ReconstructResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReconstructResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconstructResponse::CopyFrom(const ReconstructResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReconstructResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconstructResponse::IsInitialized() const {
  return true;
}

void ReconstructResponse::InternalSwap(ReconstructResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconstructResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReconstructionOBJ::InitAsDefaultInstance() {
}
class ReconstructionOBJ::_Internal {
 public:
};

ReconstructionOBJ::ReconstructionOBJ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReconstructionOBJ)
}
ReconstructionOBJ::ReconstructionOBJ(const ReconstructionOBJ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_obj().empty()) {
    obj_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obj_);
  }
  // @@protoc_insertion_point(copy_constructor:ReconstructionOBJ)
}

void ReconstructionOBJ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReconstructionOBJ_server_2eproto.base);
  obj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReconstructionOBJ::~ReconstructionOBJ() {
  // @@protoc_insertion_point(destructor:ReconstructionOBJ)
  SharedDtor();
}

void ReconstructionOBJ::SharedDtor() {
  obj_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReconstructionOBJ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReconstructionOBJ& ReconstructionOBJ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReconstructionOBJ_server_2eproto.base);
  return *internal_default_instance();
}


void ReconstructionOBJ::Clear() {
// @@protoc_insertion_point(message_clear_start:ReconstructionOBJ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obj_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ReconstructionOBJ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes obj = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_obj();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReconstructionOBJ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReconstructionOBJ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes obj = 1;
  if (this->obj().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_obj(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReconstructionOBJ)
  return target;
}

size_t ReconstructionOBJ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReconstructionOBJ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes obj = 1;
  if (this->obj().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_obj());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReconstructionOBJ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReconstructionOBJ)
  GOOGLE_DCHECK_NE(&from, this);
  const ReconstructionOBJ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReconstructionOBJ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReconstructionOBJ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReconstructionOBJ)
    MergeFrom(*source);
  }
}

void ReconstructionOBJ::MergeFrom(const ReconstructionOBJ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReconstructionOBJ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj().size() > 0) {

    obj_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obj_);
  }
}

void ReconstructionOBJ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReconstructionOBJ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconstructionOBJ::CopyFrom(const ReconstructionOBJ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReconstructionOBJ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconstructionOBJ::IsInitialized() const {
  return true;
}

void ReconstructionOBJ::InternalSwap(ReconstructionOBJ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  obj_.Swap(&other->obj_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconstructionOBJ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteReconstructionRequest::InitAsDefaultInstance() {
}
class DeleteReconstructionRequest::_Internal {
 public:
};

DeleteReconstructionRequest::DeleteReconstructionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeleteReconstructionRequest)
}
DeleteReconstructionRequest::DeleteReconstructionRequest(const DeleteReconstructionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:DeleteReconstructionRequest)
}

void DeleteReconstructionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteReconstructionRequest_server_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteReconstructionRequest::~DeleteReconstructionRequest() {
  // @@protoc_insertion_point(destructor:DeleteReconstructionRequest)
  SharedDtor();
}

void DeleteReconstructionRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteReconstructionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteReconstructionRequest& DeleteReconstructionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteReconstructionRequest_server_2eproto.base);
  return *internal_default_instance();
}


void DeleteReconstructionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteReconstructionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeleteReconstructionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DeleteReconstructionRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteReconstructionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeleteReconstructionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeleteReconstructionRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteReconstructionRequest)
  return target;
}

size_t DeleteReconstructionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteReconstructionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteReconstructionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeleteReconstructionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteReconstructionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteReconstructionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeleteReconstructionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeleteReconstructionRequest)
    MergeFrom(*source);
  }
}

void DeleteReconstructionRequest::MergeFrom(const DeleteReconstructionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteReconstructionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void DeleteReconstructionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeleteReconstructionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteReconstructionRequest::CopyFrom(const DeleteReconstructionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteReconstructionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteReconstructionRequest::IsInitialized() const {
  return true;
}

void DeleteReconstructionRequest::InternalSwap(DeleteReconstructionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteReconstructionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteReconstructionResponse::InitAsDefaultInstance() {
}
class DeleteReconstructionResponse::_Internal {
 public:
};

DeleteReconstructionResponse::DeleteReconstructionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeleteReconstructionResponse)
}
DeleteReconstructionResponse::DeleteReconstructionResponse(const DeleteReconstructionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DeleteReconstructionResponse)
}

void DeleteReconstructionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteReconstructionResponse_server_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

DeleteReconstructionResponse::~DeleteReconstructionResponse() {
  // @@protoc_insertion_point(destructor:DeleteReconstructionResponse)
  SharedDtor();
}

void DeleteReconstructionResponse::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteReconstructionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteReconstructionResponse& DeleteReconstructionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteReconstructionResponse_server_2eproto.base);
  return *internal_default_instance();
}


void DeleteReconstructionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteReconstructionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteReconstructionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DeleteReconstructionResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteReconstructionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeleteReconstructionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeleteReconstructionResponse.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteReconstructionResponse)
  return target;
}

size_t DeleteReconstructionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteReconstructionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteReconstructionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeleteReconstructionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteReconstructionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteReconstructionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeleteReconstructionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeleteReconstructionResponse)
    MergeFrom(*source);
  }
}

void DeleteReconstructionResponse::MergeFrom(const DeleteReconstructionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteReconstructionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void DeleteReconstructionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeleteReconstructionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteReconstructionResponse::CopyFrom(const DeleteReconstructionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteReconstructionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteReconstructionResponse::IsInitialized() const {
  return true;
}

void DeleteReconstructionResponse::InternalSwap(DeleteReconstructionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteReconstructionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraIntrinsics::InitAsDefaultInstance() {
}
class CameraIntrinsics::_Internal {
 public:
};

CameraIntrinsics::CameraIntrinsics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CameraIntrinsics)
}
CameraIntrinsics::CameraIntrinsics(const CameraIntrinsics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  maker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maker().empty()) {
    maker_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maker_);
  }
  numeric_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_numeric_model().empty()) {
    numeric_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.numeric_model_);
  }
  focus_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_focus_mode().empty()) {
    focus_mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.focus_mode_);
  }
  ::memcpy(&sensor_size_, &from.sensor_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&jpeg_quality_) -
    reinterpret_cast<char*>(&sensor_size_)) + sizeof(jpeg_quality_));
  // @@protoc_insertion_point(copy_constructor:CameraIntrinsics)
}

void CameraIntrinsics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraIntrinsics_server_2eproto.base);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  numeric_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  focus_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sensor_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jpeg_quality_) -
      reinterpret_cast<char*>(&sensor_size_)) + sizeof(jpeg_quality_));
}

CameraIntrinsics::~CameraIntrinsics() {
  // @@protoc_insertion_point(destructor:CameraIntrinsics)
  SharedDtor();
}

void CameraIntrinsics::SharedDtor() {
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maker_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  numeric_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  focus_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CameraIntrinsics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraIntrinsics& CameraIntrinsics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraIntrinsics_server_2eproto.base);
  return *internal_default_instance();
}


void CameraIntrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:CameraIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maker_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  numeric_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  focus_mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sensor_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jpeg_quality_) -
      reinterpret_cast<char*>(&sensor_size_)) + sizeof(jpeg_quality_));
  _internal_metadata_.Clear();
}

const char* CameraIntrinsics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CameraIntrinsics.model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_maker();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CameraIntrinsics.maker"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string numeric_model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_numeric_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CameraIntrinsics.numeric_model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float sensor_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          sensor_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string focus_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_focus_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CameraIntrinsics.focus_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float horizontal_view_angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          horizontal_view_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 jpeg_quality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          jpeg_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraIntrinsics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CameraIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CameraIntrinsics.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // string maker = 2;
  if (this->maker().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maker().data(), static_cast<int>(this->_internal_maker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CameraIntrinsics.maker");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_maker(), target);
  }

  // string numeric_model = 3;
  if (this->numeric_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_numeric_model().data(), static_cast<int>(this->_internal_numeric_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CameraIntrinsics.numeric_model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_numeric_model(), target);
  }

  // float sensor_size = 4;
  if (!(this->sensor_size() <= 0 && this->sensor_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_sensor_size(), target);
  }

  // string focus_mode = 5;
  if (this->focus_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_focus_mode().data(), static_cast<int>(this->_internal_focus_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CameraIntrinsics.focus_mode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_focus_mode(), target);
  }

  // float horizontal_view_angle = 6;
  if (!(this->horizontal_view_angle() <= 0 && this->horizontal_view_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_horizontal_view_angle(), target);
  }

  // int32 jpeg_quality = 7;
  if (this->jpeg_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_jpeg_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CameraIntrinsics)
  return target;
}

size_t CameraIntrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CameraIntrinsics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string maker = 2;
  if (this->maker().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maker());
  }

  // string numeric_model = 3;
  if (this->numeric_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_numeric_model());
  }

  // string focus_mode = 5;
  if (this->focus_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_focus_mode());
  }

  // float sensor_size = 4;
  if (!(this->sensor_size() <= 0 && this->sensor_size() >= 0)) {
    total_size += 1 + 4;
  }

  // float horizontal_view_angle = 6;
  if (!(this->horizontal_view_angle() <= 0 && this->horizontal_view_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 jpeg_quality = 7;
  if (this->jpeg_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_jpeg_quality());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraIntrinsics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CameraIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraIntrinsics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraIntrinsics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CameraIntrinsics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CameraIntrinsics)
    MergeFrom(*source);
  }
}

void CameraIntrinsics::MergeFrom(const CameraIntrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CameraIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.maker().size() > 0) {

    maker_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maker_);
  }
  if (from.numeric_model().size() > 0) {

    numeric_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.numeric_model_);
  }
  if (from.focus_mode().size() > 0) {

    focus_mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.focus_mode_);
  }
  if (!(from.sensor_size() <= 0 && from.sensor_size() >= 0)) {
    _internal_set_sensor_size(from._internal_sensor_size());
  }
  if (!(from.horizontal_view_angle() <= 0 && from.horizontal_view_angle() >= 0)) {
    _internal_set_horizontal_view_angle(from._internal_horizontal_view_angle());
  }
  if (from.jpeg_quality() != 0) {
    _internal_set_jpeg_quality(from._internal_jpeg_quality());
  }
}

void CameraIntrinsics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CameraIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraIntrinsics::CopyFrom(const CameraIntrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CameraIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraIntrinsics::IsInitialized() const {
  return true;
}

void CameraIntrinsics::InternalSwap(CameraIntrinsics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  maker_.Swap(&other->maker_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  numeric_model_.Swap(&other->numeric_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  focus_mode_.Swap(&other->focus_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sensor_size_, other->sensor_size_);
  swap(horizontal_view_angle_, other->horizontal_view_angle_);
  swap(jpeg_quality_, other->jpeg_quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraIntrinsics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HandhsakeRequest::InitAsDefaultInstance() {
  ::_HandhsakeRequest_default_instance_._instance.get_mutable()->camera_intrinsics_ = const_cast< ::CameraIntrinsics*>(
      ::CameraIntrinsics::internal_default_instance());
}
class HandhsakeRequest::_Internal {
 public:
  static const ::CameraIntrinsics& camera_intrinsics(const HandhsakeRequest* msg);
};

const ::CameraIntrinsics&
HandhsakeRequest::_Internal::camera_intrinsics(const HandhsakeRequest* msg) {
  return *msg->camera_intrinsics_;
}
HandhsakeRequest::HandhsakeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HandhsakeRequest)
}
HandhsakeRequest::HandhsakeRequest(const HandhsakeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identifier().empty()) {
    identifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
  if (from._internal_has_camera_intrinsics()) {
    camera_intrinsics_ = new ::CameraIntrinsics(*from.camera_intrinsics_);
  } else {
    camera_intrinsics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HandhsakeRequest)
}

void HandhsakeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HandhsakeRequest_server_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_intrinsics_ = nullptr;
}

HandhsakeRequest::~HandhsakeRequest() {
  // @@protoc_insertion_point(destructor:HandhsakeRequest)
  SharedDtor();
}

void HandhsakeRequest::SharedDtor() {
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete camera_intrinsics_;
}

void HandhsakeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HandhsakeRequest& HandhsakeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HandhsakeRequest_server_2eproto.base);
  return *internal_default_instance();
}


void HandhsakeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HandhsakeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && camera_intrinsics_ != nullptr) {
    delete camera_intrinsics_;
  }
  camera_intrinsics_ = nullptr;
  _internal_metadata_.Clear();
}

const char* HandhsakeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HandhsakeRequest.identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CameraIntrinsics camera_intrinsics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_intrinsics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HandhsakeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HandhsakeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1;
  if (this->identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HandhsakeRequest.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // .CameraIntrinsics camera_intrinsics = 2;
  if (this->has_camera_intrinsics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::camera_intrinsics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HandhsakeRequest)
  return target;
}

size_t HandhsakeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HandhsakeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 1;
  if (this->identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // .CameraIntrinsics camera_intrinsics = 2;
  if (this->has_camera_intrinsics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_intrinsics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandhsakeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HandhsakeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HandhsakeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HandhsakeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HandhsakeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HandhsakeRequest)
    MergeFrom(*source);
  }
}

void HandhsakeRequest::MergeFrom(const HandhsakeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HandhsakeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier().size() > 0) {

    identifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
  if (from.has_camera_intrinsics()) {
    _internal_mutable_camera_intrinsics()->::CameraIntrinsics::MergeFrom(from._internal_camera_intrinsics());
  }
}

void HandhsakeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HandhsakeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandhsakeRequest::CopyFrom(const HandhsakeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HandhsakeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandhsakeRequest::IsInitialized() const {
  return true;
}

void HandhsakeRequest::InternalSwap(HandhsakeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(camera_intrinsics_, other->camera_intrinsics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandhsakeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HandshakeResponse::InitAsDefaultInstance() {
}
class HandshakeResponse::_Internal {
 public:
};

HandshakeResponse::HandshakeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HandshakeResponse)
}
HandshakeResponse::HandshakeResponse(const HandshakeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:HandshakeResponse)
}

void HandshakeResponse::SharedCtor() {
  success_ = false;
}

HandshakeResponse::~HandshakeResponse() {
  // @@protoc_insertion_point(destructor:HandshakeResponse)
  SharedDtor();
}

void HandshakeResponse::SharedDtor() {
}

void HandshakeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HandshakeResponse& HandshakeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HandshakeResponse_server_2eproto.base);
  return *internal_default_instance();
}


void HandshakeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HandshakeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* HandshakeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HandshakeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HandshakeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HandshakeResponse)
  return target;
}

size_t HandshakeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HandshakeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandshakeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HandshakeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HandshakeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HandshakeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HandshakeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HandshakeResponse)
    MergeFrom(*source);
  }
}

void HandshakeResponse::MergeFrom(const HandshakeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HandshakeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void HandshakeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HandshakeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeResponse::CopyFrom(const HandshakeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HandshakeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeResponse::IsInitialized() const {
  return true;
}

void HandshakeResponse::InternalSwap(HandshakeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartSessionRequest::InitAsDefaultInstance() {
}
class StartSessionRequest::_Internal {
 public:
};

StartSessionRequest::StartSessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartSessionRequest)
}
StartSessionRequest::StartSessionRequest(const StartSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reconstruction_id().empty()) {
    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
  // @@protoc_insertion_point(copy_constructor:StartSessionRequest)
}

void StartSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartSessionRequest_server_2eproto.base);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StartSessionRequest::~StartSessionRequest() {
  // @@protoc_insertion_point(destructor:StartSessionRequest)
  SharedDtor();
}

void StartSessionRequest::SharedDtor() {
  reconstruction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartSessionRequest& StartSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartSessionRequest_server_2eproto.base);
  return *internal_default_instance();
}


void StartSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StartSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StartSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reconstruction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reconstruction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StartSessionRequest.reconstruction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reconstruction_id().data(), static_cast<int>(this->_internal_reconstruction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StartSessionRequest.reconstruction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reconstruction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartSessionRequest)
  return target;
}

size_t StartSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reconstruction_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartSessionRequest)
    MergeFrom(*source);
  }
}

void StartSessionRequest::MergeFrom(const StartSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reconstruction_id().size() > 0) {

    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
}

void StartSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartSessionRequest::CopyFrom(const StartSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSessionRequest::IsInitialized() const {
  return true;
}

void StartSessionRequest::InternalSwap(StartSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reconstruction_id_.Swap(&other->reconstruction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StartSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartSessionResponse::InitAsDefaultInstance() {
}
class StartSessionResponse::_Internal {
 public:
};

StartSessionResponse::StartSessionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartSessionResponse)
}
StartSessionResponse::StartSessionResponse(const StartSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reconstruction_id().empty()) {
    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:StartSessionResponse)
}

void StartSessionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartSessionResponse_server_2eproto.base);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StartSessionResponse::~StartSessionResponse() {
  // @@protoc_insertion_point(destructor:StartSessionResponse)
  SharedDtor();
}

void StartSessionResponse::SharedDtor() {
  reconstruction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartSessionResponse& StartSessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartSessionResponse_server_2eproto.base);
  return *internal_default_instance();
}


void StartSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StartSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StartSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reconstruction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reconstruction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StartSessionResponse.reconstruction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StartSessionResponse.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartSessionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reconstruction_id().data(), static_cast<int>(this->_internal_reconstruction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StartSessionResponse.reconstruction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reconstruction_id(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StartSessionResponse.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartSessionResponse)
  return target;
}

size_t StartSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartSessionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reconstruction_id());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartSessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartSessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartSessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartSessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartSessionResponse)
    MergeFrom(*source);
  }
}

void StartSessionResponse::MergeFrom(const StartSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reconstruction_id().size() > 0) {

    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void StartSessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartSessionResponse::CopyFrom(const StartSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSessionResponse::IsInitialized() const {
  return true;
}

void StartSessionResponse::InternalSwap(StartSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reconstruction_id_.Swap(&other->reconstruction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StartSessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopSessionRequest::InitAsDefaultInstance() {
}
class StopSessionRequest::_Internal {
 public:
};

StopSessionRequest::StopSessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StopSessionRequest)
}
StopSessionRequest::StopSessionRequest(const StopSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:StopSessionRequest)
}

void StopSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopSessionRequest_server_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopSessionRequest::~StopSessionRequest() {
  // @@protoc_insertion_point(destructor:StopSessionRequest)
  SharedDtor();
}

void StopSessionRequest::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopSessionRequest& StopSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopSessionRequest_server_2eproto.base);
  return *internal_default_instance();
}


void StopSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StopSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StopSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StopSessionRequest.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StopSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StopSessionRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StopSessionRequest)
  return target;
}

size_t StopSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StopSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StopSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StopSessionRequest)
    MergeFrom(*source);
  }
}

void StopSessionRequest::MergeFrom(const StopSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StopSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void StopSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StopSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSessionRequest::CopyFrom(const StopSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSessionRequest::IsInitialized() const {
  return true;
}

void StopSessionRequest::InternalSwap(StopSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopSessionResponse::InitAsDefaultInstance() {
}
class StopSessionResponse::_Internal {
 public:
};

StopSessionResponse::StopSessionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StopSessionResponse)
}
StopSessionResponse::StopSessionResponse(const StopSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:StopSessionResponse)
}

void StopSessionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopSessionResponse_server_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopSessionResponse::~StopSessionResponse() {
  // @@protoc_insertion_point(destructor:StopSessionResponse)
  SharedDtor();
}

void StopSessionResponse::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopSessionResponse& StopSessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopSessionResponse_server_2eproto.base);
  return *internal_default_instance();
}


void StopSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StopSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StopSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StopSessionResponse.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopSessionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StopSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StopSessionResponse.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StopSessionResponse)
  return target;
}

size_t StopSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopSessionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopSessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StopSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopSessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StopSessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StopSessionResponse)
    MergeFrom(*source);
  }
}

void StopSessionResponse::MergeFrom(const StopSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StopSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void StopSessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StopSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSessionResponse::CopyFrom(const StopSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSessionResponse::IsInitialized() const {
  return true;
}

void StopSessionResponse::InternalSwap(StopSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionUploadImageRequest::InitAsDefaultInstance() {
  ::_SessionUploadImageRequest_default_instance_._instance.get_mutable()->upload_image_ = const_cast< ::UploadImageRequest*>(
      ::UploadImageRequest::internal_default_instance());
}
class SessionUploadImageRequest::_Internal {
 public:
  static const ::UploadImageRequest& upload_image(const SessionUploadImageRequest* msg);
};

const ::UploadImageRequest&
SessionUploadImageRequest::_Internal::upload_image(const SessionUploadImageRequest* msg) {
  return *msg->upload_image_;
}
SessionUploadImageRequest::SessionUploadImageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SessionUploadImageRequest)
}
SessionUploadImageRequest::SessionUploadImageRequest(const SessionUploadImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from._internal_has_upload_image()) {
    upload_image_ = new ::UploadImageRequest(*from.upload_image_);
  } else {
    upload_image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SessionUploadImageRequest)
}

void SessionUploadImageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionUploadImageRequest_server_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  upload_image_ = nullptr;
}

SessionUploadImageRequest::~SessionUploadImageRequest() {
  // @@protoc_insertion_point(destructor:SessionUploadImageRequest)
  SharedDtor();
}

void SessionUploadImageRequest::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete upload_image_;
}

void SessionUploadImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionUploadImageRequest& SessionUploadImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionUploadImageRequest_server_2eproto.base);
  return *internal_default_instance();
}


void SessionUploadImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SessionUploadImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && upload_image_ != nullptr) {
    delete upload_image_;
  }
  upload_image_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SessionUploadImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SessionUploadImageRequest.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UploadImageRequest upload_image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_upload_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionUploadImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SessionUploadImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SessionUploadImageRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // .UploadImageRequest upload_image = 2;
  if (this->has_upload_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::upload_image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SessionUploadImageRequest)
  return target;
}

size_t SessionUploadImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SessionUploadImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .UploadImageRequest upload_image = 2;
  if (this->has_upload_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upload_image_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionUploadImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SessionUploadImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionUploadImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionUploadImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SessionUploadImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SessionUploadImageRequest)
    MergeFrom(*source);
  }
}

void SessionUploadImageRequest::MergeFrom(const SessionUploadImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SessionUploadImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_upload_image()) {
    _internal_mutable_upload_image()->::UploadImageRequest::MergeFrom(from._internal_upload_image());
  }
}

void SessionUploadImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SessionUploadImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionUploadImageRequest::CopyFrom(const SessionUploadImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SessionUploadImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionUploadImageRequest::IsInitialized() const {
  return true;
}

void SessionUploadImageRequest::InternalSwap(SessionUploadImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(upload_image_, other->upload_image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionUploadImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionUploadImageResponse::InitAsDefaultInstance() {
}
class SessionUploadImageResponse::_Internal {
 public:
};

SessionUploadImageResponse::SessionUploadImageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SessionUploadImageResponse)
}
SessionUploadImageResponse::SessionUploadImageResponse(const SessionUploadImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SessionUploadImageResponse)
}

void SessionUploadImageResponse::SharedCtor() {
}

SessionUploadImageResponse::~SessionUploadImageResponse() {
  // @@protoc_insertion_point(destructor:SessionUploadImageResponse)
  SharedDtor();
}

void SessionUploadImageResponse::SharedDtor() {
}

void SessionUploadImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionUploadImageResponse& SessionUploadImageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionUploadImageResponse_server_2eproto.base);
  return *internal_default_instance();
}


void SessionUploadImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SessionUploadImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SessionUploadImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionUploadImageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SessionUploadImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SessionUploadImageResponse)
  return target;
}

size_t SessionUploadImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SessionUploadImageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionUploadImageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SessionUploadImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionUploadImageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionUploadImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SessionUploadImageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SessionUploadImageResponse)
    MergeFrom(*source);
  }
}

void SessionUploadImageResponse::MergeFrom(const SessionUploadImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SessionUploadImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SessionUploadImageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SessionUploadImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionUploadImageResponse::CopyFrom(const SessionUploadImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SessionUploadImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionUploadImageResponse::IsInitialized() const {
  return true;
}

void SessionUploadImageResponse::InternalSwap(SessionUploadImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionUploadImageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSparseRequest::InitAsDefaultInstance() {
}
class GetSparseRequest::_Internal {
 public:
};

GetSparseRequest::GetSparseRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetSparseRequest)
}
GetSparseRequest::GetSparseRequest(const GetSparseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reconstruction_id().empty()) {
    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
  // @@protoc_insertion_point(copy_constructor:GetSparseRequest)
}

void GetSparseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSparseRequest_server_2eproto.base);
  reconstruction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSparseRequest::~GetSparseRequest() {
  // @@protoc_insertion_point(destructor:GetSparseRequest)
  SharedDtor();
}

void GetSparseRequest::SharedDtor() {
  reconstruction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSparseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSparseRequest& GetSparseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSparseRequest_server_2eproto.base);
  return *internal_default_instance();
}


void GetSparseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetSparseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetSparseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reconstruction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reconstruction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetSparseRequest.reconstruction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSparseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetSparseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reconstruction_id().data(), static_cast<int>(this->_internal_reconstruction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSparseRequest.reconstruction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reconstruction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetSparseRequest)
  return target;
}

size_t GetSparseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetSparseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reconstruction_id = 1;
  if (this->reconstruction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reconstruction_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSparseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetSparseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSparseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSparseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetSparseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetSparseRequest)
    MergeFrom(*source);
  }
}

void GetSparseRequest::MergeFrom(const GetSparseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetSparseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reconstruction_id().size() > 0) {

    reconstruction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reconstruction_id_);
  }
}

void GetSparseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetSparseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSparseRequest::CopyFrom(const GetSparseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetSparseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSparseRequest::IsInitialized() const {
  return true;
}

void GetSparseRequest::InternalSwap(GetSparseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reconstruction_id_.Swap(&other->reconstruction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSparseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSparseResponse::InitAsDefaultInstance() {
  ::_GetSparseResponse_default_instance_._instance.get_mutable()->sparse_ = const_cast< ::SparsePointCloudData*>(
      ::SparsePointCloudData::internal_default_instance());
}
class GetSparseResponse::_Internal {
 public:
  static const ::SparsePointCloudData& sparse(const GetSparseResponse* msg);
};

const ::SparsePointCloudData&
GetSparseResponse::_Internal::sparse(const GetSparseResponse* msg) {
  return *msg->sparse_;
}
GetSparseResponse::GetSparseResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetSparseResponse)
}
GetSparseResponse::GetSparseResponse(const GetSparseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sparse()) {
    sparse_ = new ::SparsePointCloudData(*from.sparse_);
  } else {
    sparse_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GetSparseResponse)
}

void GetSparseResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSparseResponse_server_2eproto.base);
  sparse_ = nullptr;
}

GetSparseResponse::~GetSparseResponse() {
  // @@protoc_insertion_point(destructor:GetSparseResponse)
  SharedDtor();
}

void GetSparseResponse::SharedDtor() {
  if (this != internal_default_instance()) delete sparse_;
}

void GetSparseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSparseResponse& GetSparseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSparseResponse_server_2eproto.base);
  return *internal_default_instance();
}


void GetSparseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetSparseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sparse_ != nullptr) {
    delete sparse_;
  }
  sparse_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetSparseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SparsePointCloudData sparse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sparse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSparseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetSparseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SparsePointCloudData sparse = 1;
  if (this->has_sparse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sparse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetSparseResponse)
  return target;
}

size_t GetSparseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetSparseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SparsePointCloudData sparse = 1;
  if (this->has_sparse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sparse_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSparseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetSparseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSparseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSparseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetSparseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetSparseResponse)
    MergeFrom(*source);
  }
}

void GetSparseResponse::MergeFrom(const GetSparseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetSparseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sparse()) {
    _internal_mutable_sparse()->::SparsePointCloudData::MergeFrom(from._internal_sparse());
  }
}

void GetSparseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetSparseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSparseResponse::CopyFrom(const GetSparseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetSparseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSparseResponse::IsInitialized() const {
  return true;
}

void GetSparseResponse::InternalSwap(GetSparseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sparse_, other->sparse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSparseResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ImageMetaData* Arena::CreateMaybeMessage< ::ImageMetaData >(Arena* arena) {
  return Arena::CreateInternal< ::ImageMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::ImageData* Arena::CreateMaybeMessage< ::ImageData >(Arena* arena) {
  return Arena::CreateInternal< ::ImageData >(arena);
}
template<> PROTOBUF_NOINLINE ::SparsePointCloudData* Arena::CreateMaybeMessage< ::SparsePointCloudData >(Arena* arena) {
  return Arena::CreateInternal< ::SparsePointCloudData >(arena);
}
template<> PROTOBUF_NOINLINE ::SparsePointCloudMetaData* Arena::CreateMaybeMessage< ::SparsePointCloudMetaData >(Arena* arena) {
  return Arena::CreateInternal< ::SparsePointCloudMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::OBJMetaData* Arena::CreateMaybeMessage< ::OBJMetaData >(Arena* arena) {
  return Arena::CreateInternal< ::OBJMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::OBJData* Arena::CreateMaybeMessage< ::OBJData >(Arena* arena) {
  return Arena::CreateInternal< ::OBJData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReconstructionData* Arena::CreateMaybeMessage< ::ReconstructionData >(Arena* arena) {
  return Arena::CreateInternal< ::ReconstructionData >(arena);
}
template<> PROTOBUF_NOINLINE ::ImageUploadResponse* Arena::CreateMaybeMessage< ::ImageUploadResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ImageUploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::UploadImageRequest* Arena::CreateMaybeMessage< ::UploadImageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UploadImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::NewReconstructionRequest* Arena::CreateMaybeMessage< ::NewReconstructionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::NewReconstructionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::NewReconstructionResponse* Arena::CreateMaybeMessage< ::NewReconstructionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::NewReconstructionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ReconstructRequest* Arena::CreateMaybeMessage< ::ReconstructRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ReconstructRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetOBJRequest* Arena::CreateMaybeMessage< ::GetOBJRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GetOBJRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetOBJResponse* Arena::CreateMaybeMessage< ::GetOBJResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GetOBJResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ReconstructResponse* Arena::CreateMaybeMessage< ::ReconstructResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ReconstructResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ReconstructionOBJ* Arena::CreateMaybeMessage< ::ReconstructionOBJ >(Arena* arena) {
  return Arena::CreateInternal< ::ReconstructionOBJ >(arena);
}
template<> PROTOBUF_NOINLINE ::DeleteReconstructionRequest* Arena::CreateMaybeMessage< ::DeleteReconstructionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DeleteReconstructionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DeleteReconstructionResponse* Arena::CreateMaybeMessage< ::DeleteReconstructionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DeleteReconstructionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CameraIntrinsics* Arena::CreateMaybeMessage< ::CameraIntrinsics >(Arena* arena) {
  return Arena::CreateInternal< ::CameraIntrinsics >(arena);
}
template<> PROTOBUF_NOINLINE ::HandhsakeRequest* Arena::CreateMaybeMessage< ::HandhsakeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::HandhsakeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HandshakeResponse* Arena::CreateMaybeMessage< ::HandshakeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::HandshakeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::StartSessionRequest* Arena::CreateMaybeMessage< ::StartSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::StartSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StartSessionResponse* Arena::CreateMaybeMessage< ::StartSessionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::StartSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::StopSessionRequest* Arena::CreateMaybeMessage< ::StopSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::StopSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StopSessionResponse* Arena::CreateMaybeMessage< ::StopSessionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::StopSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SessionUploadImageRequest* Arena::CreateMaybeMessage< ::SessionUploadImageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SessionUploadImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SessionUploadImageResponse* Arena::CreateMaybeMessage< ::SessionUploadImageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SessionUploadImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GetSparseRequest* Arena::CreateMaybeMessage< ::GetSparseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GetSparseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetSparseResponse* Arena::CreateMaybeMessage< ::GetSparseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GetSparseResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
