// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_image_5fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_image_5fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "server.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_image_5fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_image_5fstorage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_image_5fstorage_2eproto;
class GetImageRequest;
class GetImageRequestDefaultTypeInternal;
extern GetImageRequestDefaultTypeInternal _GetImageRequest_default_instance_;
class GetImageResponse;
class GetImageResponseDefaultTypeInternal;
extern GetImageResponseDefaultTypeInternal _GetImageResponse_default_instance_;
class StoreImageRequest;
class StoreImageRequestDefaultTypeInternal;
extern StoreImageRequestDefaultTypeInternal _StoreImageRequest_default_instance_;
class StoreImageResponse;
class StoreImageResponseDefaultTypeInternal;
extern StoreImageResponseDefaultTypeInternal _StoreImageResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GetImageRequest* Arena::CreateMaybeMessage<::GetImageRequest>(Arena*);
template<> ::GetImageResponse* Arena::CreateMaybeMessage<::GetImageResponse>(Arena*);
template<> ::StoreImageRequest* Arena::CreateMaybeMessage<::StoreImageRequest>(Arena*);
template<> ::StoreImageResponse* Arena::CreateMaybeMessage<::StoreImageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class StoreImageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StoreImageRequest) */ {
 public:
  StoreImageRequest();
  virtual ~StoreImageRequest();

  StoreImageRequest(const StoreImageRequest& from);
  StoreImageRequest(StoreImageRequest&& from) noexcept
    : StoreImageRequest() {
    *this = ::std::move(from);
  }

  inline StoreImageRequest& operator=(const StoreImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreImageRequest& operator=(StoreImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreImageRequest* internal_default_instance() {
    return reinterpret_cast<const StoreImageRequest*>(
               &_StoreImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StoreImageRequest& a, StoreImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreImageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreImageRequest* New() const final {
    return CreateMaybeMessage<StoreImageRequest>(nullptr);
  }

  StoreImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreImageRequest& from);
  void MergeFrom(const StoreImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StoreImageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_5fstorage_2eproto);
    return ::descriptor_table_image_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
    kImageIdFieldNumber = 2,
    kImageFieldNumber = 3,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // string image_id = 2;
  void clear_image_id();
  const std::string& image_id() const;
  void set_image_id(const std::string& value);
  void set_image_id(std::string&& value);
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  std::string* mutable_image_id();
  std::string* release_image_id();
  void set_allocated_image_id(std::string* image_id);
  private:
  const std::string& _internal_image_id() const;
  void _internal_set_image_id(const std::string& value);
  std::string* _internal_mutable_image_id();
  public:

  // .ImageData image = 3;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::ImageData& image() const;
  ::ImageData* release_image();
  ::ImageData* mutable_image();
  void set_allocated_image(::ImageData* image);
  private:
  const ::ImageData& _internal_image() const;
  ::ImageData* _internal_mutable_image();
  public:

  // @@protoc_insertion_point(class_scope:StoreImageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_id_;
  ::ImageData* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class StoreImageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StoreImageResponse) */ {
 public:
  StoreImageResponse();
  virtual ~StoreImageResponse();

  StoreImageResponse(const StoreImageResponse& from);
  StoreImageResponse(StoreImageResponse&& from) noexcept
    : StoreImageResponse() {
    *this = ::std::move(from);
  }

  inline StoreImageResponse& operator=(const StoreImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreImageResponse& operator=(StoreImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreImageResponse* internal_default_instance() {
    return reinterpret_cast<const StoreImageResponse*>(
               &_StoreImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StoreImageResponse& a, StoreImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreImageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreImageResponse* New() const final {
    return CreateMaybeMessage<StoreImageResponse>(nullptr);
  }

  StoreImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreImageResponse& from);
  void MergeFrom(const StoreImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StoreImageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_5fstorage_2eproto);
    return ::descriptor_table_image_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:StoreImageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetImageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetImageRequest) */ {
 public:
  GetImageRequest();
  virtual ~GetImageRequest();

  GetImageRequest(const GetImageRequest& from);
  GetImageRequest(GetImageRequest&& from) noexcept
    : GetImageRequest() {
    *this = ::std::move(from);
  }

  inline GetImageRequest& operator=(const GetImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageRequest& operator=(GetImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetImageRequest* internal_default_instance() {
    return reinterpret_cast<const GetImageRequest*>(
               &_GetImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetImageRequest& a, GetImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetImageRequest* New() const final {
    return CreateMaybeMessage<GetImageRequest>(nullptr);
  }

  GetImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetImageRequest& from);
  void MergeFrom(const GetImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetImageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_5fstorage_2eproto);
    return ::descriptor_table_image_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconstructionIdFieldNumber = 1,
    kImageIdFieldNumber = 2,
  };
  // string reconstruction_id = 1;
  void clear_reconstruction_id();
  const std::string& reconstruction_id() const;
  void set_reconstruction_id(const std::string& value);
  void set_reconstruction_id(std::string&& value);
  void set_reconstruction_id(const char* value);
  void set_reconstruction_id(const char* value, size_t size);
  std::string* mutable_reconstruction_id();
  std::string* release_reconstruction_id();
  void set_allocated_reconstruction_id(std::string* reconstruction_id);
  private:
  const std::string& _internal_reconstruction_id() const;
  void _internal_set_reconstruction_id(const std::string& value);
  std::string* _internal_mutable_reconstruction_id();
  public:

  // string image_id = 2;
  void clear_image_id();
  const std::string& image_id() const;
  void set_image_id(const std::string& value);
  void set_image_id(std::string&& value);
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  std::string* mutable_image_id();
  std::string* release_image_id();
  void set_allocated_image_id(std::string* image_id);
  private:
  const std::string& _internal_image_id() const;
  void _internal_set_image_id(const std::string& value);
  std::string* _internal_mutable_image_id();
  public:

  // @@protoc_insertion_point(class_scope:GetImageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reconstruction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class GetImageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetImageResponse) */ {
 public:
  GetImageResponse();
  virtual ~GetImageResponse();

  GetImageResponse(const GetImageResponse& from);
  GetImageResponse(GetImageResponse&& from) noexcept
    : GetImageResponse() {
    *this = ::std::move(from);
  }

  inline GetImageResponse& operator=(const GetImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageResponse& operator=(GetImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetImageResponse* internal_default_instance() {
    return reinterpret_cast<const GetImageResponse*>(
               &_GetImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetImageResponse& a, GetImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetImageResponse* New() const final {
    return CreateMaybeMessage<GetImageResponse>(nullptr);
  }

  GetImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetImageResponse& from);
  void MergeFrom(const GetImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetImageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_5fstorage_2eproto);
    return ::descriptor_table_image_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // .ImageData image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::ImageData& image() const;
  ::ImageData* release_image();
  ::ImageData* mutable_image();
  void set_allocated_image(::ImageData* image);
  private:
  const ::ImageData& _internal_image() const;
  ::ImageData* _internal_mutable_image();
  public:

  // @@protoc_insertion_point(class_scope:GetImageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ImageData* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StoreImageRequest

// string reconstruction_id = 1;
inline void StoreImageRequest::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StoreImageRequest::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:StoreImageRequest.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void StoreImageRequest::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:StoreImageRequest.reconstruction_id)
}
inline std::string* StoreImageRequest::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:StoreImageRequest.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& StoreImageRequest::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void StoreImageRequest::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StoreImageRequest::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreImageRequest.reconstruction_id)
}
inline void StoreImageRequest::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreImageRequest.reconstruction_id)
}
inline void StoreImageRequest::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreImageRequest.reconstruction_id)
}
inline std::string* StoreImageRequest::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoreImageRequest::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:StoreImageRequest.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoreImageRequest::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:StoreImageRequest.reconstruction_id)
}

// string image_id = 2;
inline void StoreImageRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StoreImageRequest::image_id() const {
  // @@protoc_insertion_point(field_get:StoreImageRequest.image_id)
  return _internal_image_id();
}
inline void StoreImageRequest::set_image_id(const std::string& value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:StoreImageRequest.image_id)
}
inline std::string* StoreImageRequest::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable:StoreImageRequest.image_id)
  return _internal_mutable_image_id();
}
inline const std::string& StoreImageRequest::_internal_image_id() const {
  return image_id_.GetNoArena();
}
inline void StoreImageRequest::_internal_set_image_id(const std::string& value) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StoreImageRequest::set_image_id(std::string&& value) {
  
  image_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreImageRequest.image_id)
}
inline void StoreImageRequest::set_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreImageRequest.image_id)
}
inline void StoreImageRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreImageRequest.image_id)
}
inline std::string* StoreImageRequest::_internal_mutable_image_id() {
  
  return image_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoreImageRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:StoreImageRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoreImageRequest::set_allocated_image_id(std::string* image_id) {
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:StoreImageRequest.image_id)
}

// .ImageData image = 3;
inline bool StoreImageRequest::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool StoreImageRequest::has_image() const {
  return _internal_has_image();
}
inline const ::ImageData& StoreImageRequest::_internal_image() const {
  const ::ImageData* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ImageData*>(
      &::_ImageData_default_instance_);
}
inline const ::ImageData& StoreImageRequest::image() const {
  // @@protoc_insertion_point(field_get:StoreImageRequest.image)
  return _internal_image();
}
inline ::ImageData* StoreImageRequest::release_image() {
  // @@protoc_insertion_point(field_release:StoreImageRequest.image)
  
  ::ImageData* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::ImageData* StoreImageRequest::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::ImageData>(GetArenaNoVirtual());
    image_ = p;
  }
  return image_;
}
inline ::ImageData* StoreImageRequest::mutable_image() {
  // @@protoc_insertion_point(field_mutable:StoreImageRequest.image)
  return _internal_mutable_image();
}
inline void StoreImageRequest::set_allocated_image(::ImageData* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:StoreImageRequest.image)
}

// -------------------------------------------------------------------

// StoreImageResponse

// string path = 1;
inline void StoreImageResponse::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StoreImageResponse::path() const {
  // @@protoc_insertion_point(field_get:StoreImageResponse.path)
  return _internal_path();
}
inline void StoreImageResponse::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:StoreImageResponse.path)
}
inline std::string* StoreImageResponse::mutable_path() {
  // @@protoc_insertion_point(field_mutable:StoreImageResponse.path)
  return _internal_mutable_path();
}
inline const std::string& StoreImageResponse::_internal_path() const {
  return path_.GetNoArena();
}
inline void StoreImageResponse::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StoreImageResponse::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreImageResponse.path)
}
inline void StoreImageResponse::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreImageResponse.path)
}
inline void StoreImageResponse::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreImageResponse.path)
}
inline std::string* StoreImageResponse::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoreImageResponse::release_path() {
  // @@protoc_insertion_point(field_release:StoreImageResponse.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoreImageResponse::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:StoreImageResponse.path)
}

// -------------------------------------------------------------------

// GetImageRequest

// string reconstruction_id = 1;
inline void GetImageRequest::clear_reconstruction_id() {
  reconstruction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetImageRequest::reconstruction_id() const {
  // @@protoc_insertion_point(field_get:GetImageRequest.reconstruction_id)
  return _internal_reconstruction_id();
}
inline void GetImageRequest::set_reconstruction_id(const std::string& value) {
  _internal_set_reconstruction_id(value);
  // @@protoc_insertion_point(field_set:GetImageRequest.reconstruction_id)
}
inline std::string* GetImageRequest::mutable_reconstruction_id() {
  // @@protoc_insertion_point(field_mutable:GetImageRequest.reconstruction_id)
  return _internal_mutable_reconstruction_id();
}
inline const std::string& GetImageRequest::_internal_reconstruction_id() const {
  return reconstruction_id_.GetNoArena();
}
inline void GetImageRequest::_internal_set_reconstruction_id(const std::string& value) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetImageRequest::set_reconstruction_id(std::string&& value) {
  
  reconstruction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetImageRequest.reconstruction_id)
}
inline void GetImageRequest::set_reconstruction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetImageRequest.reconstruction_id)
}
inline void GetImageRequest::set_reconstruction_id(const char* value, size_t size) {
  
  reconstruction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetImageRequest.reconstruction_id)
}
inline std::string* GetImageRequest::_internal_mutable_reconstruction_id() {
  
  return reconstruction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetImageRequest::release_reconstruction_id() {
  // @@protoc_insertion_point(field_release:GetImageRequest.reconstruction_id)
  
  return reconstruction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetImageRequest::set_allocated_reconstruction_id(std::string* reconstruction_id) {
  if (reconstruction_id != nullptr) {
    
  } else {
    
  }
  reconstruction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reconstruction_id);
  // @@protoc_insertion_point(field_set_allocated:GetImageRequest.reconstruction_id)
}

// string image_id = 2;
inline void GetImageRequest::clear_image_id() {
  image_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetImageRequest::image_id() const {
  // @@protoc_insertion_point(field_get:GetImageRequest.image_id)
  return _internal_image_id();
}
inline void GetImageRequest::set_image_id(const std::string& value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:GetImageRequest.image_id)
}
inline std::string* GetImageRequest::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable:GetImageRequest.image_id)
  return _internal_mutable_image_id();
}
inline const std::string& GetImageRequest::_internal_image_id() const {
  return image_id_.GetNoArena();
}
inline void GetImageRequest::_internal_set_image_id(const std::string& value) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetImageRequest::set_image_id(std::string&& value) {
  
  image_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetImageRequest.image_id)
}
inline void GetImageRequest::set_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetImageRequest.image_id)
}
inline void GetImageRequest::set_image_id(const char* value, size_t size) {
  
  image_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetImageRequest.image_id)
}
inline std::string* GetImageRequest::_internal_mutable_image_id() {
  
  return image_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetImageRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:GetImageRequest.image_id)
  
  return image_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetImageRequest::set_allocated_image_id(std::string* image_id) {
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_id);
  // @@protoc_insertion_point(field_set_allocated:GetImageRequest.image_id)
}

// -------------------------------------------------------------------

// GetImageResponse

// .ImageData image = 1;
inline bool GetImageResponse::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool GetImageResponse::has_image() const {
  return _internal_has_image();
}
inline const ::ImageData& GetImageResponse::_internal_image() const {
  const ::ImageData* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ImageData*>(
      &::_ImageData_default_instance_);
}
inline const ::ImageData& GetImageResponse::image() const {
  // @@protoc_insertion_point(field_get:GetImageResponse.image)
  return _internal_image();
}
inline ::ImageData* GetImageResponse::release_image() {
  // @@protoc_insertion_point(field_release:GetImageResponse.image)
  
  ::ImageData* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::ImageData* GetImageResponse::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::ImageData>(GetArenaNoVirtual());
    image_ = p;
  }
  return image_;
}
inline ::ImageData* GetImageResponse::mutable_image() {
  // @@protoc_insertion_point(field_mutable:GetImageResponse.image)
  return _internal_mutable_image();
}
inline void GetImageResponse::set_allocated_image(::ImageData* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:GetImageResponse.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_image_5fstorage_2eproto
