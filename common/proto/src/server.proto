syntax="proto3";

message ImageMetaData {
    string id = 1;
    string reconstruction = 2;
    string path = 3;
    string format = 4;
};

message ImageData {
    bytes data = 1;
    ImageMetaData metadata = 2;
} 

message SparsePointCloudData { 
    bytes data = 1;
    SparsePointCloudMetaData metadata = 2;
}

message SparsePointCloudMetaData { 
    string id = 1;
    string reconstruction = 2;
    string mvs_path = 3;
    string ply_path = 4;
}

message OBJMetaData {
    string id = 1;
    string reconstruction = 2;
    string path = 3;
    string texture_path = 4;
    string mtl_path = 5;
}

message OBJData{
    bytes obj_data = 1;
    bytes texture_data = 2;
    bytes mtl_data = 3;
    OBJMetaData metadata = 4;
}

message ReconstructionData {
    string id = 1; 
    string root = 2;
    repeated string images = 3;
    string sparse_reconstruction = 4;
    string obj = 5;
    string images_path = 6;
    string sfm_path = 7;
    string mvs_path = 8;
    string features_path = 9;
    string matches_path = 10;
}

message StoreImageResponse{
    bool success = 1;
}

message StoreImageRequest{
    string reconstruction_id = 1;
    ImageData image = 2;
}   

message NewReconstructionRequest {

};

message NewReconstructionResponse {
    string reconstruction_id = 1;
};

message ReconstructRequest{
    string reconstruction_id = 1;
}

message GetOBJRequest{
    string reconstruction_id = 1;
}

message GetOBJResponse {
    bool success = 1;
    OBJData obj = 2;
};

message ReconstructResponse {
    bool success = 1;
    string error_msg = 2;
}

message ReconstructionOBJ{
    bytes obj = 1;
}

message DeleteReconstructionRequest {
    string id = 1;
}

message DeleteReconstructionResponse {
    bool success = 1;
    string id = 2;
}

message CameraIntrinsics {
    string model = 1;
    string maker  = 2;
    string numeric_model = 3;
    float sensor_size = 4;
    string focus_mode = 5;
    float horizontal_view_angle = 6;
    int32 jpeg_quality = 7;
}

message HandhsakeRequest {
    string identifier = 1;
    CameraIntrinsics camera_intrinsics = 2;
}

message HandshakeResponse{
    bool success = 1;
}

message StartSessionRequest {
    string reconstruction_id = 1;
}

message StartSessionResponse{
    string reconstruction_id = 1;
    string session_id = 2;
}

message StopSessionRequest {
    string session_id = 1;
}

message StopSessionResponse {
    string session_id = 1;
}

message SessionAddImageRequest {
    string session_id = 1;
    StoreImageRequest upload_image = 2;
};

message SessionAddImageResponse {

};

message GetSparseRequest {
    string reconstruction_id = 1;
};

message GetSparseResponse {
    SparsePointCloudData sparse = 1;
};

message SetReconstructionConfigRequest {
    string reconstruction_id = 1;
    string config_json = 2; 
};

message SetReconstructionConfigResponse {
    bool success = 1;
};

message GetReconstructionConfigRequest {
    string reconstruction_id = 1;
};

message GetReconstructionConfigResponse {
    string config_json = 1;
};

message ReconstructionUploadImageBatchRequest {
    int32 idx = 1;
    ImageData data = 2;
}

message ReconstructionUploadImageBatchResponse{
    int32 images_uploaded =  1;
}

service ReconstructionService {
    rpc Handshake(HandhsakeRequest) returns (HandshakeResponse){};
    rpc StoreImage(stream StoreImageRequest) returns (StoreImageResponse){};
    rpc Reconstruct(ReconstructRequest) returns (ReconstructResponse);
    rpc GetOBJ(GetOBJRequest) returns (stream GetOBJResponse);
    rpc GetSparse(GetSparseRequest) returns (stream GetSparseResponse);
    rpc NewReconstruction(NewReconstructionRequest) returns (NewReconstructionResponse);
    rpc DeleteReconstruction(DeleteReconstructionRequest) returns (DeleteReconstructionResponse);
    rpc StartSession(StartSessionRequest) returns (StartSessionResponse);
    rpc StopSession(StopSessionRequest) returns (StopSessionResponse);
    rpc SessionAddImage(stream SessionAddImageRequest) returns (SessionAddImageResponse);
    rpc SetReconstructionConfig(SetReconstructionConfigRequest) returns (SetReconstructionConfigResponse);
    rpc GetReconstructionConfig(GetReconstructionConfigRequest) returns (GetReconstructionConfigResponse);
    rpc ReconstructionUploadImageBatch(stream ReconstructionUploadImageBatchRequest) returns (ReconstructionUploadImageBatchResponse);
}